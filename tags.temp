!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim') && exists('*jobwait') && !s:is_win$/;"	v
s:me	autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
ask	autoload/plug.vim	/^function! s:ask(message)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
reload	autoload/plug.vim	/^function! s:reload()$/;"	f
trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
rtp	autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
rtp	autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, prefix)$/;"	f
Plug	autoload/plug.vim	/^function! s:Plug(repo, ...)$/;"	f
parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
retry	autoload/plug.vim	/^function! s:retry()$/;"	f
is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
names	autoload/plug.vim	/^function! s:names(...)$/;"	f
update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_handler	autoload/plug.vim	/^function! s:job_handler(job_id, data, event) abort$/;"	f
spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
bar	autoload/plug.vim	/^function! s:bar()$/;"	f
logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
tick	autoload/plug.vim	/^function! s:tick()$/;"	f
update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
shellesc	autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
status	autoload/plug.vim	/^function! s:status()$/;"	f
extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
diff	autoload/plug.vim	/^function! s:diff()$/;"	f
revert	autoload/plug.vim	/^function! s:revert()$/;"	f
snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:first_rtp	autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:last_rtp	autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
s:did_buffers	autoload/pyclewn/buffers.vim	/^let s:did_buffers = 1$/;"	v
pyclewn#buffers#CreateWindows	autoload/pyclewn/buffers.vim	/^function pyclewn#buffers#CreateWindows(debugger, window)$/;"	f
pyclewn#buffers#DbgvarSplit	autoload/pyclewn/buffers.vim	/^function pyclewn#buffers#DbgvarSplit()$/;"	f
pyclewn#buffers#GotoFrame	autoload/pyclewn/buffers.vim	/^function pyclewn#buffers#GotoFrame(fname)$/;"	f
pyclewn#buffers#GotoBreakpoint	autoload/pyclewn/buffers.vim	/^function pyclewn#buffers#GotoBreakpoint(fname, lnum)$/;"	f
create_tab_windows	autoload/pyclewn/buffers.vim	/^function s:create_tab_windows(debugger)$/;"	f
create_windows	autoload/pyclewn/buffers.vim	/^function s:create_windows(debugger, window)$/;"	f
goto_window	autoload/pyclewn/buffers.vim	/^function s:goto_window(fname, lnum)$/;"	f
s:did_start	autoload/pyclewn/start.vim	/^let s:did_start = 1$/;"	v
init	autoload/pyclewn/start.vim	/^function s:init(debugger)$/;"	f
interrupt	autoload/pyclewn/start.vim	/^function s:interrupt(args)$/;"	f
pyclewn_ready	autoload/pyclewn/start.vim	/^function s:pyclewn_ready(filename)$/;"	f
start	autoload/pyclewn/start.vim	/^function s:start(args, pdb_attach)$/;"	f
pyclewn#start#StartClewn	autoload/pyclewn/start.vim	/^function pyclewn#start#StartClewn(...)$/;"	f
info	autoload/pyclewn/start.vim	/^function s:info(msg)$/;"	f
error	autoload/pyclewn/start.vim	/^function s:error(msg)$/;"	f
pyclewn#version#RuntimeVersion	autoload/pyclewn/version.vim	/^function pyclewn#version#RuntimeVersion()$/;"	f
LS	cfg/function.vim	/^function! LS()$/;"	f
s:hidden_all	cfg/function.vim	/^let s:hidden_all = 0$/;"	v
ToggleHiddenAll	cfg/function.vim	/^function! ToggleHiddenAll()$/;"	f
LocationListToggle	cfg/function.vim	/^function! LocationListToggle()$/;"	f
QuickfixToggle	cfg/function.vim	/^function! QuickfixToggle()$/;"	f
MarkMargin	cfg/function.vim	/^function! MarkMargin (on)$/;"	f
Tab_Or_Complete	cfg/function.vim	/^function! Tab_Or_Complete()$/;"	f
AutoProjectRootCD	cfg/function.vim	/^function! <SID>AutoProjectRootCD()$/;"	f
RenameFile	cfg/function.vim	/^function! RenameFile()$/;"	f
MkNonExDir	cfg/function.vim	/^function! s:MkNonExDir(file, buf)$/;"	f
Filename	cfg/function.vim	/^function! Filename()$/;"	f
Favorites	cfg/function.vim	/^function! Favorites(...)$/;"	f
BWCCreateDir	cfg/function.vim	/^augroup BWCCreateDir$/;"	a
all_autocmds	cfg/function.vim	/^augroup all_autocmds$/;"	a
Filename	cfg/function.vim	/^    command! Filename execute ":call Filename()"$/;"	c
Favorites	cfg/function.vim	/^    command! -nargs=? Favorites call Favorites(<f-args>)$/;"	c
<space>	cfg/mapping.vim	/^nmap <space> <leader>$/;"	m
,	cfg/mapping.vim	/^nnoremap , :$/;"	m
<leader>sv	cfg/mapping.vim	/^nnoremap <leader>sv :source ~\/.vimrc<cr>$/;"	m
<leader>s.	cfg/mapping.vim	/^nmap <leader>s. :source %<cr>$/;"	m
<leader>ee	cfg/mapping.vim	/^nnoremap <leader>ee :e %:p:h<tab>$/;"	m
<leader>wo	cfg/mapping.vim	/^nnoremap <leader>wo :only!<cr>$/;"	m
<leader>ws	cfg/mapping.vim	/^nnoremap <leader>ws :w!<cr>$/;"	m
<leader>wq	cfg/mapping.vim	/^nnoremap <leader>wq :wq!<cr>$/;"	m
<leader>wd	cfg/mapping.vim	/^nnoremap <leader>wd :bd<cr>$/;"	m
<leader>qa	cfg/mapping.vim	/^nnoremap <leader>qa :qall!<cr>$/;"	m
<leader>sb	cfg/mapping.vim	/^nnoremap <leader>sb :set scrollbind<cr>$/;"	m
:Q	cfg/mapping.vim	/^nnoremap :Q :q$/;"	m
§	cfg/mapping.vim	/^nnoremap § :vertical resize +5<cr>$/;"	m
±	cfg/mapping.vim	/^nnoremap ± :vertical resize -5<cr>$/;"	m
<leader>cr	cfg/mapping.vim	/^nnoremap <leader>cr :ProjectRootCD<cr>$/;"	m
<leader>cl	cfg/mapping.vim	/^nnoremap <leader>cl :lcd %:p:h<cr>$/;"	m
<leader>ya	cfg/mapping.vim	/^nnoremap <leader>ya :let @* = expand("%:p")<cr>$/;"	m
_	cfg/mapping.vim	/^ noremap <silent> _ dd$/;"	m
Y	cfg/mapping.vim	/^ nnoremap Y y\$$/;"	m
0	cfg/mapping.vim	/^ nnoremap 0 ^$/;"	m
^	cfg/mapping.vim	/^ nnoremap ^ 0$/;"	m
J	cfg/mapping.vim	/^ nnoremap J 5j$/;"	m
K	cfg/mapping.vim	/^ nnoremap K 5k$/;"	m
L	cfg/mapping.vim	/^ nnoremap L 4l$/;"	m
H	cfg/mapping.vim	/^ nnoremap H 4h$/;"	m
+	cfg/mapping.vim	/^ nnoremap + :bn<cr>$/;"	m
-	cfg/mapping.vim	/^ nnoremap - :bp<cr>$/;"	m
<leader>bd	cfg/mapping.vim	/^ nnoremap <leader>bd :bp \\| bd #<cr>$/;"	m
<leader>tn	cfg/mapping.vim	/^ nnoremap <leader>tn :tnext<cr>$/;"	m
<leader>tp	cfg/mapping.vim	/^ nnoremap <leader>tp :tprev<cr>$/;"	m
<leader>tw	cfg/mapping.vim	/^ nnoremap <leader>tw :tag <C-R><C-W><cr>$/;"	m
<leader>ln	cfg/mapping.vim	/^ nnoremap <leader>ln :lnext<cr>$/;"	m
<leader>lp	cfg/mapping.vim	/^ nnoremap <leader>lp :lprevious<cr>$/;"	m
<leader>lt	cfg/mapping.vim	/^ nnoremap <leader>lt :call LocationListToggle()<cr>$/;"	m
<leader>lo	cfg/mapping.vim	/^ nnoremap <leader>lo :lopen<cr>$/;"	m
<leader>lc	cfg/mapping.vim	/^ nnoremap <leader>lc :lclose<cr>$/;"	m
<leader>qn	cfg/mapping.vim	/^ nnoremap <leader>qn :cnext<cr>$/;"	m
<leader>qp	cfg/mapping.vim	/^ nnoremap <leader>qp :cprevious<cr>$/;"	m
<leader>qt	cfg/mapping.vim	/^ nnoremap <leader>qt :call QuickfixToggle()<cr>$/;"	m
<leader>qo	cfg/mapping.vim	/^ nnoremap <leader>qo :copen<cr>$/;"	m
<leader>qc	cfg/mapping.vim	/^ nnoremap <leader>qc :cclose<cr>$/;"	m
<C-a>	cfg/mapping.vim	/^ cnoremap <C-a> <Home>$/;"	m
w!!	cfg/mapping.vim	/^ cnoremap w!! w !sudo tee % >\/dev\/null$/;"	m
y	cfg/mapping.vim	/^ vnoremap y y`]$/;"	m
J	cfg/mapping.vim	/^ vnoremap J 3j$/;"	m
K	cfg/mapping.vim	/^ vnoremap K 3k$/;"	m
<BS>	cfg/mapping.vim	/^ vnoremap <BS> x$/;"	m
<	cfg/mapping.vim	/^ vnoremap < <gv$/;"	m
>	cfg/mapping.vim	/^ vnoremap > >gv$/;"	m
<leader>js	cfg/mapping.vim	/^ vnoremap <leader>js :<',>'!python -m json.tool<cr>$/;"	m
<Tab>	cfg/mapping.vim	/^inoremap <Tab> <C-R>=Tab_Or_Complete()<cr>$/;"	m
jk	cfg/mapping.vim	/^inoremap jk <Esc>$/;"	m
JK	cfg/mapping.vim	/^inoremap JK <Esc>$/;"	m
$JS_CMD	cfg/options.vim	/^let $JS_CMD='node'$/;"	v
$NVIM_TUI_ENABLE_CURSOR_SHAPE	cfg/options.vim	/^let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1$/;"	v
g:BASH_Ctrl_j	cfg/options.vim	/^let g:BASH_Ctrl_j = 'off'$/;"	v
g:tlist_javascript_settings	cfg/options.vim	/^let g:tlist_javascript_settings = 'javascript;r:var;s:string;a:array;o:object;u:function'$/;"	v
^[[B	cfg/options.vim	/^map ^[[B <down>$/;"	m
^[[C	cfg/options.vim	/^map ^[[C <right>$/;"	m
^[[D	cfg/options.vim	/^map ^[[D <left>iles$/;"	m
^[[B	cfg/options.vim	/^map ^[[B <down>$/;"	m
^[[C	cfg/options.vim	/^map ^[[C <right>$/;"	m
^[[D	cfg/options.vim	/^map ^[[D <left>er$/;"	m
g:quickfix_is_open	cfg/options.vim	/^let g:quickfix_is_open = 0$/;"	v
g:location_list_is_open	cfg/options.vim	/^let g:location_list_is_open = 0$/;"	v
<leader>gg	cfg/packages/agrep.vim	/^nnoremap <leader>gg :Agrep -r '' . <left><left><left><left>$/;"	m
g:airline_section_warning	cfg/packages/airline.vim	/^let g:airline_section_warning = 1$/;"	v
g:airline#extensions#branch#enabled	cfg/packages/airline.vim	/^let g:airline#extensions#branch#enabled = 1$/;"	v
g:airline#extensions#branch#empty_message	cfg/packages/airline.vim	/^let g:airline#extensions#branch#empty_message = ''$/;"	v
g:airline#extensions#branch#displayed_head_limit	cfg/packages/airline.vim	/^let g:airline#extensions#branch#displayed_head_limit = 10$/;"	v
g:airline#extensions#tagbar#enabled	cfg/packages/airline.vim	/^let g:airline#extensions#tagbar#enabled = 1$/;"	v
g:airline#extensions#hunks#enabled	cfg/packages/airline.vim	/^let g:airline#extensions#hunks#enabled = 1$/;"	v
g:airline#extensions#hunks#hunk_symbols	cfg/packages/airline.vim	/^let g:airline#extensions#hunks#hunk_symbols = ['+', '~', '-']$/;"	v
g:airline#extensions#ctrlp#show_adjacent_modes	cfg/packages/airline.vim	/^let g:airline#extensions#ctrlp#show_adjacent_modes = 1$/;"	v
g:airline#extensions#whitespace#enabled	cfg/packages/airline.vim	/^let g:airline#extensions#whitespace#enabled = 1$/;"	v
g:airline#extensions#tabline#buffer_idx_mode	cfg/packages/airline.vim	/^let g:airline#extensions#tabline#buffer_idx_mode = 1$/;"	v
g:airline#extensions#tabline#buffer_nr_show	cfg/packages/airline.vim	/^let g:airline#extensions#tabline#buffer_nr_show = 10$/;"	v
g:airline#extensions#tabline#fnamecollapse	cfg/packages/airline.vim	/^let g:airline#extensions#tabline#fnamecollapse = 0$/;"	v
g:airline#extensions#windowswap#enabled	cfg/packages/airline.vim	/^let g:airline#extensions#windowswap#enabled = 1$/;"	v
g:airline#extensions#tabline#fnamemod	cfg/packages/airline.vim	/^let g:airline#extensions#tabline#fnamemod = ':t:.'$/;"	v
g:airline_theme	cfg/packages/airline.vim	/^let g:airline_theme='base16_google'$/;"	v
g:airline_theme	cfg/packages/airline.vim	/^let g:airline_theme='powerlineish'$/;"	v
g:airline#extensions#bufferline#enabled	cfg/packages/airline.vim	/^let g:airline#extensions#bufferline#enabled = 0$/;"	v
g:airline_section_c	cfg/packages/airline.vim	/^let g:airline_section_c = '%{g:bf_airline_path} %t' "'%{getcwd()}\/%t'$/;"	v
g:airline#extensions#tabline#show_tabs	cfg/packages/airline.vim	/^let g:airline#extensions#tabline#show_tabs = 0$/;"	v
g:airline#extensions#tabline#enabled	cfg/packages/airline.vim	/^let g:airline#extensions#tabline#enabled = 0$/;"	v
g:airline#extensions#tabline#show_buffers	cfg/packages/airline.vim	/^let g:airline#extensions#tabline#show_buffers = 0$/;"	v
g:airline_section_b	cfg/packages/airline.vim	/^let g:airline_section_b = ''$/;"	v
g:airline_section_y	cfg/packages/airline.vim	/^let g:airline_section_y = ''$/;"	v
g:airline_left_sep	cfg/packages/airline.vim	/^let g:airline_left_sep = ' '$/;"	v
g:airline_right_sep	cfg/packages/airline.vim	/^let g:airline_right_sep = ' '$/;"	v
g:bufferline_echo	cfg/packages/airline.vim	/^let g:bufferline_echo = 1$/;"	v
<leader>ff	cfg/packages/ctrlsf.vim	/^nnoremap <leader>ff :CtrlSF$/;"	m
<leader>fw	cfg/packages/ctrlsf.vim	/^nnoremap <leader>fw :CtrlSF<cr>$/;"	m
g:ctrlsf_winsize	cfg/packages/ctrlsf.vim	/^let g:ctrlsf_winsize = '100'$/;"	v
<leader>eds	cfg/packages/custom.vim	/^nnoremap <leader>eds :call CompareWithEDS()<cr>$/;"	m
g:deoplete#omni#input_patterns	cfg/packages/deoplete.vim	/^        let g:deoplete#omni#input_patterns = {}$/;"	v
g:deoplete#enable_at_startup	cfg/packages/deoplete.vim	/^        let g:deoplete#enable_at_startup = 0$/;"	v
g:deoplete#disable_auto_complete	cfg/packages/deoplete.vim	/^        let g:deoplete#disable_auto_complete = 1$/;"	v
g:deoplete#enable_at_startup	cfg/packages/deoplete.vim	/^        let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#disable_auto_complete	cfg/packages/deoplete.vim	/^        let g:deoplete#disable_auto_complete = 0$/;"	v
<leader><C-d>	cfg/packages/dispatch.vim	/^nnoremap <leader><C-d> :Dispatch!  && read<c-left><c-left><left>$/;"	m
<C-q>	cfg/packages/dispatch.vim	/^nnoremap <C-q> :History:<CR>$/;"	m
<cr>	cfg/packages/easymotion.vim	/^nmap <cr> <Plug>(easymotion-bd-w)$/;"	m
\\	cfg/packages/easymotion.vim	/^nnoremap \\\\ \/$/;"	m
<C-e>	cfg/packages/explorer.vim	/^nnoremap <C-e> :Lexplore<cr>$/;"	m
<leader>dc	cfg/packages/explorer.vim	/^nnoremap <leader>dc :Texplore<cr>$/;"	m
g:netrw_winsize	cfg/packages/explorer.vim	/^let g:netrw_winsize = 20$/;"	v
<Leader>fg	cfg/packages/fzf.vim	/^nnoremap <silent> <Leader>fg :call ListFavorites('s:OpenGitFiles')<cr>$/;"	m
<Leader>fa	cfg/packages/fzf.vim	/^nnoremap <silent> <Leader>fa :call ListFavorites('s:OpenAllFiles')<cr>$/;"	m
<Leader>fp	cfg/packages/fzf.vim	/^nnoremap <silent> <Leader>fp :call ListFavorites('s:ChangeDirectory')<cr>$/;"	m
<leader><BS>	cfg/packages/fzf.vim	/^nnoremap <leader><BS> :Files<cr>$/;"	m
<leader>bl	cfg/packages/fzf.vim	/^nnoremap <leader>bl :BLines<cr>$/;"	m
<leader>hh	cfg/packages/fzf.vim	/^nnoremap <leader>hh :History<cr>$/;"	m
<leader>gs	cfg/packages/fzf.vim	/^nnoremap <leader>gs :GFiles?<cr>$/;"	m
<leader>hc	cfg/packages/fzf.vim	/^nnoremap <leader>hc :History:<cr>$/;"	m
<leader>hs	cfg/packages/fzf.vim	/^nnoremap <leader>hs :History\/<cr>$/;"	m
<BS>	cfg/packages/fzf.vim	/^nnoremap <BS> :GitFiles<cr>$/;"	m
<leader>ta	cfg/packages/fzf.vim	/^nnoremap <leader>ta :Tags<cr>$/;"	m
<BS>	cfg/packages/fzf.vim	/^vnoremap <BS> \/$/;"	m
<leader>ls	cfg/packages/fzf.vim	/^ nnoremap <leader>ls :Buffers<cr>$/;"	m
<tab>	cfg/packages/fzf.vim	/^ nnoremap <tab> :call FZFCommands('s:ExecFZFCommand')<cr>$/;"	m
<c-x><c-l>	cfg/packages/fzf.vim	/^ imap <c-x><c-l> <plug>(fzf-complete-line)$/;"	m
FZFCommands	cfg/packages/fzf.vim	/^ function! FZFCommands(function)$/;"	f
ExecFZFCommand	cfg/packages/fzf.vim	/^ function! s:ExecFZFCommand(command)$/;"	f
FindFilesInDirectory	cfg/packages/fzf.vim	/^ function! s:FindFilesInDirectory()$/;"	f
ChangeDirectory	cfg/packages/fzf.vim	/^ function! s:ChangeDirectory(path)$/;"	f
OpenAllFiles	cfg/packages/fzf.vim	/^ function! s:OpenAllFiles(path)$/;"	f
OpenGitFiles	cfg/packages/fzf.vim	/^ function! s:OpenGitFiles(path)$/;"	f
ListFavorites	cfg/packages/fzf.vim	/^ function! ListFavorites(path)$/;"	f
g:fzf_buffers_jump	cfg/packages/fzf.vim	/^ let g:fzf_buffers_jump = 1$/;"	v
g:fzf_commits_log_options	cfg/packages/fzf.vim	/^ let g:fzf_commits_log_options =$/;"	v
g:fzf_tags_command	cfg/packages/fzf.vim	/^ let g:fzf_tags_command = 'ctags -R'$/;"	v
FZFDirectory	cfg/packages/fzf.vim	/^ function! FZFDirectory(directory)$/;"	f
FZFDirectory	cfg/packages/fzf.vim	/^ command! -nargs=+ -complete=dir FZFDirectory call FZFDirectory('<args>')$/;"	c
escape	cfg/packages/fzf.vim	/^  function! s:escape(path)$/;"	f
AgHandler	cfg/packages/fzf.vim	/^  function! AgHandler(line)$/;"	f
FZFGrep	cfg/packages/fzf.vim	/^ function! FZFGrep(pattern, ...)$/;"	f
FZFGrep	cfg/packages/fzf.vim	/^ command! -nargs=* FZFGrep call FZFGrep(<f-args>)$/;"	c
g:fzf_colors	cfg/packages/fzf.vim	/^ let g:fzf_colors =$/;"	v
ag_to_qf	cfg/packages/fzf.vim	/^ function! s:ag_to_qf(line)$/;"	f
ag_handler	cfg/packages/fzf.vim	/^ function! s:ag_handler(lines)$/;"	f
GitDiffFiles	cfg/packages/git.vim	/^command! GitDiffFiles :args `git diff --name-only`$/;"	c
GitAllFiles	cfg/packages/git.vim	/^command! GitAllFiles :args `git ls-files`$/;"	c
<leader>gp	cfg/packages/gitgutter.vim	/^nnoremap <leader>gp :GitGutterPreviewHunk<cr>$/;"	m
<leader>gr	cfg/packages/gitgutter.vim	/^nnoremap <leader>gr :GitGutterRevertHunk<cr>$/;"	m
<leader>gt	cfg/packages/gitgutter.vim	/^nnoremap <leader>gt :GitGutterToggle<cr>$/;"	m
g:gitgutter_override_sign_column_highlight	cfg/packages/gitgutter.vim	/^let g:gitgutter_override_sign_column_highlight = 1$/;"	v
g:gitgutter_realtime	cfg/packages/gitgutter.vim	/^let g:gitgutter_realtime = 1$/;"	v
g:gitgutter_sign_column_always	cfg/packages/gitgutter.vim	/^let g:gitgutter_sign_column_always = 1$/;"	v
g:gitgutter_signs	cfg/packages/gitgutter.vim	/^let g:gitgutter_signs = 1$/;"	v
g:gitgutter_max_signs	cfg/packages/gitgutter.vim	/^let g:gitgutter_max_signs = 300  " default value$/;"	v
g:gitgutter_escape_grep	cfg/packages/gitgutter.vim	/^let g:gitgutter_escape_grep = 1$/;"	v
g:gitgutter_highlight_lines	cfg/packages/gitgutter.vim	/^let g:gitgutter_highlight_lines = 0$/;"	v
g:gitgutter_map_keys	cfg/packages/gitgutter.vim	/^let g:gitgutter_map_keys = 0$/;"	v
<leader>go	cfg/packages/goya.vim	/^nnoremap <leader>go :Goyo<cr>$/;"	m
<leader>js	cfg/packages/jsdoc.vim	/^nnoremap <leader>js :JsDoc<cr>$/;"	m
g:jsdoc_default_mapping	cfg/packages/jsdoc.vim	/^let g:jsdoc_default_mapping = 0$/;"	v
g:jsdoc_additional_descriptions	cfg/packages/jsdoc.vim	/^let g:jsdoc_additional_descriptions = 1$/;"	v
g:jsdoc_allow_input_prompt	cfg/packages/jsdoc.vim	/^let g:jsdoc_allow_input_prompt = 1$/;"	v
g:jsdoc_input_description	cfg/packages/jsdoc.vim	/^let g:jsdoc_input_description = 1$/;"	v
g:jsdoc_underscore_private	cfg/packages/jsdoc.vim	/^let g:jsdoc_underscore_private = 1$/;"	v
g:jsdoc_enable_es6	cfg/packages/jsdoc.vim	/^let g:jsdoc_enable_es6 = 1$/;"	v
g:vim_json_syntax_conceal	cfg/packages/json.vim	/^let g:vim_json_syntax_conceal = 0$/;"	v
g:tex_flavor	cfg/packages/latex.vim	/^let g:tex_flavor='latex'$/;"	v
Tex_FoldedSections	cfg/packages/latex.vim	/^let Tex_FoldedSections=""$/;"	v
Tex_FoldedEnvironments	cfg/packages/latex.vim	/^let Tex_FoldedEnvironments=""$/;"	v
Tex_FoldedMisc	cfg/packages/latex.vim	/^let Tex_FoldedMisc=""$/;"	v
<leader>li	cfg/packages/limelight.vim	/^nnoremap <leader>li :Limelight<cr>$/;"	m
macvim_hig_shift_movement	cfg/packages/macvim.vim	/^    let macvim_hig_shift_movement = 1$/;"	v
g:enable_bold_font	cfg/packages/macvim.vim	/^    let g:enable_bold_font = 1$/;"	v
<BS>	cfg/packages/macvim.vim	/^    nmap <BS> :find$/;"	m
<tab>	cfg/packages/macvim.vim	/^    nmap <tab> :ls<cr>:e$/;"	m
g:acp_enableAtStartup	cfg/packages/neocomplete.vim	/^let g:acp_enableAtStartup = 0$/;"	v
g:neocomplete#enable_at_startup	cfg/packages/neocomplete.vim	/^let g:neocomplete#enable_at_startup = 1$/;"	v
g:neocomplete#enable_auto_select	cfg/packages/neocomplete.vim	/^let g:neocomplete#enable_auto_select = 0$/;"	v
g:neocomplete#enable_smart_case	cfg/packages/neocomplete.vim	/^let g:neocomplete#enable_smart_case = 1$/;"	v
g:neocomplete#sources#syntax#min_keyword_length	cfg/packages/neocomplete.vim	/^let g:neocomplete#sources#syntax#min_keyword_length = 3$/;"	v
g:neocomplete#enable_refresh_always	cfg/packages/neocomplete.vim	/^let g:neocomplete#enable_refresh_always = 1$/;"	v
g:neocomplete#keyword_patterns	cfg/packages/neocomplete.vim	/^    let g:neocomplete#keyword_patterns = {}$/;"	v
<C-g>	cfg/packages/neocomplete.vim	/^inoremap <expr><C-g>     neocomplete#undo_completion()$/;"	m
<C-l>	cfg/packages/neocomplete.vim	/^inoremap <expr><C-l>     neocomplete#complete_common_string()$/;"	m
<CR>	cfg/packages/neocomplete.vim	/^inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>$/;"	m
my_cr_function	cfg/packages/neocomplete.vim	/^function! s:my_cr_function()$/;"	f
<TAB>	cfg/packages/neocomplete.vim	/^inoremap <expr><TAB>  pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m
<C-h>	cfg/packages/neocomplete.vim	/^inoremap <expr><C-h> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<BS>	cfg/packages/neocomplete.vim	/^inoremap <expr><BS> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
g:neocomplete#sources#omni#input_patterns	cfg/packages/neocomplete.vim	/^  let g:neocomplete#sources#omni#input_patterns = {}$/;"	v
g:neocomplete#sources#omni#input_patterns	cfg/packages/neocomplete.vim	/^let g:neocomplete#sources#omni#input_patterns.perl = '\\h\\w*->\\h\\w*\\|\\h\\w*::'$/;"	v
omnicomplete	cfg/packages/neocomplete.vim	/^aug omnicomplete$/;"	a
g:neomake_javascript_enabled_makers	cfg/packages/neomake.vim	/^let g:neomake_javascript_enabled_makers = ['eslint']$/;"	v
s:hidden_all	cfg/packages/neovim-dot-app.vim	/^    let s:hidden_all = 1$/;"	v
omnifuncs	cfg/packages/omnifuncs.vim	/^augroup omnifuncs$/;"	a
repmo_key	cfg/packages/repmo.vim	/^let repmo_key = ";"$/;"	v
repmo_revkey	cfg/packages/repmo.vim	/^let repmo_revkey = ":"$/;"	v
g:table_mode_corner	cfg/packages/table-mode.vim	/^let g:table_mode_corner="|"$/;"	v
g:tagbar_autofocus	cfg/packages/tagbar.vim	/^let g:tagbar_autofocus = 1$/;"	v
<c-\>	cfg/packages/tcomment.vim	/^nmap <c-\\> :TComment<cr>$/;"	m
<c-\>	cfg/packages/tcomment.vim	/^vmap <c-\\> :TComment<cr>$/;"	m
<leader>td	cfg/packages/tern.vim	/^nnoremap <leader>td :TernDef<cr>$/;"	m
tern#is_show_argument_hints_enabled	cfg/packages/tern.vim	/^let tern#is_show_argument_hints_enabled = 1$/;"	v
g:tern_show_argument_hints	cfg/packages/tern.vim	/^let g:tern_show_argument_hints = 'on_hold'$/;"	v
g:tern_show_signature_in_pum	cfg/packages/tern.vim	/^let g:tern_show_signature_in_pum = 1$/;"	v
g:tern_request_timeout	cfg/packages/tern.vim	/^let g:tern_request_timeout = 1$/;"	v
g:tern#command	cfg/packages/tern.vim	/^let g:tern#command = ["tern"]$/;"	v
g:tern#arguments	cfg/packages/tern.vim	/^let g:tern#arguments = ["--persistent"]$/;"	v
<leader>tt	cfg/packages/tmux.vim	/^nnoremap <leader>tt :silent !tmux send-keys -t  "" C-m<left><left><left><left><left><left><left>$/;"	m
<c-s>	cfg/packages/unite.vim	/^nnoremap <c-s> :Unite directory_rec\/async -start-insert<cr>$/;"	m
g:UltiSnipsExpandTrigger	cfg/packages/util-snips.vim	/^let g:UltiSnipsExpandTrigger="§"$/;"	v
g:UltiSnipsSnippetDirectories	cfg/packages/util-snips.vim	/^let g:UltiSnipsSnippetDirectories=["~\/.vim\/snippets\/"]$/;"	v
g:javascript_plugin_jsdoc	cfg/packages/vim-javascript.vim	/^let g:javascript_plugin_jsdoc = 1$/;"	v
g:javascript_plugin_flow	cfg/packages/vim-javascript.vim	/^let g:javascript_plugin_flow = 1$/;"	v
<leader>ww	cfg/packages/windowswap.vim	/^nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<cr>$/;"	m
g:windowswap_map_keys	cfg/packages/windowswap.vim	/^let g:windowswap_map_keys = 0 "prevent default bindings$/;"	v
base16colorspace	cfg/theme.vim	/^let base16colorspace=256$/;"	v
g:colors_name	colors/arstotzka.vim	/^let g:colors_name = "Arstotzka"$/;"	v
colors_name	colors/arstotzka.vim	/^let colors_name   = "Arstotzka"$/;"	v
g:colors_name	colors/azure.vim	/^let g:colors_name = "Azure"$/;"	v
colors_name	colors/azure.vim	/^let colors_name   = "Azure"$/;"	v
g:colors_name	colors/bold.vim	/^let g:colors_name = "Bold"$/;"	v
colors_name	colors/bold.vim	/^let colors_name   = "Bold"$/;"	v
g:colors_name	colors/boxuk.vim	/^let g:colors_name = "Box UK"$/;"	v
colors_name	colors/boxuk.vim	/^let colors_name   = "Box UK"$/;"	v
g:colors_name	colors/carbonight-contrast.vim	/^let g:colors_name = "Carbonight Contrast"$/;"	v
colors_name	colors/carbonight-contrast.vim	/^let colors_name   = "Carbonight Contrast"$/;"	v
g:colors_name	colors/carbonight.vim	/^let g:colors_name = "Carbonight"$/;"	v
colors_name	colors/carbonight.vim	/^let colors_name   = "Carbonight"$/;"	v
g:colors_name	colors/chocolate.vim	/^let g:colors_name = "Chocolate"$/;"	v
colors_name	colors/chocolate.vim	/^let colors_name   = "Chocolate"$/;"	v
g:colors_name	colors/crisp.vim	/^let g:colors_name = "Crisp"$/;"	v
colors_name	colors/crisp.vim	/^let colors_name   = "Crisp"$/;"	v
g:colors_name	colors/darkside-contrast.vim	/^let g:colors_name = "Darkside Contrast"$/;"	v
colors_name	colors/darkside-contrast.vim	/^let colors_name   = "Darkside Contrast"$/;"	v
g:colors_name	colors/darkside.vim	/^let g:colors_name = "Darkside"$/;"	v
colors_name	colors/darkside.vim	/^let colors_name   = "Darkside"$/;"	v
g:colors_name	colors/earthsong-contrast.vim	/^let g:colors_name = "Earthsong Contrast"$/;"	v
colors_name	colors/earthsong-contrast.vim	/^let colors_name   = "Earthsong Contrast"$/;"	v
g:colors_name	colors/earthsong-light.vim	/^let g:colors_name = "Earthsong Light"$/;"	v
colors_name	colors/earthsong-light.vim	/^let colors_name   = "Earthsong Light"$/;"	v
g:colors_name	colors/earthsong.vim	/^let g:colors_name = "Earthsong"$/;"	v
colors_name	colors/earthsong.vim	/^let colors_name   = "Earthsong"$/;"	v
colors_name	colors/emacs.vim	/^let colors_name = "emacs"$/;"	v
g:colors_name	colors/freshcut-contrast.vim	/^let g:colors_name = "FreshCut Contrast"$/;"	v
colors_name	colors/freshcut-contrast.vim	/^let colors_name   = "FreshCut Contrast"$/;"	v
g:colors_name	colors/freshcut.vim	/^let g:colors_name = "FreshCut"$/;"	v
colors_name	colors/freshcut.vim	/^let colors_name   = "FreshCut"$/;"	v
g:colors_name	colors/frontier-contrast.vim	/^let g:colors_name = "Frontier Contrast"$/;"	v
colors_name	colors/frontier-contrast.vim	/^let colors_name   = "Frontier Contrast"$/;"	v
g:colors_name	colors/frontier.vim	/^let g:colors_name = "Frontier"$/;"	v
colors_name	colors/frontier.vim	/^let colors_name   = "Frontier"$/;"	v
g:colors_name	colors/github.vim	/^let g:colors_name = "Github"$/;"	v
colors_name	colors/github.vim	/^let colors_name   = "Github"$/;"	v
g:colors_name	colors/gloom-contrast.vim	/^let g:colors_name = "Gloom Contrast"$/;"	v
colors_name	colors/gloom-contrast.vim	/^let colors_name   = "Gloom Contrast"$/;"	v
g:colors_name	colors/gloom.vim	/^let g:colors_name = "Gloom"$/;"	v
colors_name	colors/gloom.vim	/^let colors_name   = "Gloom"$/;"	v
g:colors_name	colors/glowfish-contrast.vim	/^let g:colors_name = "Glowfish Contrast"$/;"	v
colors_name	colors/glowfish-contrast.vim	/^let colors_name   = "Glowfish Contrast"$/;"	v
g:colors_name	colors/glowfish.vim	/^let g:colors_name = "Glowfish"$/;"	v
colors_name	colors/glowfish.vim	/^let colors_name   = "Glowfish"$/;"	v
g:colors_name	colors/goldfish-contrast.vim	/^let g:colors_name = "Goldfish Contrast"$/;"	v
colors_name	colors/goldfish-contrast.vim	/^let colors_name   = "Goldfish Contrast"$/;"	v
g:colors_name	colors/goldfish.vim	/^let g:colors_name = "Goldfish"$/;"	v
colors_name	colors/goldfish.vim	/^let colors_name   = "Goldfish"$/;"	v
g:colors_name	colors/grunge-contrast.vim	/^let g:colors_name = "Grunge Contrast"$/;"	v
colors_name	colors/grunge-contrast.vim	/^let colors_name   = "Grunge Contrast"$/;"	v
g:colors_name	colors/grunge.vim	/^let g:colors_name = "Grunge"$/;"	v
colors_name	colors/grunge.vim	/^let colors_name   = "Grunge"$/;"	v
g:colors_name	colors/halflife-contrast.vim	/^let g:colors_name = "Halflife Contrast"$/;"	v
colors_name	colors/halflife-contrast.vim	/^let colors_name   = "Halflife Contrast"$/;"	v
g:colors_name	colors/halflife.vim	/^let g:colors_name = "Halflife"$/;"	v
colors_name	colors/halflife.vim	/^let colors_name   = "Halflife"$/;"	v
g:colors_name	colors/heroku.vim	/^let g:colors_name = "Heroku"$/;"	v
colors_name	colors/heroku.vim	/^let colors_name   = "Heroku"$/;"	v
g:colors_name	colors/hyrule-contrast.vim	/^let g:colors_name = "Hyrule Contrast"$/;"	v
colors_name	colors/hyrule-contrast.vim	/^let colors_name   = "Hyrule Contrast"$/;"	v
g:colors_name	colors/hyrule.vim	/^let g:colors_name = "Hyrule"$/;"	v
colors_name	colors/hyrule.vim	/^let colors_name   = "Hyrule"$/;"	v
g:colors_name	colors/iceberg-contrast.vim	/^let g:colors_name = "Iceberg Contrast"$/;"	v
colors_name	colors/iceberg-contrast.vim	/^let colors_name   = "Iceberg Contrast"$/;"	v
g:colors_name	colors/iceberg.vim	/^let g:colors_name = "Iceberg"$/;"	v
colors_name	colors/iceberg.vim	/^let colors_name   = "Iceberg"$/;"	v
g:colors_name	colors/juicy-contrast.vim	/^let g:colors_name = "Juicy Contrast"$/;"	v
colors_name	colors/juicy-contrast.vim	/^let colors_name   = "Juicy Contrast"$/;"	v
g:colors_name	colors/juicy.vim	/^let g:colors_name = "Juicy"$/;"	v
colors_name	colors/juicy.vim	/^let colors_name   = "Juicy"$/;"	v
g:colors_name	colors/keen-contrast.vim	/^let g:colors_name = "Keen Contrast"$/;"	v
colors_name	colors/keen-contrast.vim	/^let colors_name   = "Keen Contrast"$/;"	v
g:colors_name	colors/keen.vim	/^let g:colors_name = "Keen"$/;"	v
colors_name	colors/keen.vim	/^let colors_name   = "Keen"$/;"	v
g:colors_name	colors/kiwi.vim	/^let g:colors_name = "Kiwi"$/;"	v
colors_name	colors/kiwi.vim	/^let colors_name   = "Kiwi"$/;"	v
g:colors_name	colors/laravel-contrast.vim	/^let g:colors_name = "Laravel Contrast"$/;"	v
colors_name	colors/laravel-contrast.vim	/^let colors_name   = "Laravel Contrast"$/;"	v
g:colors_name	colors/laravel.vim	/^let g:colors_name = "Laravel"$/;"	v
colors_name	colors/laravel.vim	/^let colors_name   = "Laravel"$/;"	v
g:colors_name	colors/lavender-contrast.vim	/^let g:colors_name = "Lavender Contrast"$/;"	v
colors_name	colors/lavender-contrast.vim	/^let colors_name   = "Lavender Contrast"$/;"	v
g:colors_name	colors/lavender.vim	/^let g:colors_name = "Lavender"$/;"	v
colors_name	colors/lavender.vim	/^let colors_name   = "Lavender"$/;"	v
g:colors_name	colors/legacy.vim	/^let g:colors_name = "Legacy"$/;"	v
colors_name	colors/legacy.vim	/^let colors_name   = "Legacy"$/;"	v
g:colors_name	colors/lucario.vim	/^let g:colors_name = "lucario"$/;"	v
g:colors_name	colors/mellow-contrast.vim	/^let g:colors_name = "Mellow Contrast"$/;"	v
colors_name	colors/mellow-contrast.vim	/^let colors_name   = "Mellow Contrast"$/;"	v
g:colors_name	colors/mellow.vim	/^let g:colors_name = "Mellow"$/;"	v
colors_name	colors/mellow.vim	/^let colors_name   = "Mellow"$/;"	v
g:colors_name	colors/mintchoc.vim	/^let g:colors_name = "Mintchoc"$/;"	v
colors_name	colors/mintchoc.vim	/^let colors_name   = "Mintchoc"$/;"	v
g:colors_name	colors/mud-contrast.vim	/^let g:colors_name = "Mud Contrast"$/;"	v
colors_name	colors/mud-contrast.vim	/^let colors_name   = "Mud Contrast"$/;"	v
g:colors_name	colors/mud.vim	/^let g:colors_name = "Mud"$/;"	v
colors_name	colors/mud.vim	/^let colors_name   = "Mud"$/;"	v
g:colors_name	colors/otakon.vim	/^let g:colors_name = "Otakon"$/;"	v
colors_name	colors/otakon.vim	/^let colors_name   = "Otakon"$/;"	v
g:colors_name	colors/pastel.vim	/^let g:colors_name = "Pastel"$/;"	v
colors_name	colors/pastel.vim	/^let colors_name   = "Pastel"$/;"	v
g:colors_name	colors/patriot-contrast.vim	/^let g:colors_name = "Patriot Contrast"$/;"	v
colors_name	colors/patriot-contrast.vim	/^let colors_name   = "Patriot Contrast"$/;"	v
g:colors_name	colors/patriot.vim	/^let g:colors_name = "Patriot"$/;"	v
colors_name	colors/patriot.vim	/^let colors_name   = "Patriot"$/;"	v
g:colors_name	colors/peacock-contrast.vim	/^let g:colors_name = "Peacock Contrast"$/;"	v
colors_name	colors/peacock-contrast.vim	/^let colors_name   = "Peacock Contrast"$/;"	v
g:colors_name	colors/peacock.vim	/^let g:colors_name = "Peacock"$/;"	v
colors_name	colors/peacock.vim	/^let colors_name   = "Peacock"$/;"	v
g:colors_name	colors/peacocks-in-space.vim	/^let g:colors_name = "Peacocks In Space"$/;"	v
colors_name	colors/peacocks-in-space.vim	/^let colors_name   = "Peacocks In Space"$/;"	v
g:colors_name	colors/peel.vim	/^let g:colors_name = "Peel"$/;"	v
colors_name	colors/peel.vim	/^let colors_name   = "Peel"$/;"	v
g:colors_name	colors/piggy.vim	/^let g:colors_name = "Piggy"$/;"	v
colors_name	colors/piggy.vim	/^let colors_name   = "Piggy"$/;"	v
g:colors_name	colors/potpourri-contrast.vim	/^let g:colors_name = "Potpourri Contrast"$/;"	v
colors_name	colors/potpourri-contrast.vim	/^let colors_name   = "Potpourri Contrast"$/;"	v
g:colors_name	colors/potpourri.vim	/^let g:colors_name = "Potpourri"$/;"	v
colors_name	colors/potpourri.vim	/^let colors_name   = "Potpourri"$/;"	v
g:colors_name	colors/rainbow.vim	/^let g:colors_name = "Rainbow"$/;"	v
colors_name	colors/rainbow.vim	/^let colors_name   = "Rainbow"$/;"	v
g:colors_name	colors/revelation-contrast.vim	/^let g:colors_name = "Revelation Contrast"$/;"	v
colors_name	colors/revelation-contrast.vim	/^let colors_name   = "Revelation Contrast"$/;"	v
g:colors_name	colors/revelation.vim	/^let g:colors_name = "Revelation"$/;"	v
colors_name	colors/revelation.vim	/^let colors_name   = "Revelation"$/;"	v
g:colors_name	colors/shrek.vim	/^let g:colors_name = "Shrek"$/;"	v
colors_name	colors/shrek.vim	/^let colors_name   = "Shrek"$/;"	v
g:colors_name	colors/slate.vim	/^let g:colors_name = "Slate"$/;"	v
colors_name	colors/slate.vim	/^let colors_name   = "Slate"$/;"	v
g:colors_name	colors/slime-contrast.vim	/^let g:colors_name = "Slime Contrast"$/;"	v
colors_name	colors/slime-contrast.vim	/^let colors_name   = "Slime Contrast"$/;"	v
g:colors_name	colors/slime.vim	/^let g:colors_name = "Slime"$/;"	v
colors_name	colors/slime.vim	/^let colors_name   = "Slime"$/;"	v
g:colors_name	colors/snappy-contrast.vim	/^let g:colors_name = "Snappy Contrast"$/;"	v
colors_name	colors/snappy-contrast.vim	/^let colors_name   = "Snappy Contrast"$/;"	v
g:colors_name	colors/snappy-light.vim	/^let g:colors_name = "Snappy Light"$/;"	v
colors_name	colors/snappy-light.vim	/^let colors_name   = "Snappy Light"$/;"	v
g:colors_name	colors/snappy.vim	/^let g:colors_name = "Snappy"$/;"	v
colors_name	colors/snappy.vim	/^let colors_name   = "Snappy"$/;"	v
g:colors_name	colors/solarflare-contrast.vim	/^let g:colors_name = "Solarflare Contrast"$/;"	v
colors_name	colors/solarflare-contrast.vim	/^let colors_name   = "Solarflare Contrast"$/;"	v
g:colors_name	colors/solarflare.vim	/^let g:colors_name = "Solarflare"$/;"	v
colors_name	colors/solarflare.vim	/^let colors_name   = "Solarflare"$/;"	v
g:colors_name	colors/sourlick-contrast.vim	/^let g:colors_name = "Sourlick Contrast"$/;"	v
colors_name	colors/sourlick-contrast.vim	/^let colors_name   = "Sourlick Contrast"$/;"	v
g:colors_name	colors/sourlick.vim	/^let g:colors_name = "Sourlick"$/;"	v
colors_name	colors/sourlick.vim	/^let colors_name   = "Sourlick"$/;"	v
g:colors_name	colors/spearmint.vim	/^let g:colors_name = "Spearmint"$/;"	v
colors_name	colors/spearmint.vim	/^let colors_name   = "Spearmint"$/;"	v
g:colors_name	colors/stark-contrast.vim	/^let g:colors_name = "Stark Contrast"$/;"	v
colors_name	colors/stark-contrast.vim	/^let colors_name   = "Stark Contrast"$/;"	v
g:colors_name	colors/stark.vim	/^let g:colors_name = "Stark"$/;"	v
colors_name	colors/stark.vim	/^let colors_name   = "Stark"$/;"	v
g:colors_name	colors/super.vim	/^let g:colors_name = "Super"$/;"	v
colors_name	colors/super.vim	/^let colors_name   = "Super"$/;"	v
g:colors_name	colors/tonic.vim	/^let g:colors_name = "Tonic"$/;"	v
colors_name	colors/tonic.vim	/^let colors_name   = "Tonic"$/;"	v
g:colors_name	colors/tribal.vim	/^let g:colors_name = "Tribal"$/;"	v
colors_name	colors/tribal.vim	/^let colors_name   = "Tribal"$/;"	v
g:colors_name	colors/tron-contrast.vim	/^let g:colors_name = "Tron Contrast"$/;"	v
colors_name	colors/tron-contrast.vim	/^let colors_name   = "Tron Contrast"$/;"	v
g:colors_name	colors/tron.vim	/^let g:colors_name = "Tron"$/;"	v
colors_name	colors/tron.vim	/^let colors_name   = "Tron"$/;"	v
g:colors_name	colors/turnip-contrast.vim	/^let g:colors_name = "Turnip Contrast"$/;"	v
colors_name	colors/turnip-contrast.vim	/^let colors_name   = "Turnip Contrast"$/;"	v
g:colors_name	colors/turnip.vim	/^let g:colors_name = "Turnip"$/;"	v
colors_name	colors/turnip.vim	/^let colors_name   = "Turnip"$/;"	v
g:colors_name	colors/userscape.vim	/^let g:colors_name = "Userscape"$/;"	v
colors_name	colors/userscape.vim	/^let colors_name   = "Userscape"$/;"	v
g:colors_name	colors/yule.vim	/^let g:colors_name = "Yule"$/;"	v
colors_name	colors/yule.vim	/^let colors_name   = "Yule"$/;"	v
g:colors_name	colors/zacks-contrast.vim	/^let g:colors_name = "Zacks Contrast"$/;"	v
colors_name	colors/zacks-contrast.vim	/^let colors_name   = "Zacks Contrast"$/;"	v
g:colors_name	colors/zacks.vim	/^let g:colors_name = "Zacks"$/;"	v
colors_name	colors/zacks.vim	/^let colors_name   = "Zacks"$/;"	v
agrep_win_sp_mod	plugged/agrep/plugin/agrep.vim	/^    let agrep_win_sp_mod = 'bo 18'$/;"	v
agrep_default_flags	plugged/agrep/plugin/agrep.vim	/^    let agrep_default_flags = '-I --exclude-dir=.{git,svn}'$/;"	v
agrep_history	plugged/agrep/plugin/agrep.vim	/^    let agrep_history = 5$/;"	v
agrep_marker	plugged/agrep/plugin/agrep.vim	/^let agrep_marker = '¬'$/;"	v
Agrep	plugged/agrep/plugin/agrep.vim	/^command! -nargs=+ -complete=file Agrep call Agrep(<q-args>)$/;"	c
Astop	plugged/agrep/plugin/agrep.vim	/^command!          		 Astop call s:stop()$/;"	c
Anext	plugged/agrep/plugin/agrep.vim	/^command! -count=1 Anext      call s:goto_match( 1, <count>, 0)$/;"	c
Aprev	plugged/agrep/plugin/agrep.vim	/^command! -count=1 Aprev      call s:goto_match(-1, <count>, 0)$/;"	c
Anfile	plugged/agrep/plugin/agrep.vim	/^command! -count=1 Anfile     call s:goto_match( 1, <count>, 1)$/;"	c
Apfile	plugged/agrep/plugin/agrep.vim	/^command! -count=1 Apfile     call s:goto_match(-1, <count>, 1)$/;"	c
Aquickfix	plugged/agrep/plugin/agrep.vim	/^command!          Aquickfix  call s:set_qf()$/;"	c
Aopen	plugged/agrep/plugin/agrep.vim	/^command!          Aopen      call s:open_window()$/;"	c
Aclose	plugged/agrep/plugin/agrep.vim	/^command!          Aclose     call s:close_window()$/;"	c
Afilter	plugged/agrep/plugin/agrep.vim	/^command! -nargs=* -bang Afilter   call s:filer_results(<bang>0, <q-args>, 0)$/;"	c
Affilter	plugged/agrep/plugin/agrep.vim	/^command! -nargs=* -bang Affilter  call s:filer_results(<bang>0, <q-args>, 1)$/;"	c
Anewer	plugged/agrep/plugin/agrep.vim	/^command! -count=1 Anewer  call s:history_get( 1, <count>)$/;"	c
Aolder	plugged/agrep/plugin/agrep.vim	/^command! -count=1 Aolder  call s:history_get(-1, <count>)$/;"	c
s:grep_cmd	plugged/agrep/plugin/agrep.vim	/^let s:grep_cmd = 'export GREP_COLORS="mt=01:sl=:fn=:ln=:se=";$/;"	v
s:status	plugged/agrep/plugin/agrep.vim	/^let s:status = ''$/;"	v
s:history	plugged/agrep/plugin/agrep.vim	/^let s:history = []$/;"	v
Agrep	plugged/agrep/plugin/agrep.vim	/^func! Agrep(args)$/;"	f
delayed_run	plugged/agrep/plugin/agrep.vim	/^func! s:delayed_run(args, timer)$/;"	f
out_cb	plugged/agrep/plugin/agrep.vim	/^func! s:out_cb(channel, msg)$/;"	f
close_cb	plugged/agrep/plugin/agrep.vim	/^func! s:close_cb(channel)$/;"	f
final_close	plugged/agrep/plugin/agrep.vim	/^func! s:final_close(timer)$/;"	f
stop	plugged/agrep/plugin/agrep.vim	/^func! s:stop()$/;"	f
update_stl	plugged/agrep/plugin/agrep.vim	/^func! s:update_stl(timer)$/;"	f
Agrep_stl	plugged/agrep/plugin/agrep.vim	/^func! Agrep_stl()$/;"	f
set_window	plugged/agrep/plugin/agrep.vim	/^func! s:set_window(title)$/;"	f
open_window	plugged/agrep/plugin/agrep.vim	/^func! s:open_window()$/;"	f
close_window	plugged/agrep/plugin/agrep.vim	/^func! s:close_window()$/;"	f
hl_cur_match	plugged/agrep/plugin/agrep.vim	/^func! s:hl_cur_match(lnum, col, len)$/;"	f
get_match	plugged/agrep/plugin/agrep.vim	/^func! s:get_match()$/;"	f
get_count	plugged/agrep/plugin/agrep.vim	/^func! s:get_count()$/;"	f
goto_symbol	plugged/agrep/plugin/agrep.vim	/^func! s:goto_symbol(s, d)$/;"	f
get_file	plugged/agrep/plugin/agrep.vim	/^func! s:get_file()$/;"	f
goto_match	plugged/agrep/plugin/agrep.vim	/^func! s:goto_match(d, count, file)$/;"	f
filer_results	plugged/agrep/plugin/agrep.vim	/^func! s:filer_results(bang, pattern, ffilter)$/;"	f
set_qf	plugged/agrep/plugin/agrep.vim	/^func! s:set_qf()$/;"	f
history_set	plugged/agrep/plugin/agrep.vim	/^func! s:history_set()$/;"	f
history_get	plugged/agrep/plugin/agrep.vim	/^func! s:history_get(d, count)$/;"	f
b:current_syntax	plugged/agrep/syntax/agrep.vim	/^let b:current_syntax = "Agrep"$/;"	v
g:asyncrun_exit	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_exit = ''$/;"	v
g:asyncrun_bell	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_bell = 0$/;"	v
g:asyncrun_stop	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_stop = ''$/;"	v
g:asyncrun_mode	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_mode = 0$/;"	v
g:asyncrun_hook	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_hook = ''$/;"	v
g:asyncrun_last	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_last = 0$/;"	v
g:asyncrun_timer	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_timer = 25$/;"	v
g:asyncrun_code	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_code = ''$/;"	v
g:asyncrun_status	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_status = ''$/;"	v
g:asyncrun_encs	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_encs = ''$/;"	v
g:asyncrun_trim	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_trim = 0$/;"	v
g:asyncrun_text	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_text = ''$/;"	v
g:asyncrun_local	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_local = 1$/;"	v
g:asyncrun_auto	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_auto = ''$/;"	v
g:asyncrun_shell	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_shell = ''$/;"	v
g:asyncrun_shellflag	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_shellflag = ''$/;"	v
ErrorMsg	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:ErrorMsg(msg)$/;"	f
NotSupport	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:NotSupport()$/;"	f
AutoCmd	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AutoCmd(name)$/;"	f
s:asyncrun_windows	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:asyncrun_windows = 0$/;"	v
g:asyncrun_windows	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let g:asyncrun_windows = 0$/;"	v
s:asyncrun_support	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:asyncrun_support = 0$/;"	v
g:asyncrun_support	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let g:asyncrun_support = 0$/;"	v
s:asyncrun_windows	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let s:asyncrun_windows = 1$/;"	v
g:asyncrun_windows	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_windows = 1$/;"	v
s:asyncrun_support	plugged/asyncrun.vim/plugin/asyncrun.vim	/^		let s:asyncrun_support = 1$/;"	v
g:asyncrun_support	plugged/asyncrun.vim/plugin/asyncrun.vim	/^		let g:asyncrun_support = 1$/;"	v
s:asyncrun_support	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let s:asyncrun_support = 1$/;"	v
g:asyncrun_support	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let g:asyncrun_support = 1$/;"	v
s:async_nvim	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_nvim = has('nvim')? 1 : 0$/;"	v
s:async_info	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_info = { 'text':"", 'post':'', 'postsave':'' }$/;"	v
s:async_output	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_output = {}$/;"	v
s:async_head	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_head = 0$/;"	v
s:async_tail	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_tail = 0$/;"	v
s:async_code	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_code = 0$/;"	v
s:async_state	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_state = 0$/;"	v
s:async_start	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_start = 0.0$/;"	v
s:async_debug	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_debug = 0$/;"	v
s:async_quick	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_quick = 0$/;"	v
s:async_scroll	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_scroll = 0$/;"	v
s:async_hold	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_hold = 0$/;"	v
s:async_congest	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_congest = 0$/;"	v
s:async_efm	plugged/asyncrun.vim/plugin/asyncrun.vim	/^let s:async_efm = &errorformat$/;"	v
s:async_quick	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let s:async_quick = (v:version >= 800 || has('patch-7.4.1997'))? 1 : 0$/;"	v
s:async_hold	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let s:async_hold = (v:version >= 800 || has('patch-7.4.2100'))? 0 : 1$/;"	v
s:async_quick	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let s:async_quick = 0$/;"	v
s:async_hold	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let s:async_hold = 1$/;"	v
s:async_congest	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let s:async_congest = has('patch-8.0.100')? 1 : 0$/;"	v
s:async_congest	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let s:async_congest = 0$/;"	v
AsyncRun_Job_Scroll	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_Scroll()$/;"	f
AsyncRun_Job_Cursor	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_Cursor()$/;"	f
AsyncRun_Job_AutoScroll	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_AutoScroll()$/;"	f
AsyncRun_Job_ViewReset	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_ViewReset()$/;"	f
AsyncRun_Job_QuickReset	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_QuickReset()$/;"	f
AsyncRun_Job_CheckScroll	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_CheckScroll()$/;"	f
AsyncRun_Job_Update	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_Update(count)$/;"	f
AsyncRun_Job_AutoCmd	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_AutoCmd(mode, auto)$/;"	f
AsyncRun_Job_OnTimer	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! g:AsyncRun_Job_OnTimer(id)$/;"	f
AsyncRun_Job_OnCallback	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_OnCallback(channel, text)$/;"	f
AsyncRun_Job_OnFinish	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_OnFinish()$/;"	f
AsyncRun_Job_OnClose	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_OnClose(channel)$/;"	f
AsyncRun_Job_OnExit	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_OnExit(job, message)$/;"	f
AsyncRun_Job_NeoVim	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_NeoVim(job_id, data, event)$/;"	f
AsyncRun_Job_Start	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_Start(cmd)$/;"	f
AsyncRun_Job_Stop	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_Stop(how)$/;"	f
AsyncRun_Job_Status	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:AsyncRun_Job_Status()$/;"	f
StringReplace	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:StringReplace(text, old, new)$/;"	f
StringStrip	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:StringStrip(text)$/;"	f
ExtractOpt	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:ExtractOpt(command) $/;"	f
ScriptWrite	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! s:ScriptWrite(command, pause)$/;"	f
asyncrun#run	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! asyncrun#run(bang, opts, args)$/;"	f
asyncrun#stop	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! asyncrun#stop(bang)$/;"	f
asyncrun#status	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! asyncrun#status()$/;"	f
asyncrun#version	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! asyncrun#version()$/;"	f
AsyncRun	plugged/asyncrun.vim/plugin/asyncrun.vim	/^command! -bang -nargs=+ -complete=file AsyncRun $/;"	c
AsyncStop	plugged/asyncrun.vim/plugin/asyncrun.vim	/^command! -bang -nargs=0 AsyncStop call asyncrun#stop('<bang>')$/;"	c
asyncrun#quickfix_toggle	plugged/asyncrun.vim/plugin/asyncrun.vim	/^function! asyncrun#quickfix_toggle(size, ...)$/;"	f
s:quickfix_open	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let s:quickfix_open = 0$/;"	v
l:winnr	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	let l:winnr = winnr()			$/;"	v
windo	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	noautocmd windo call s:WindowCheck(0)$/;"	m
silent!	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	noautocmd silent! exec ''.l:winnr.'wincmd w'$/;"	m
windo	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	noautocmd windo call s:WindowCheck(1)$/;"	m
silent!	plugged/asyncrun.vim/plugin/asyncrun.vim	/^	noautocmd silent! exec ''.l:winnr.'wincmd w'$/;"	m
Bonly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang Bonly$/;"	c
BOnly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang BOnly$/;"	c
Bufonly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang Bufonly$/;"	c
BufOnly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang BufOnly$/;"	c
BufOnly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^function! BufOnly(buffer, bang)$/;"	f
s:save_cpo	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let s:save_cpo = &cpo$/;"	v
g:context_filetype#filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let g:context_filetype#filetypes = get(g:,$/;"	v
g:context_filetype#ignore_composite_filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let g:context_filetype#ignore_composite_filetypes = get(g:,$/;"	v
g:context_filetype#same_filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let g:context_filetype#same_filetypes = get(g:,$/;"	v
g:context_filetype#search_offset	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let g:context_filetype#search_offset = get(g:,$/;"	v
context_filetype#version	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! context_filetype#version() "{{{$/;"	f
context_filetype#get	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! context_filetype#get(...) "{{{$/;"	f
context_filetype#get_filetype	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! context_filetype#get_filetype(...) "{{{$/;"	f
context_filetype#get_filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! context_filetype#get_filetypes(...) "{{{$/;"	f
context_filetype#get_same_filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! context_filetype#get_same_filetypes(...) "{{{$/;"	f
context_filetype#get_range	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! context_filetype#get_range(...) "{{{$/;"	f
context_filetype#default_filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! context_filetype#default_filetypes() "{{{$/;"	f
s:default_filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let s:default_filetypes = {$/;"	v
get_filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:get_filetypes(filetypes) "{{{$/;"	f
s:default_same_filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let s:default_same_filetypes = {$/;"	v
get_same_filetypes	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:get_same_filetypes(filetype) "{{{$/;"	f
stopline_forward	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:stopline_forward() "{{{$/;"	f
stopline_back	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:stopline_back() "{{{$/;"	f
pos_less_equal	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:pos_less_equal(a, b)$/;"	f
is_in	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:is_in(start, end, pos) "{{{$/;"	f
file_range	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:file_range() "{{{$/;"	f
replace_submatch	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:replace_submatch(pattern, match_list) "{{{$/;"	f
s:null_pos	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let s:null_pos = [0, 0]$/;"	v
s:null_range	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let s:null_range = [[0, 0], [0, 0]]$/;"	v
search_range	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:search_range(start_pattern, end_pattern) "{{{$/;"	f
s:null_context	plugged/context_filetype.vim/autoload/context_filetype.vim	/^let s:null_context = {$/;"	v
get_context	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:get_context(filetype, context_filetypes, search_range) "{{{$/;"	f
get_nest_impl	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:get_nest_impl(filetype, context_filetypes, prev_context) "{{{$/;"	f
get_nest	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:get_nest(filetype, context_filetypes) "{{{$/;"	f
uniq	plugged/context_filetype.vim/autoload/context_filetype.vim	/^function! s:uniq(list) "{{{$/;"	f
checker	plugged/context_filetype.vim/test/test.vim	/^function! s:checker(filename)$/;"	f
ContextFiletypeTest	plugged/context_filetype.vim/test/test.vim	/^command! ContextFiletypeTest call s:checker(expand("%:p"))$/;"	c
s:options	plugged/delimitMate/autoload/delimitMate.vim	/^  let s:options = {}$/;"	v
set	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:set(name, value, ...) "{{{$/;"	f
get	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:get(name, ...) "{{{$/;"	f
exists	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:exists(name, ...) "{{{$/;"	f
is_jump	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_jump(...) "{{{$/;"	f
rquote	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:rquote(char) "{{{$/;"	f
lquote	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:lquote(char) "{{{$/;"	f
get_char	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:get_char(...) "{{{$/;"	f
is_cr_expansion	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_cr_expansion(...) " {{{$/;"	f
is_space_expansion	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_space_expansion() " {{{$/;"	f
is_empty_matchpair	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_empty_matchpair() "{{{$/;"	f
is_empty_quotes	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_empty_quotes() "{{{$/;"	f
cursor_idx	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:cursor_idx() "{{{$/;"	f
get_syn_name	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:get_syn_name() "{{{$/;"	f
is_excluded_ft	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_excluded_ft(ft) "{{{$/;"	f
is_forbidden	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_forbidden(char) "{{{$/;"	f
balance_matchpairs	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:balance_matchpairs(char) "{{{$/;"	f
is_smart_quote	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_smart_quote(char) "{{{$/;"	f
delimitMate#Set	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Set(...) "{{{$/;"	f
delimitMate#Get	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Get(...) "{{{$/;"	f
delimitMate#ShouldJump	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ShouldJump(...) "{{{$/;"	f
delimitMate#IsEmptyPair	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#IsEmptyPair(str) "{{{$/;"	f
delimitMate#WithinEmptyPair	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#WithinEmptyPair() "{{{$/;"	f
delimitMate#SkipDelim	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#SkipDelim(char) "{{{$/;"	f
delimitMate#ParenDelim	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ParenDelim(right) " {{{$/;"	f
delimitMate#QuoteDelim	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#QuoteDelim(char) "{{{$/;"	f
delimitMate#JumpOut	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpOut(char) "{{{$/;"	f
delimitMate#JumpAny	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpAny(...) " {{{$/;"	f
delimitMate#JumpMany	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpMany() " {{{$/;"	f
delimitMate#ExpandReturn	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ExpandReturn() "{{{$/;"	f
delimitMate#ExpandSpace	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ExpandSpace() "{{{$/;"	f
delimitMate#BS	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#BS() " {{{$/;"	f
delimitMate#Test	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Test() "{{{$/;"	f
test_mappings	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:test_mappings(list, is_matchpair) "{{{$/;"	f
joinUndo	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:joinUndo() "{{{$/;"	f
PLUGIN	plugged/delimitMate/Makefile	/^PLUGIN   =  $(wildcard plugin\/*.vim)$/;"	m
SOURCES	plugged/delimitMate/Makefile	/^SOURCES  =  $(PLUGIN)$/;"	m
LIB	plugged/delimitMate/Makefile	/^LIB      =  $(wildcard autoload\/*.vim)$/;"	m
DOC	plugged/delimitMate/Makefile	/^DOC      =  $(wildcard doc\/*.txt)$/;"	m
NAME	plugged/delimitMate/Makefile	/^NAME     =  delimitMate$/;"	m
VERSION	plugged/delimitMate/Makefile	/^VERSION  =  $(shell $(SED) -n -e '\/Current \\+release\/{s\/^ \\+\\([0-9.]\\+\\).*\/\\1\/;p;}' $(firstword $(DOC)))$/;"	m
FILENAME	plugged/delimitMate/Makefile	/^FILENAME =  $(NAME)-$(VERSION)$/;"	m
DESTDIR	plugged/delimitMate/Makefile	/^DESTDIR  =  $(HOME)\/.vim$/;"	m
VIM	plugged/delimitMate/Makefile	/^VIM      =  vim$/;"	m
SED	plugged/delimitMate/Makefile	/^SED      =  $(shell command -v gsed || command -v sed)$/;"	m
PERL	plugged/delimitMate/Makefile	/^PERL     =  perl$/;"	m
comma	plugged/delimitMate/Makefile	/^comma    := ,$/;"	m
empty	plugged/delimitMate/Makefile	/^empty    :=$/;"	m
space	plugged/delimitMate/Makefile	/^space    := $(empty) $(empty)$/;"	m
g:loaded_delimitMate	plugged/delimitMate/plugin/delimitMate.vim	/^let g:loaded_delimitMate = 1$/;"	v
save_cpo	plugged/delimitMate/plugin/delimitMate.vim	/^let save_cpo = &cpo$/;"	v
s:loaded_delimitMate	plugged/delimitMate/plugin/delimitMate.vim	/^let s:loaded_delimitMate = 1$/;"	v
delimitMate_version	plugged/delimitMate/plugin/delimitMate.vim	/^let delimitMate_version = "2.8"$/;"	v
option_init	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:option_init(name, default) "{{{$/;"	f
init	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:init() "{{{$/;"	f
get	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:get(...) " {{{$/;"	f
set	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:set(...) " {{{$/;"	f
Map	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:Map() "{{{$/;"	f
Unmap	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:Unmap() " {{{$/;"	f
test	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:test() "{{{$/;"	f
setup	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:setup(...) "{{{$/;"	f
TriggerAbb	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:TriggerAbb() "{{{$/;"	f
NoAutoClose	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:NoAutoClose() "{{{$/;"	f
AutoClose	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:AutoClose() "{{{$/;"	f
ExtraMappings	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:ExtraMappings() "{{{$/;"	f
DelimitMateReload	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateReload call s:setup(1)$/;"	c
DelimitMateTest	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateTest call s:test()$/;"	c
DelimitMateSwitch	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateSwitch call s:setup(2)$/;"	c
DelimitMateOn	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateOn call s:setup(1)$/;"	c
DelimitMateOff	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateOff call s:setup(0)$/;"	c
delimitMate	plugged/delimitMate/plugin/delimitMate.vim	/^augroup delimitMate$/;"	a
runVimTests	plugged/delimitMate/test/_setup.vim	/^let runVimTests = expand('<sfile>:p:h').'\/build\/runVimTests'$/;"	v
vimTAP	plugged/delimitMate/test/_setup.vim	/^let vimTAP = expand('<sfile>:p:h').'\/build\/VimTAP'$/;"	v
g:delimitMate_matchpairs	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let g:delimitMate_matchpairs = '(:),{:},[:],<:>,¿:?,¡:!,,::'$/;"	v
lines	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
testsnumber	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^"'''))$/;"	v
itemsnumber	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let itemsnumber = len(split(g:delimitMate_matchpairs, '.:.\\zs,\\ze.:.'))$/;"	v
tcount	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let tcount = 1$/;"	v
reload	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let reload = 1$/;"	v
reload	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let reload = 1$/;"	v
reload	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let reload = 0$/;"	v
input2	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let input2 = substitute(input, '(', s:l, 'g')$/;"	v
input2	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let input2 = substitute(input2, ')', s:r, 'g')$/;"	v
output2	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let output2 = substitute(output, '(', s:l, 'g')$/;"	v
output2	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let output2 = substitute(output2, ')', s:r, 'g')$/;"	v
line	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let line = getline('.')$/;"	v
passed	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let passed = line == eval(output2)$/;"	v
tcount	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let tcount += 1$/;"	v
g:delimitMate_quotes	plugged/delimitMate/test/autoclose_quotes.vim	/^let g:delimitMate_quotes = '" '' ` « |'$/;"	v
lines	plugged/delimitMate/test/autoclose_quotes.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
testsnumber	plugged/delimitMate/test/autoclose_quotes.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^"'''))$/;"	v
itemsnumber	plugged/delimitMate/test/autoclose_quotes.vim	/^let itemsnumber = len(split(g:delimitMate_quotes, ' '))$/;"	v
reload	plugged/delimitMate/test/autoclose_quotes.vim	/^let reload = 1$/;"	v
tcount	plugged/delimitMate/test/autoclose_quotes.vim	/^let tcount = 1$/;"	v
linenr	plugged/delimitMate/test/autoclose_quotes.vim	/^let linenr = 0$/;"	v
linenr	plugged/delimitMate/test/autoclose_quotes.vim	/^  let linenr += 1$/;"	v
reload	plugged/delimitMate/test/autoclose_quotes.vim	/^    let reload = 1$/;"	v
reload	plugged/delimitMate/test/autoclose_quotes.vim	/^    let reload = 0$/;"	v
quotes	plugged/delimitMate/test/autoclose_quotes.vim	/^  let quotes = split(g:delimitMate_quotes, '\\s')$/;"	v
tcount	plugged/delimitMate/test/autoclose_quotes.vim	/^      let tcount += 1$/;"	v
input_q	plugged/delimitMate/test/autoclose_quotes.vim	/^    let input_q = substitute(input,"'" , escape(escape(quote, '"'), '\\'), 'g')$/;"	v
output_q	plugged/delimitMate/test/autoclose_quotes.vim	/^    let output_q = substitute(output,"'" , escape(escape(quote, '"'), '\\'), 'g')$/;"	v
tcount	plugged/delimitMate/test/autoclose_quotes.vim	/^    let tcount += 1$/;"	v
g:delimitMate_expand_cr	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_eol_marker	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_eol_marker = ';'$/;"	v
g:delimitMate_insert_eol_marker	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 0$/;"	v
i(	plugged/delimitMate/test/eol_marker.vim	/^normal i($/;"	m
g:delimitMate_insert_eol_marker	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 1$/;"	v
i(	plugged/delimitMate/test/eol_marker.vim	/^normal i($/;"	m
g:delimitMate_insert_eol_marker	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 2$/;"	v
i(	plugged/delimitMate/test/eol_marker.vim	/^normal i($/;"	m
g:delimitMate_expand_cr	plugged/delimitMate/test/expand_cr.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
lines	plugged/delimitMate/test/expand_cr.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
testsnumber	plugged/delimitMate/test/expand_cr.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^=\\{80}$'''))$/;"	v
tcount	plugged/delimitMate/test/expand_cr.vim	/^let tcount = 1$/;"	v
expect	plugged/delimitMate/test/expand_cr.vim	/^let expect = 0$/;"	v
evaluate	plugged/delimitMate/test/expand_cr.vim	/^let evaluate = 0$/;"	v
commands	plugged/delimitMate/test/expand_cr.vim	/^let commands = []$/;"	v
header	plugged/delimitMate/test/expand_cr.vim	/^let header = ''$/;"	v
expect	plugged/delimitMate/test/expand_cr.vim	/^    let expect = 1$/;"	v
expected	plugged/delimitMate/test/expand_cr.vim	/^    let expected = []$/;"	v
header	plugged/delimitMate/test/expand_cr.vim	/^    let header = empty(header) ? item[1:] : 'Lines should match.'$/;"	v
expect	plugged/delimitMate/test/expand_cr.vim	/^    let expect = 0$/;"	v
lines	plugged/delimitMate/test/expand_cr.vim	/^  let lines = getline(1, line('$'))$/;"	v
passed	plugged/delimitMate/test/expand_cr.vim	/^  let passed = lines == expected$/;"	v
commands	plugged/delimitMate/test/expand_cr.vim	/^  let commands = []$/;"	v
header	plugged/delimitMate/test/expand_cr.vim	/^  let header = ''$/;"	v
tcount	plugged/delimitMate/test/expand_cr.vim	/^  let tcount += 1$/;"	v
g:delimitMate_expand_space	plugged/delimitMate/test/expand_space.vim	/^let g:delimitMate_expand_space = 1$/;"	v
lines	plugged/delimitMate/test/expand_space.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
testsnumber	plugged/delimitMate/test/expand_space.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^=\\{80}$'''))$/;"	v
tcount	plugged/delimitMate/test/expand_space.vim	/^let tcount = 1$/;"	v
expect	plugged/delimitMate/test/expand_space.vim	/^let expect = 0$/;"	v
evaluate	plugged/delimitMate/test/expand_space.vim	/^let evaluate = 0$/;"	v
expect	plugged/delimitMate/test/expand_space.vim	/^    let expect = 1$/;"	v
expected	plugged/delimitMate/test/expand_space.vim	/^    let expected = []$/;"	v
expect	plugged/delimitMate/test/expand_space.vim	/^    let expect = 0$/;"	v
lines	plugged/delimitMate/test/expand_space.vim	/^  let lines = getline(1, line('$'))$/;"	v
passed	plugged/delimitMate/test/expand_space.vim	/^  let passed = lines == expected$/;"	v
tcount	plugged/delimitMate/test/expand_space.vim	/^  let tcount += 1$/;"	v
g:delimitMate_expand_cr	plugged/delimitMate/test/first_buffer_no_ft.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_eol_marker	plugged/delimitMate/test/first_buffer_no_ft.vim	/^let g:delimitMate_eol_marker = ';'$/;"	v
g:loaded_deoplete_ternjs	plugged/deoplete-ternjs/plugin/deoplete-ternjs.vim	/^let g:loaded_deoplete_ternjs = 1$/;"	v
g:deoplete#sources#ternjs#tern_bin	plugged/deoplete-ternjs/plugin/deoplete-ternjs.vim	/^let g:deoplete#sources#ternjs#tern_bin = get(g:, 'deoplete#sources#ternjs#tern_bin', 'tern') $/;"	v
g:tern#filetypes	plugged/deoplete-ternjs/plugin/deoplete-ternjs.vim	/^let g:tern#filetypes = [$/;"	v
set_debug	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/helper.py	/^def set_debug(logger, path):$/;"	f
FileHandler	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/helper.py	/^    from logging import FileHandler, Formatter, DEBUG$/;"	i
Formatter	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/helper.py	/^    from logging import FileHandler, Formatter, DEBUG$/;"	i
DEBUG	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/helper.py	/^    from logging import FileHandler, Formatter, DEBUG$/;"	i
Colors	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^class Colors(object):$/;"	c
RED	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    RED = '\\033[1;41m'$/;"	v	class:Colors
GREEN	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    GREEN = '\\033[1;42m'$/;"	v	class:Colors
YELLOW	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    YELLOW = '\\033[1;43m'$/;"	v	class:Colors
BLUE	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    BLUE = '\\033[1;44m'$/;"	v	class:Colors
MAGENTA	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    MAGENTA = '\\033[1;45m'$/;"	v	class:Colors
CYAN	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    CYAN = '\\033[1;46m'$/;"	v	class:Colors
ENDC	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    ENDC = '\\033[0m'$/;"	v	class:Colors
timeit	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^def timeit(logger, fmt, threshold):$/;"	f
dumps	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    from json import dumps$/;"	i
time	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    import time$/;"	i
is_json	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    def is_json(json_data):$/;"	f	function:timeit
timereald	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^    def timereald(method):$/;"	f	function:timeit
timed	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/deoplate_ternjs/profiler.py	/^        def timed(*args, **kw):$/;"	f	function:timeit.timereald
os	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import os$/;"	i
re	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import re$/;"	i
json	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import json$/;"	i
sys	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import sys$/;"	i
platform	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import platform$/;"	i
subprocess	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import subprocess$/;"	i
time	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import time$/;"	i
Base	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^from deoplete.source.base import Base$/;"	i
getLogger	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^from logging import getLogger$/;"	i
PY2	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^PY2 = int(sys.version[0]) == 2$/;"	v
request	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    import urllib2 as request$/;"	i
HTTPError	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    from urllib2 import HTTPError$/;"	i
request	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    from urllib import request$/;"	i
HTTPError	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    from urllib.error import HTTPError$/;"	i
opener	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^opener = request.build_opener(request.ProxyHandler({}))$/;"	v
current	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^current = __file__$/;"	v
logger	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^logger = getLogger(__name__)$/;"	v
windows	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^windows = platform.system() == "Windows"$/;"	v
import_pattern	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^import_pattern = re.compile(import_re)$/;"	v
RequestError	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^class RequestError(Exception):$/;"	c
__init__	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def __init__(self, message):$/;"	m	class:RequestError
__str__	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def __str__(self):$/;"	m	class:RequestError	file:
Source	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^class Source(Base):$/;"	c
__init__	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def __init__(self, vim):$/;"	m	class:Source
__del__	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def __del__(self):$/;"	m	class:Source	file:
start_server	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def start_server(self):$/;"	m	class:Source
stop_server	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def stop_server(self):$/;"	m	class:Source
_search_tern_project_dir	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def _search_tern_project_dir(self):$/;"	m	class:Source
make_request	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def make_request(self, doc, silent):$/;"	m	class:Source
run_command	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def run_command(self, query, pos, fragments=True, silent=False):$/;"	m	class:Source
full_buffer	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def full_buffer(self):$/;"	m	class:Source
buffer_slice	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def buffer_slice(self, buf, pos, end):$/;"	m	class:Source
relative_file	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def relative_file(self):$/;"	m	class:Source
buffer_fragment	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def buffer_fragment(self):$/;"	m	class:Source
completion_icon	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def completion_icon(self, type):$/;"	m	class:Source
completation	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def completation(self, pos):$/;"	m	class:Source
type_doc	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def type_doc(self, rec):$/;"	m	class:Source
get_complete_position	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
gather_candidates	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
g:deoplete#enable_at_startup	plugged/deoplete-ternjs/tests/ternjs-deoplete-conflict.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#auto_completion_start_length	plugged/deoplete-ternjs/tests/ternjs-deoplete-conflict.vim	/^let g:deoplete#auto_completion_start_length = 1$/;"	v
g:deoplete#enable_at_startup	plugged/deoplete-ternjs/tests/ternjs-deoplete.vim	/^let g:deoplete#enable_at_startup = 1$/;"	v
g:deoplete#auto_completion_start_length	plugged/deoplete-ternjs/tests/ternjs-deoplete.vim	/^let g:deoplete#auto_completion_start_length = 1$/;"	v
g:deoplete#enable_debug	plugged/deoplete-ternjs/tests/ternjs-deoplete.vim	/^let g:deoplete#enable_debug=1$/;"	v
is	plugged/deoplete-ternjs/tests/test-es6.js	/^\/\/ A base class is defined using the new reserved 'class' keyword$/;"	c
Polygon	plugged/deoplete-ternjs/tests/test-es6.js	/^class Polygon {$/;"	c
constructor.	plugged/deoplete-ternjs/tests/test-es6.js	/^  \/\/ ..and an (optional) custom class constructor. If one is$/;"	c
constructor	plugged/deoplete-ternjs/tests/test-es6.js	/^  \/\/ constructor() { }$/;"	f
constructor	plugged/deoplete-ternjs/tests/test-es6.js	/^  constructor(height, width) {$/;"	f
instance	plugged/deoplete-ternjs/tests/test-es6.js	/^  \/\/ Simple class instance methods using short-hand method$/;"	c
sayName	plugged/deoplete-ternjs/tests/test-es6.js	/^  sayName() {$/;"	f
sayHistory	plugged/deoplete-ternjs/tests/test-es6.js	/^  sayHistory() {$/;"	f
above	plugged/deoplete-ternjs/tests/test-es6.js	/^\/\/ Our Polygon class above is an example of a Class declaration.$/;"	c
Poly	plugged/deoplete-ternjs/tests/test-es6.js	/^const MyPoly = class Poly {$/;"	c
getPolyName	plugged/deoplete-ternjs/tests/test-es6.js	/^  getPolyName() {$/;"	f
to	plugged/deoplete-ternjs/tests/test-es6.js	/^\/\/ Let's extend the Polygon class to create a new derived class$/;"	c
Square	plugged/deoplete-ternjs/tests/test-es6.js	/^class Square extends Polygon {$/;"	c
constructor	plugged/deoplete-ternjs/tests/test-es6.js	/^  constructor(length) {$/;"	f
area	plugged/deoplete-ternjs/tests/test-es6.js	/^  get area() {$/;"	f
area	plugged/deoplete-ternjs/tests/test-es6.js	/^  set area(value) {$/;"	f
Rectangle	plugged/deoplete-ternjs/tests/test-es6.js	/^class Rectangle extends Polygon {$/;"	c
constructor	plugged/deoplete-ternjs/tests/test-es6.js	/^  constructor(height, width) {$/;"	f
method	plugged/deoplete-ternjs/tests/test-es6.js	/^  \/\/ overrides their superclass method of the same name.$/;"	c
sayName	plugged/deoplete-ternjs/tests/test-es6.js	/^  sayName() {$/;"	f
Tripple	plugged/deoplete-ternjs/tests/test-es6.js	/^class Tripple {$/;"	c
tripple	plugged/deoplete-ternjs/tests/test-es6.js	/^  static tripple(n) {$/;"	f
BiggerTripple	plugged/deoplete-ternjs/tests/test-es6.js	/^class BiggerTripple extends Tripple {$/;"	c
tripple	plugged/deoplete-ternjs/tests/test-es6.js	/^  static tripple(n) {$/;"	f
MyDate	plugged/deoplete-ternjs/tests/test-es6.js	/^class MyDate extends Date {$/;"	c
constructor	plugged/deoplete-ternjs/tests/test-es6.js	/^  constructor() {$/;"	f
getFormattedDate	plugged/deoplete-ternjs/tests/test-es6.js	/^  getFormattedDate() {$/;"	f
ExtendedUint8Array	plugged/deoplete-ternjs/tests/test-es6.js	/^class ExtendedUint8Array extends Uint8Array {$/;"	c
constructor	plugged/deoplete-ternjs/tests/test-es6.js	/^  constructor() {$/;"	f
MyAudio	plugged/deoplete-ternjs/tests/test-es6.js	/^class MyAudio extends Audio {$/;"	c
constructor	plugged/deoplete-ternjs/tests/test-es6.js	/^  constructor() {$/;"	f
lyrics	plugged/deoplete-ternjs/tests/test-es6.js	/^  get lyrics() {$/;"	f
lyrics	plugged/deoplete-ternjs/tests/test-es6.js	/^  set lyrics(str) {$/;"	f
Stack	plugged/deoplete-ternjs/tests/test-es6.js	/^class Stack extends Array {$/;"	c
constructor	plugged/deoplete-ternjs/tests/test-es6.js	/^  constructor() {$/;"	f
top	plugged/deoplete-ternjs/tests/test-es6.js	/^  top() {$/;"	f
commonMethod	plugged/deoplete-ternjs/tests/test.js	/^MYAPP.commonMethod = {$/;"	o
Method	plugged/deoplete-ternjs/tests/test.js	/^MYAPP.commonMethod = {$/;"	c
Name	plugged/deoplete-ternjs/tests/test.js	/^  validateName: function(name){$/;"	c
function	plugged/deoplete-ternjs/tests/test.js	/^  validateName: function(name){$/;"	f
validateName	plugged/deoplete-ternjs/tests/test.js	/^  validateName: function(name){$/;"	m
PhoneNo	plugged/deoplete-ternjs/tests/test.js	/^  validatePhoneNo: function(phoneNo){$/;"	c
function	plugged/deoplete-ternjs/tests/test.js	/^  validatePhoneNo: function(phoneNo){$/;"	f
validatePhoneNo	plugged/deoplete-ternjs/tests/test.js	/^  validatePhoneNo: function(phoneNo){$/;"	m
event	plugged/deoplete-ternjs/tests/test.js	/^MYAPP.event = {$/;"	o
Listener	plugged/deoplete-ternjs/tests/test.js	/^    addListener: function(el, type, fn) {$/;"	c
function	plugged/deoplete-ternjs/tests/test.js	/^    addListener: function(el, type, fn) {$/;"	f
addListener	plugged/deoplete-ternjs/tests/test.js	/^    addListener: function(el, type, fn) {$/;"	m
Listener	plugged/deoplete-ternjs/tests/test.js	/^    removeListener: function(el, type, fn) {$/;"	c
function	plugged/deoplete-ternjs/tests/test.js	/^    removeListener: function(el, type, fn) {$/;"	f
removeListener	plugged/deoplete-ternjs/tests/test.js	/^    removeListener: function(el, type, fn) {$/;"	m
Event	plugged/deoplete-ternjs/tests/test.js	/^    getEvent: function(e) {$/;"	c
function	plugged/deoplete-ternjs/tests/test.js	/^    getEvent: function(e) {$/;"	f
getEvent	plugged/deoplete-ternjs/tests/test.js	/^    getEvent: function(e) {$/;"	m
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
extend	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
function	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
function	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
fzf#vim#complete#word	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
file_split_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
file_source	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
file_options	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
fname_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
fzf#vim#complete#path	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
reduce_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
fzf#vim#complete#line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#buffer_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:layout_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:which_bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:which_bin = executable('ruby') ? '\/bin\/preview.rb' : '\/bin\/preview.sh'$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = { 'preview': expand('<sfile>:h:h:h') . s:which_bin }$/;"	v
s:TYPE	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type('')}$/;"	v
fzf#vim#with_preview	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
remove_layout	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
fzf#vim#wrap	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#wrap(opts)$/;"	f
fzf#vim#layout	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#layout(...)$/;"	f
wrap	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
strip	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
chomp	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
escape	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
q1	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:q1(str)$/;"	f
function	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
function	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
get_color	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cyan': 36}$/;"	v
ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
buflisted	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
defaults	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:defaults()$/;"	f
fzf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:default_action	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
open	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
align_lists	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
warn	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
uniq	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:uniq(list)$/;"	f
shortpath	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
fzf#vim#files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
fzf#vim#_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
buffer_line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines()$/;"	f
fzf#vim#buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#colors	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#locate	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
all_files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:all_files()$/;"	f
history_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
<plug>(-fzf-vim-do)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
cmd_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
fzf#vim#command_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
search_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
fzf#vim#search_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
get_git_root	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
fzf#vim#gitfiles	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
wrapped	plugged/fzf.vim/autoload/fzf/vim.vim	/^  let wrapped['sink*'] = remove(wrapped, 'newsink')$/;"	v
find_open_window	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
jump	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
bufopen	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
format_buffer	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_buffer(b)$/;"	f
sort_buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
fzf#vim#buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
ag_to_qf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, with_column)$/;"	f
ag_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, with_column)$/;"	f
fzf#vim#ag	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#grep	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, with_column, ...)$/;"	f
opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^  let opts['sink*'] = remove(opts, 'sink')$/;"	v
btags_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
btags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
q	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:q(query)$/;"	f
fzf#vim#buffer_tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
tags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
fzf#vim#tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
inject_snippet	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
fzf#vim#snippets	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
s:nbs	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
format_cmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
command_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
format_excmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
excmds	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
fzf#vim#commands	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
format_mark	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
mark_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
fzf#vim#marks	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
helptag_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
fzf#vim#helptags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#filetypes	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
format_win	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
windows_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
fzf#vim#windows	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
commits_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(buffer_local, args)$/;"	f
fzf#vim#commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...)$/;"	f
fzf#vim#buffer_commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...)$/;"	f
align_pairs	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
highlight_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
key_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
fzf#vim#maps	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
<Plug>(-fzf-complete-trigger)	plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
pluck	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
complete_trigger	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
first_line	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
complete_insert	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
eval	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
fzf#vim#complete	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
usage	plugged/fzf.vim/bin/preview.rb	/^def usage$/;"	f
s:cpo_save	plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
g:fzf#vim#default_layout	plugged/fzf.vim/plugin/fzf.vim	/^let g:fzf#vim#default_layout = {'down': '~40%'}$/;"	v
defs	plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
history	plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, bang)$/;"	f
fzf#complete	plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf_restore_colors	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
fzf_nvim_term	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_nvim_term()$/;"	f
_fzf_statusline	plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
g:fzf#vim#buffers	plugged/fzf.vim/plugin/fzf.vim	/^let g:fzf#vim#buffers = {}$/;"	v
fzf_buffers	plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
<plug>(fzf-complete-word)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-path)        fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -print \\| sed '1d;s:^..::'")$/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file)        fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -type f -print -o -type l -print \\| sed 's:^..::'")$/;"	m
<plug>(fzf-complete-file-ag)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path("ag -l -g ''")$/;"	m
<plug>(fzf-complete-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-buffer-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-maps-n)	plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-i)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
warn	plugged/gv.vim/plugin/gv.vim	/^function! s:warn(message)$/;"	f
shrug	plugged/gv.vim/plugin/gv.vim	/^function! s:shrug()$/;"	f
s:begin	plugged/gv.vim/plugin/gv.vim	/^let s:begin = '^[^0-9]*[0-9]\\{4}-[0-9]\\{2}-[0-9]\\{2}\\s\\+'$/;"	v
sha	plugged/gv.vim/plugin/gv.vim	/^function! s:sha(...)$/;"	f
move	plugged/gv.vim/plugin/gv.vim	/^function! s:move(flag)$/;"	f
browse	plugged/gv.vim/plugin/gv.vim	/^function! s:browse(url)$/;"	f
tabnew	plugged/gv.vim/plugin/gv.vim	/^function! s:tabnew()$/;"	f
gbrowse	plugged/gv.vim/plugin/gv.vim	/^function! s:gbrowse()$/;"	f
type	plugged/gv.vim/plugin/gv.vim	/^function! s:type(visual)$/;"	f
split	plugged/gv.vim/plugin/gv.vim	/^function! s:split(tab)$/;"	f
open	plugged/gv.vim/plugin/gv.vim	/^function! s:open(visual, ...)$/;"	f
dot	plugged/gv.vim/plugin/gv.vim	/^function! s:dot()$/;"	f
syntax	plugged/gv.vim/plugin/gv.vim	/^function! s:syntax()$/;"	f
maps	plugged/gv.vim/plugin/gv.vim	/^function! s:maps()$/;"	f
setup	plugged/gv.vim/plugin/gv.vim	/^function! s:setup(git_dir, git_origin)$/;"	f
git_dir	plugged/gv.vim/plugin/gv.vim	/^function! s:git_dir()$/;"	f
scratch	plugged/gv.vim/plugin/gv.vim	/^function! s:scratch()$/;"	f
fill	plugged/gv.vim/plugin/gv.vim	/^function! s:fill(cmd)$/;"	f
tracked	plugged/gv.vim/plugin/gv.vim	/^function! s:tracked(fugitive_repo, file)$/;"	f
check_buffer	plugged/gv.vim/plugin/gv.vim	/^function! s:check_buffer(fugitive_repo, current)$/;"	f
log_opts	plugged/gv.vim/plugin/gv.vim	/^function! s:log_opts(fugitive_repo, bang, visual, line1, line2)$/;"	f
list	plugged/gv.vim/plugin/gv.vim	/^function! s:list(fugitive_repo, log_opts)$/;"	f
trim	plugged/gv.vim/plugin/gv.vim	/^function! s:trim(arg)$/;"	f
gv#shellwords	plugged/gv.vim/plugin/gv.vim	/^function! gv#shellwords(arg)$/;"	f
gl	plugged/gv.vim/plugin/gv.vim	/^function! s:gl(buf, visual)$/;"	f
gld	plugged/gv.vim/plugin/gv.vim	/^function! s:gld() range$/;"	f
gv	plugged/gv.vim/plugin/gv.vim	/^function! s:gv(bang, visual, line1, line2, args) abort$/;"	f
GV	plugged/gv.vim/plugin/gv.vim	/^command! -bang -nargs=* -range=0 GV call s:gv(<bang>0, <count>, <line1>, <line2>, <q-args>)$/;"	c
jspc#coffee#getlist	plugged/jspc.vim/autoload/jspc/coffee.vim	/^function! jspc#coffee#getlist(method)$/;"	f
jspc#javascript#getlist	plugged/jspc.vim/autoload/jspc/javascript.vim	/^function! jspc#javascript#getlist(method)$/;"	f
jspc#ls#getlist	plugged/jspc.vim/autoload/jspc/ls.vim	/^function! jspc#ls#getlist(method)$/;"	f
jspc#typescript#getlist	plugged/jspc.vim/autoload/jspc/typescript.vim	/^function! jspc#typescript#getlist(method)$/;"	f
jspc#init	plugged/jspc.vim/autoload/jspc.vim	/^function! jspc#init()$/;"	f
jspc#omni	plugged/jspc.vim/autoload/jspc.vim	/^function! jspc#omni(findstart, base)$/;"	f
jspc#meet	plugged/jspc.vim/autoload/jspc.vim	/^function! jspc#meet(context)$/;"	f
jspc#complete	plugged/jspc.vim/autoload/jspc.vim	/^function! jspc#complete(findstart, base)$/;"	f
NAME	plugged/jspc.vim/config.mk	/^NAME=jspc.vim$/;"	m
VERSION	plugged/jspc.vim/config.mk	/^VERSION=1.0.0$/;"	m
remember	plugged/jspc.vim/data/p.js	/^  var remember = function (group, attr) {$/;"	f
function	plugged/jspc.vim/data/p.js	/^  var remember = function (group, attr) {$/;"	f
if	plugged/jspc.vim/data/p.js	/^    if (!cache[attr]) {$/;"	f
for	plugged/jspc.vim/data/p.js	/^  for (group in yml) {$/;"	f
if	plugged/jspc.vim/data/p.js	/^    if (typeof yml[group] == "string") {$/;"	f
for	plugged/jspc.vim/data/p.js	/^  for (group in yml) {$/;"	f
if	plugged/jspc.vim/data/p.js	/^    if (typeof yml[group] == "object") {$/;"	f
filter	plugged/jspc.vim/data/p.js	/^      sublists = candidates.filter(function (item) {$/;"	f
filter	plugged/jspc.vim/data/p.js	/^      candidates = candidates.filter(function (item) {$/;"	f
for	plugged/jspc.vim/data/p.js	/^      for (sublist in sublists) {$/;"	f
for	plugged/jspc.vim/data/p.js	/^  for (ri in rules) {$/;"	f
for	plugged/jspc.vim/data/p.js	/^    for (i in methods) {$/;"	f
for	plugged/jspc.vim/data/p.js	/^    for (i in methods) {$/;"	f
for	plugged/jspc.vim/data/p.js	/^    for (j in candidates) {$/;"	f
catch	plugged/jspc.vim/data/p.js	/^} catch (e) {$/;"	f
RECORD_FILE	plugged/jspc.vim/Makefile	/^RECORD_FILE=.record$/;"	m
PWD	plugged/jspc.vim/Makefile	/^PWD=`pwd`$/;"	m
README_FILES	plugged/jspc.vim/Makefile	/^README_FILES=`ls -1 | grep -i readme`$/;"	m
WGET_OPT	plugged/jspc.vim/Makefile	/^WGET_OPT=-c -nv$/;"	m
CURL_OPT	plugged/jspc.vim/Makefile	/^CURL_OPT=$/;"	m
RECORD_SCRIPT	plugged/jspc.vim/Makefile	/^RECORD_SCRIPT=.mkrecord$/;"	m
TAR	plugged/jspc.vim/Makefile	/^TAR=tar czvf$/;"	m
GIT_SOURCES	plugged/jspc.vim/Makefile	/^GIT_SOURCES=$/;"	m
record_file	plugged/jspc.vim/Makefile	/^record_file = \\$/;"	m
GIT_SOURCES	plugged/jspc.vim/Makefile	/^GIT_SOURCES=$/;"	m
DEPEND_DIR	plugged/jspc.vim/Makefile	/^DEPEND_DIR=\/tmp\/vim-deps$/;"	m
install_git_source	plugged/jspc.vim/Makefile	/^install_git_source = \\$/;"	m
install_file	plugged/jspc.vim/Makefile	/^install_file = \\$/;"	m
link_file	plugged/jspc.vim/Makefile	/^link_file = \\$/;"	m
unlink_file	plugged/jspc.vim/Makefile	/^unlink_file = \\$/;"	m
fetch_url	plugged/jspc.vim/Makefile	/^fetch_url = \\$/;"	m
install_source	plugged/jspc.vim/Makefile	/^install_source = \\$/;"	m
fetch_github	plugged/jspc.vim/Makefile	/^fetch_github = \\$/;"	m
fetch_local	plugged/jspc.vim/Makefile	/^fetch_local = @cp -v $(1) $(2) \\$/;"	m
dep_from_git	plugged/jspc.vim/Makefile	/^dep_from_git = \\$/;"	m
dep_from_svn	plugged/jspc.vim/Makefile	/^dep_from_svn = \\$/;"	m
NAME	plugged/jspc.vim/Makefile	/^NAME=`basename \\`pwd\\``$/;"	m
VERSION	plugged/jspc.vim/Makefile	/^VERSION=0.1$/;"	m
DIRS	plugged/jspc.vim/Makefile	/^DIRS=`ls -1F | grep \/ | sed -e 's\/\\\/\/\/'`$/;"	m
VIMRUNTIME	plugged/jspc.vim/Makefile	/^VIMRUNTIME=~\/.vim$/;"	m
FILES	plugged/jspc.vim/Makefile	/^FILES=`ls -1 | grep '.vim$$'`$/;"	m
MKFILES	plugged/jspc.vim/Makefile	/^MKFILES=Makefile `ls -1 | grep '.mk$$'`$/;"	m
SHELL	plugged/jspc.vim/Makefile	/^SHELL=bash$/;"	m
CONFIG_FILE	plugged/jspc.vim/Makefile	/^CONFIG_FILE=config.mk$/;"	m
loaded_matchit	plugged/matchit/plugin/matchit.vim	/^let loaded_matchit = 1$/;"	v
s:last_mps	plugged/matchit/plugin/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_words	plugged/matchit/plugin/matchit.vim	/^let s:last_words = ":"$/;"	v
s:save_cpo	plugged/matchit/plugin/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
%	plugged/matchit/plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
g%	plugged/matchit/plugin/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
%	plugged/matchit/plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
g%	plugged/matchit/plugin/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
%	plugged/matchit/plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
g%	plugged/matchit/plugin/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
[%	plugged/matchit/plugin/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
]%	plugged/matchit/plugin/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
[%	plugged/matchit/plugin/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
]%	plugged/matchit/plugin/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
[%	plugged/matchit/plugin/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
]%	plugged/matchit/plugin/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
a%	plugged/matchit/plugin/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
s:notslash	plugged/matchit/plugin/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
Match_wrapper	plugged/matchit/plugin/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
CleanUp	plugged/matchit/plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
InsertRefs	plugged/matchit/plugin/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
ParseWords	plugged/matchit/plugin/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
Wholematch	plugged/matchit/plugin/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
Ref	plugged/matchit/plugin/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
Count	plugged/matchit/plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
Resolve	plugged/matchit/plugin/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
Choose	plugged/matchit/plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
MatchDebug	plugged/matchit/plugin/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
Match_debug	plugged/matchit/plugin/matchit.vim	/^fun! s:Match_debug()$/;"	f
MultiMatch	plugged/matchit/plugin/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
ParseSkip	plugged/matchit/plugin/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
colors_name	plugged/mustang-vim/colors/mustang.vim	/^let colors_name = "mustang"$/;"	v
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/async_cache.vim	/^let s:save_cpo = &cpo$/;"	v
main	plugged/neocomplete.vim/autoload/neocomplete/async_cache.vim	/^function! s:main(argv) abort "{{{$/;"	f
load_from_file	plugged/neocomplete.vim/autoload/neocomplete/async_cache.vim	/^function! s:load_from_file(filename, pattern_file_name, mark, minlen, fileencoding, is_string) abort "{{{$/;"	f
load_from_tags	plugged/neocomplete.vim/autoload/neocomplete/async_cache.vim	/^function! s:load_from_tags(filename, pattern_file_name, mark, minlen, fileencoding) abort "{{{$/;"	f
truncate	plugged/neocomplete.vim/autoload/neocomplete/async_cache.vim	/^function! s:truncate(str, width) abort "{{{$/;"	f
strwidthpart	plugged/neocomplete.vim/autoload/neocomplete/async_cache.vim	/^function! s:strwidthpart(str, width) abort "{{{$/;"	f
iconv	plugged/neocomplete.vim/autoload/neocomplete/async_cache.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
neocomplete#async_cache#main	plugged/neocomplete.vim/autoload/neocomplete/async_cache.vim	/^  function! neocomplete#async_cache#main(argv) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^let s:save_cpo = &cpo$/;"	v
s:Cache	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^let s:Cache = neocomplete#util#get_vital().import('System.Cache.Deprecated')$/;"	v
neocomplete#cache#load_from_cache	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#load_from_cache(cache_dir, filename, ...) abort "{{{$/;"	f
neocomplete#cache#check_cache	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#check_cache(cache_dir, key, async_cache_dictionary, keyword_cache, is_string) abort "{{{$/;"	f
neocomplete#cache#get_cache_list	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#get_cache_list(cache_dir, async_cache_list) abort "{{{$/;"	f
neocomplete#cache#save_cache	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#save_cache(cache_dir, filename, keyword_list) abort "{{{$/;"	f
neocomplete#cache#getfilename	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#getfilename(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#filereadable	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#filereadable(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#readfile	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#readfile(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#writefile	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#writefile(cache_dir, filename, list) abort "{{{$/;"	f
neocomplete#cache#encode_name	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#encode_name(cache_dir, filename) abort$/;"	f
neocomplete#cache#check_old_cache	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#check_old_cache(cache_dir, filename) abort "{{{$/;"	f
neocomplete#cache#make_directory	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#make_directory(directory) abort "{{{$/;"	f
s:sdir	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^let s:sdir = neocomplete#util#substitute_path_separator($/;"	v
neocomplete#cache#async_load_from_file	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#async_load_from_file(cache_dir, filename, pattern, mark) abort "{{{$/;"	f
neocomplete#cache#async_load_from_tags	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! neocomplete#cache#async_load_from_tags(cache_dir, filename, filetype, pattern, mark) abort "{{{$/;"	f
async_load	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! s:async_load(argv, cache_dir, filename) abort "{{{$/;"	f
search_vim_path	plugged/neocomplete.vim/autoload/neocomplete/cache.vim	/^function! s:search_vim_path() abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/commands.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#commands#_initialize	plugged/neocomplete.vim/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_initialize() abort "{{{$/;"	f
neocomplete#commands#_toggle_lock	plugged/neocomplete.vim/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_toggle_lock() abort "{{{$/;"	f
neocomplete#commands#_lock	plugged/neocomplete.vim/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_lock() abort "{{{$/;"	f
neocomplete#commands#_unlock	plugged/neocomplete.vim/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_unlock() abort "{{{$/;"	f
neocomplete#commands#_clean	plugged/neocomplete.vim/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_clean() abort "{{{$/;"	f
neocomplete#commands#_set_file_type	plugged/neocomplete.vim/autoload/neocomplete/commands.vim	/^function! neocomplete#commands#_set_file_type(filetype) abort "{{{$/;"	f
rand	plugged/neocomplete.vim/autoload/neocomplete/commands.vim	/^function! s:rand(max) abort "{{{$/;"	f
set_auto_completion_length	plugged/neocomplete.vim/autoload/neocomplete/commands.vim	/^function! s:set_auto_completion_length(len) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#complete#_get_results	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_get_results(cur_text, ...) abort "{{{$/;"	f
neocomplete#complete#_get_complete_pos	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_get_complete_pos(sources) abort "{{{$/;"	f
neocomplete#complete#_get_words	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_get_words(sources, complete_pos, complete_str) abort "{{{$/;"	f
neocomplete#complete#_set_results_pos	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_set_results_pos(cur_text, ...) abort "{{{$/;"	f
neocomplete#complete#_set_results_words	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_set_results_words(sources) abort "{{{$/;"	f
neocomplete#complete#_check_previous_position	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_check_previous_position(cur_text, complete_pos) abort "{{{$/;"	f
neocomplete#complete#_set_previous_position	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! neocomplete#complete#_set_previous_position(cur_text, complete_pos) abort "{{{$/;"	f
compare_source_rank	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! s:compare_source_rank(i1, i2) abort$/;"	f
set_default_menu	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! s:set_default_menu(words, source) abort "{{{$/;"	f
use_previous_result	plugged/neocomplete.vim/autoload/neocomplete/complete.vim	/^function! s:use_previous_result(source, context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/context_filetype.vim	/^let s:save_cpo = &cpo$/;"	v
s:exists_context_filetype	plugged/neocomplete.vim/autoload/neocomplete/context_filetype.vim	/^  let s:exists_context_filetype = exists('*context_filetype#version')$/;"	v
neocomplete#context_filetype#set	plugged/neocomplete.vim/autoload/neocomplete/context_filetype.vim	/^function! neocomplete#context_filetype#set() abort "{{{$/;"	f
neocomplete#context_filetype#get	plugged/neocomplete.vim/autoload/neocomplete/context_filetype.vim	/^function! neocomplete#context_filetype#get(filetype) abort "{{{$/;"	f
neocomplete#context_filetype#filetypes	plugged/neocomplete.vim/autoload/neocomplete/context_filetype.vim	/^function! neocomplete#context_filetype#filetypes() abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/custom.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#custom#get	plugged/neocomplete.vim/autoload/neocomplete/custom.vim	/^function! neocomplete#custom#get() abort "{{{$/;"	f
neocomplete#custom#source	plugged/neocomplete.vim/autoload/neocomplete/custom.vim	/^function! neocomplete#custom#source(source_name, option_name, value) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#converter_abbr#define	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_abbr.vim	/^function! neocomplete#filters#converter_abbr#define() abort "{{{$/;"	f
s:converter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_abbr.vim	/^let s:converter = {$/;"	v
converter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_abbr.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_add_paren.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#converter_add_paren#define	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_add_paren.vim	/^function! neocomplete#filters#converter_add_paren#define() abort "{{{$/;"	f
s:converter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_add_paren.vim	/^let s:converter = {$/;"	v
converter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_add_paren.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_case.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#converter_case#define	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_case.vim	/^function! neocomplete#filters#converter_case#define() abort "{{{$/;"	f
s:converter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_case.vim	/^let s:converter = {$/;"	v
converter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_case.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
get_convert_candidates	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_case.vim	/^function! s:get_convert_candidates(candidates) abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_delimiter.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#converter_delimiter#define	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_delimiter.vim	/^function! neocomplete#filters#converter_delimiter#define() abort "{{{$/;"	f
s:converter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_delimiter.vim	/^let s:converter = {$/;"	v
converter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_delimiter.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
process_delimiter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_delimiter.vim	/^function! s:process_delimiter(context, candidate, delimiter, delim_cnt) abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_disable_abbr.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#converter_disable_abbr#define	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_disable_abbr.vim	/^function! neocomplete#filters#converter_disable_abbr#define() abort "{{{$/;"	f
s:converter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_disable_abbr.vim	/^let s:converter = {$/;"	v
converter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_disable_abbr.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#converter_remove_last_paren#define	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^function! neocomplete#filters#converter_remove_last_paren#define() abort "{{{$/;"	f
s:converter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^let s:converter = {$/;"	v
converter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_remove_last_paren.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_remove_overlap.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#converter_remove_overlap#define	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_remove_overlap.vim	/^function! neocomplete#filters#converter_remove_overlap#define() abort "{{{$/;"	f
s:converter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_remove_overlap.vim	/^let s:converter = {$/;"	v
converter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_remove_overlap.vim	/^function! s:converter.filter(context) abort "{{{$/;"	f
neocomplete#filters#converter_remove_overlap#length	plugged/neocomplete.vim/autoload/neocomplete/filters/converter_remove_overlap.vim	/^function! neocomplete#filters#converter_remove_overlap#length(left, right) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_fuzzy.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#matcher_fuzzy#define	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_fuzzy.vim	/^function! neocomplete#filters#matcher_fuzzy#define() abort "{{{$/;"	f
s:matcher	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_fuzzy.vim	/^let s:matcher = {$/;"	v
matcher.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_fuzzy.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_head.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#matcher_head#define	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_head.vim	/^function! neocomplete#filters#matcher_head#define() abort "{{{$/;"	f
s:matcher	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_head.vim	/^let s:matcher = {$/;"	v
matcher.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_head.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_length.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#matcher_length#define	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_length.vim	/^function! neocomplete#filters#matcher_length#define() abort "{{{$/;"	f
s:matcher	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_length.vim	/^let s:matcher = {$/;"	v
matcher.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_length.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_nothing.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#matcher_nothing#define	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_nothing.vim	/^function! neocomplete#filters#matcher_nothing#define() abort "{{{$/;"	f
s:matcher	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_nothing.vim	/^let s:matcher = {$/;"	v
matcher.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/matcher_nothing.vim	/^function! s:matcher.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_filename.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#sorter_filename#define	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_filename.vim	/^function! neocomplete#filters#sorter_filename#define() abort "{{{$/;"	f
s:sorter	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_filename.vim	/^let s:sorter = {$/;"	v
sorter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_filename.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_length.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#sorter_length#define	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_length.vim	/^function! neocomplete#filters#sorter_length#define() abort "{{{$/;"	f
s:sorter	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_length.vim	/^let s:sorter = {$/;"	v
sorter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_length.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
compare	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_length.vim	/^function! s:compare(i1, i2) abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_rank.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#sorter_rank#define	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_rank.vim	/^function! neocomplete#filters#sorter_rank#define() abort "{{{$/;"	f
s:sorter	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_rank.vim	/^let s:sorter = {$/;"	v
sorter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_rank.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_word.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#sorter_word#define	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_word.vim	/^function! neocomplete#filters#sorter_word#define() abort "{{{$/;"	f
s:sorter	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_word.vim	/^let s:sorter = {$/;"	v
sorter.filter	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_word.vim	/^function! s:sorter.filter(context) abort "{{{$/;"	f
compare	plugged/neocomplete.vim/autoload/neocomplete/filters/sorter_word.vim	/^function! s:compare(i1, i2) abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/filters.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#filters#fuzzy_escape	plugged/neocomplete.vim/autoload/neocomplete/filters.vim	/^function! neocomplete#filters#fuzzy_escape(string) abort "{{{$/;"	f
neocomplete#filters#escape	plugged/neocomplete.vim/autoload/neocomplete/filters.vim	/^function! neocomplete#filters#escape(string) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#handler#_on_moved_i	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_moved_i() abort "{{{$/;"	f
neocomplete#handler#_on_insert_enter	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_insert_enter() abort "{{{$/;"	f
neocomplete#handler#_on_insert_leave	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_insert_leave() abort "{{{$/;"	f
neocomplete#handler#_on_complete_done	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_complete_done() abort "{{{$/;"	f
neocomplete#handler#_on_insert_char_pre	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_insert_char_pre() abort "{{{$/;"	f
neocomplete#handler#_on_text_changed	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_on_text_changed() abort "{{{$/;"	f
complete_delay	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:complete_delay(timer) abort "{{{$/;"	f
neocomplete#handler#_do_auto_complete	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! neocomplete#handler#_do_auto_complete(event) abort "{{{$/;"	f
do_auto_complete	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:do_auto_complete(event) abort "{{{$/;"	f
check_in_do_auto_complete	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:check_in_do_auto_complete(event) abort "{{{$/;"	f
is_skip_auto_complete	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:is_skip_auto_complete(cur_text) abort "{{{$/;"	f
close_preview_window	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:close_preview_window() abort "{{{$/;"	f
make_cache_current_line	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:make_cache_current_line() abort "{{{$/;"	f
check_force_omni	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:check_force_omni(cur_text) abort "{{{$/;"	f
check_fallback	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:check_fallback(cur_text) abort "{{{$/;"	f
complete_key	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:complete_key(key) abort "{{{$/;"	f
indent_current_line	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:indent_current_line() abort "{{{$/;"	f
is_delimiter	plugged/neocomplete.vim/autoload/neocomplete/handler.vim	/^function! s:is_delimiter() abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#helper#get_cur_text	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_cur_text(...) abort "{{{$/;"	f
neocomplete#helper#get_force_omni_complete_pos	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_force_omni_complete_pos(cur_text) abort "{{{$/;"	f
neocomplete#helper#is_enabled_source	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#is_enabled_source(source, filetype) abort "{{{$/;"	f
neocomplete#helper#get_source_filetypes	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_source_filetypes(filetype) abort "{{{$/;"	f
neocomplete#helper#complete_check	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#complete_check() abort "{{{$/;"	f
neocomplete#helper#get_syn_name	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_syn_name(is_trans) abort "{{{$/;"	f
neocomplete#helper#match_word	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#match_word(cur_text, ...) abort "{{{$/;"	f
neocomplete#helper#filetype_complete	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#filetype_complete(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neocomplete#helper#unite_patterns	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#unite_patterns(pattern_var, filetype) abort "{{{$/;"	f
neocomplete#helper#check_filetype	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#check_filetype(dictionary) abort "{{{$/;"	f
neocomplete#helper#get_sources_list	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#get_sources_list(...) abort "{{{$/;"	f
neocomplete#helper#clear_result	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#clear_result() abort "{{{$/;"	f
neocomplete#helper#call_hook	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#call_hook(sources, hook_name, context) abort "{{{$/;"	f
neocomplete#helper#call_filters	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#call_filters(filters, source, context) abort "{{{$/;"	f
neocomplete#helper#sort_human	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#sort_human(candidates) abort "{{{$/;"	f
neocomplete#helper#check_invalid_omnifunc	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#check_invalid_omnifunc(omnifunc) abort "{{{$/;"	f
neocomplete#helper#indent_current_line	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#indent_current_line() abort "{{{$/;"	f
neocomplete#helper#complete_configure	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#complete_configure() abort "{{{$/;"	f
neocomplete#helper#clean	plugged/neocomplete.vim/autoload/neocomplete/helper.vim	/^function! neocomplete#helper#clean(directory) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^let s:save_cpo = &cpo$/;"	v
s:is_enabled	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^  let s:is_enabled = 0$/;"	v
neocomplete#init#enable	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#enable() abort "{{{$/;"	f
neocomplete#init#disable	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#disable() abort "{{{$/;"	f
neocomplete#init#is_enabled	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#is_enabled() abort "{{{$/;"	f
neocomplete#init#_autocmds	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#_autocmds() abort "{{{$/;"	f
neocomplete#init#_others	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#_others() abort "{{{$/;"	f
neocomplete#init#_variables	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#_variables() abort "{{{$/;"	f
neocomplete#init#_current_neocomplete	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#_current_neocomplete() abort "{{{$/;"	f
neocomplete#init#_sources	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#_sources(names) abort "{{{$/;"	f
neocomplete#init#_source	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#_source(source) abort "{{{$/;"	f
neocomplete#init#_filters	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#_filters(names) abort "{{{$/;"	f
neocomplete#init#_filter	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#_filter(filter) abort "{{{$/;"	f
neocomplete#init#_context	plugged/neocomplete.vim/autoload/neocomplete/init.vim	/^function! neocomplete#init#_context(context) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#mappings#define_default_mappings	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#define_default_mappings() abort "{{{$/;"	f
neocomplete#mappings#auto_complete	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#auto_complete() abort "{{{$/;"	f
neocomplete#mappings#manual_complete	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#manual_complete() abort "{{{$/;"	f
neocomplete#mappings#smart_close_popup	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#smart_close_popup() abort "{{{$/;"	f
neocomplete#mappings#close_popup	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#close_popup() abort "{{{$/;"	f
neocomplete#mappings#cancel_popup	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#cancel_popup() abort "{{{$/;"	f
neocomplete#mappings#popup_post	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#popup_post() abort "{{{$/;"	f
neocomplete#mappings#undo_completion	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#undo_completion() abort "{{{$/;"	f
neocomplete#mappings#complete_common_string	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#complete_common_string() abort "{{{$/;"	f
neocomplete#mappings#fallback	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#fallback(i) abort "{{{$/;"	f
neocomplete#mappings#refresh	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#refresh() abort "{{{$/;"	f
neocomplete#mappings#start_manual_complete	plugged/neocomplete.vim/autoload/neocomplete/mappings.vim	/^function! neocomplete#mappings#start_manual_complete(...) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
g:neocomplete#sources#buffer#cache_limit_size	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^let g:neocomplete#sources#buffer#cache_limit_size =$/;"	v
g:neocomplete#sources#buffer#disabled_pattern	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^let g:neocomplete#sources#buffer#disabled_pattern =$/;"	v
g:neocomplete#sources#buffer#max_keyword_width	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^let g:neocomplete#sources#buffer#max_keyword_width =$/;"	v
s:buffer_sources	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^  let s:buffer_sources = {}$/;"	v
s:async_dictionary_list	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^  let s:async_dictionary_list = {}$/;"	v
s:source	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^let s:source = {$/;"	v
source.hooks.on_init	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.hooks.on_final	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:source.hooks.on_final(context) abort "{{{$/;"	f
source.hooks.on_post_filter	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:source.hooks.on_post_filter(context) abort "{{{$/;"	f
source.gather_candidates	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
neocomplete#sources#buffer#define	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#define() abort "{{{$/;"	f
neocomplete#sources#buffer#get_frequencies	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#get_frequencies() abort "{{{$/;"	f
neocomplete#sources#buffer#make_cache_current_line	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#make_cache_current_line() abort "{{{$/;"	f
should_create_cache	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:should_create_cache(bufnr) " {{{$/;"	f
get_sources_list	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:get_sources_list(context) abort "{{{$/;"	f
initialize_source	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:initialize_source(srcname) abort "{{{$/;"	f
make_cache_file	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:make_cache_file(srcname) abort "{{{$/;"	f
make_cache_buffer	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:make_cache_buffer(srcname) abort "{{{$/;"	f
check_changed_buffer	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:check_changed_buffer(bufnr) abort "{{{$/;"	f
check_source	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:check_source() abort "{{{$/;"	f
exists_current_source	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:exists_current_source() abort "{{{$/;"	f
make_cache_current_buffer	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:make_cache_current_buffer(start, end) abort "{{{$/;"	f
check_async_cache	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:check_async_cache(context) abort "{{{$/;"	f
clean	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! s:clean() abort "{{{$/;"	f
neocomplete#sources#buffer#make_cache	plugged/neocomplete.vim/autoload/neocomplete/sources/buffer.vim	/^function! neocomplete#sources#buffer#make_cache(name) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^let s:save_cpo = &cpo$/;"	v
g:neocomplete#sources#dictionary#dictionaries	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^let g:neocomplete#sources#dictionary#dictionaries =$/;"	v
s:dictionary_cache	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^  let s:dictionary_cache = {}$/;"	v
s:async_dictionary_list	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^  let s:async_dictionary_list = {}$/;"	v
neocomplete#sources#dictionary#define	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^function! neocomplete#sources#dictionary#define() abort "{{{$/;"	f
s:source	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^let s:source = {$/;"	v
source.hooks.on_init	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.hooks.on_final	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^function! s:source.hooks.on_final(context) abort "{{{$/;"	f
source.gather_candidates	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
make_cache	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^function! s:make_cache(filetype) abort "{{{$/;"	f
neocomplete#sources#dictionary#remake_cache	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^function! neocomplete#sources#dictionary#remake_cache(filetype) abort "{{{$/;"	f
neocomplete#sources#dictionary#get_dictionaries	plugged/neocomplete.vim/autoload/neocomplete/sources/dictionary.vim	/^function! neocomplete#sources#dictionary#get_dictionaries(filetype) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/sources/file.vim	/^let s:save_cpo = &cpo$/;"	v
s:source	plugged/neocomplete.vim/autoload/neocomplete/sources/file.vim	/^let s:source = {$/;"	v
source.get_complete_position	plugged/neocomplete.vim/autoload/neocomplete/sources/file.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
source.gather_candidates	plugged/neocomplete.vim/autoload/neocomplete/sources/file.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
s:cached_files	plugged/neocomplete.vim/autoload/neocomplete/sources/file.vim	/^let s:cached_files = {}$/;"	v
get_glob_files	plugged/neocomplete.vim/autoload/neocomplete/sources/file.vim	/^function! s:get_glob_files(complete_str, path) abort "{{{$/;"	f
neocomplete#sources#file#define	plugged/neocomplete.vim/autoload/neocomplete/sources/file.vim	/^function! neocomplete#sources#file#define() abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^let s:save_cpo = &cpo$/;"	v
g:neocomplete#sources#member#prefix_patterns	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^let g:neocomplete#sources#member#prefix_patterns =$/;"	v
g:neocomplete#sources#member#input_patterns	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^let g:neocomplete#sources#member#input_patterns =$/;"	v
s:member_sources	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^  let s:member_sources = {}$/;"	v
s:source	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^let s:source = {$/;"	v
source.hooks.on_init	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.get_complete_position	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
source.gather_candidates	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
neocomplete#sources#member#define	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#define() abort "{{{$/;"	f
neocomplete#sources#member#make_cache_current_line	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#make_cache_current_line() abort "{{{$/;"	f
neocomplete#sources#member#make_cache_current_buffer	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#make_cache_current_buffer() abort "{{{$/;"	f
make_cache_current_buffer	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! s:make_cache_current_buffer(start, end) abort "{{{$/;"	f
make_cache_lines	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! s:make_cache_lines(srcname, filetype, lines) abort "{{{$/;"	f
get_member_list	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! s:get_member_list(context, cur_text, var_name) abort "{{{$/;"	f
get_sources_list	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! s:get_sources_list(context) abort "{{{$/;"	f
initialize_source	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! s:initialize_source(srcname, filetype) abort "{{{$/;"	f
get_member_pattern	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! s:get_member_pattern(filetype) abort "{{{$/;"	f
neocomplete#sources#member#remake_cache	plugged/neocomplete.vim/autoload/neocomplete/sources/member.vim	/^function! neocomplete#sources#member#remake_cache(filetype) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^let s:save_cpo = &cpo$/;"	v
g:neocomplete#sources#omni#functions	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^let g:neocomplete#sources#omni#functions =$/;"	v
g:neocomplete#sources#omni#input_patterns	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^let g:neocomplete#sources#omni#input_patterns =$/;"	v
s:source	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^let s:source = {$/;"	v
s:List	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^let s:List = neocomplete#util#get_vital().import('Data.List')$/;"	v
source.hooks.on_init	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.get_complete_position	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
source.gather_candidates	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
neocomplete#sources#omni#define	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! neocomplete#sources#omni#define() abort "{{{$/;"	f
get_omni_funcs	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! s:get_omni_funcs(filetype) abort "{{{$/;"	f
get_omni_list	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! s:get_omni_list(list) abort "{{{$/;"	f
set_complete_results_pos	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! s:set_complete_results_pos(funcs, cur_text) abort "{{{$/;"	f
set_complete_results_words	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! s:set_complete_results_words(complete_results) abort "{{{$/;"	f
get_complete_pos	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! s:get_complete_pos(complete_results) abort "{{{$/;"	f
get_candidates	plugged/neocomplete.vim/autoload/neocomplete/sources/omni.vim	/^function! s:get_candidates(complete_results, complete_pos, complete_str) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^let s:save_cpo = &cpo$/;"	v
s:tags_list	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^  let s:tags_list = {}$/;"	v
s:async_tags_list	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^  let s:async_tags_list = {}$/;"	v
s:source	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^let s:source = {$/;"	v
source.hooks.on_init	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^function! s:source.hooks.on_init(context) abort "{{{$/;"	f
source.hooks.on_final	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^function! s:source.hooks.on_final(context) abort "{{{$/;"	f
neocomplete#sources#tag#define	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^function! neocomplete#sources#tag#define() abort "{{{$/;"	f
source.gather_candidates	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
initialize_tags	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^function! s:initialize_tags(filename) abort "{{{$/;"	f
neocomplete#sources#tag#make_cache	plugged/neocomplete.vim/autoload/neocomplete/sources/tag.vim	/^function! neocomplete#sources#tag#make_cache(force) abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#util#get_vital	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#get_vital() abort "{{{$/;"	f
get_prelude	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! s:get_prelude() abort "{{{$/;"	f
get_list	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! s:get_list() abort "{{{$/;"	f
get_string	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! s:get_string() abort "{{{$/;"	f
get_process	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! s:get_process() abort "{{{$/;"	f
neocomplete#util#truncate_smart	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#truncate_smart(...) abort "{{{$/;"	f
neocomplete#util#truncate	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#truncate(...) abort "{{{$/;"	f
neocomplete#util#strchars	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#strchars(...) abort "{{{$/;"	f
neocomplete#util#wcswidth	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#wcswidth(string) abort "{{{$/;"	f
neocomplete#util#strwidthpart	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#strwidthpart(...) abort "{{{$/;"	f
neocomplete#util#strwidthpart_reverse	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#strwidthpart_reverse(...) abort "{{{$/;"	f
neocomplete#util#substitute_path_separator	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#substitute_path_separator(...) abort "{{{$/;"	f
neocomplete#util#mb_strlen	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#mb_strlen(...) abort "{{{$/;"	f
neocomplete#util#uniq	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#uniq(list) abort "{{{$/;"	f
neocomplete#util#system	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#system(...) abort "{{{$/;"	f
neocomplete#util#is_windows	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_windows(...) abort "{{{$/;"	f
neocomplete#util#is_mac	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_mac(...) abort "{{{$/;"	f
neocomplete#util#is_complete_select	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_complete_select() abort "{{{$/;"	f
neocomplete#util#get_last_status	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#get_last_status(...) abort "{{{$/;"	f
neocomplete#util#escape_pattern	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#escape_pattern(...) abort "{{{$/;"	f
neocomplete#util#iconv	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#iconv(...) abort "{{{$/;"	f
neocomplete#util#uniq	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#uniq(...) abort "{{{$/;"	f
neocomplete#util#sort_by	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#sort_by(...) abort "{{{$/;"	f
neocomplete#util#is_sudo	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_sudo() abort "{{{$/;"	f
neocomplete#util#glob	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#glob(pattern, ...) abort "{{{$/;"	f
neocomplete#util#expand	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#expand(path) abort "{{{$/;"	f
neocomplete#util#set_default	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#set_default(var, val, ...) abort  "{{{$/;"	f
neocomplete#util#set_dictionary_helper	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#set_dictionary_helper(variable, keys, pattern) abort "{{{$/;"	f
neocomplete#util#set_default_dictionary	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#set_default_dictionary(variable, keys, value) abort "{{{$/;"	f
neocomplete#util#disable_default_dictionary	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#disable_default_dictionary(variable) abort "{{{$/;"	f
neocomplete#util#split_rtp	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#split_rtp(...) abort "{{{$/;"	f
neocomplete#util#join_rtp	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#join_rtp(list) abort "{{{$/;"	f
escape	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! s:escape(path) abort"{{{$/;"	f
neocomplete#util#has_vimproc	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#has_vimproc() abort "{{{$/;"	f
neocomplete#util#dup_filter	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#dup_filter(list) abort "{{{$/;"	f
neocomplete#util#convert2list	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#convert2list(expr) abort "{{{$/;"	f
neocomplete#util#is_text_changed	plugged/neocomplete.vim/autoload/neocomplete/util.vim	/^function! neocomplete#util#is_text_changed() abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete/variables.vim	/^let s:save_cpo = &cpo$/;"	v
neocomplete#variables#get_frequencies	plugged/neocomplete.vim/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_frequencies() abort "{{{$/;"	f
neocomplete#variables#get_sources	plugged/neocomplete.vim/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_sources() abort "{{{$/;"	f
neocomplete#variables#get_source	plugged/neocomplete.vim/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_source(name) abort "{{{$/;"	f
neocomplete#variables#get_filters	plugged/neocomplete.vim/autoload/neocomplete/variables.vim	/^function! neocomplete#variables#get_filters() abort "{{{$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let s:save_cpo = &cpo$/;"	v
g:neocomplete#max_list	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#max_list =$/;"	v
g:neocomplete#max_keyword_width	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#max_keyword_width =$/;"	v
g:neocomplete#auto_completion_start_length	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#auto_completion_start_length =$/;"	v
g:neocomplete#manual_completion_start_length	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#manual_completion_start_length =$/;"	v
g:neocomplete#min_keyword_length	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#min_keyword_length =$/;"	v
g:neocomplete#enable_ignore_case	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#enable_ignore_case =$/;"	v
g:neocomplete#enable_smart_case	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#enable_smart_case =$/;"	v
g:neocomplete#enable_camel_case	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#enable_camel_case =$/;"	v
g:neocomplete#disable_auto_complete	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#disable_auto_complete =$/;"	v
g:neocomplete#enable_fuzzy_completion	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#enable_fuzzy_completion =$/;"	v
g:neocomplete#auto_complete_delay	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#auto_complete_delay =$/;"	v
g:neocomplete#enable_auto_select	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#enable_auto_select =$/;"	v
g:neocomplete#enable_auto_delimiter	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#enable_auto_delimiter =$/;"	v
g:neocomplete#lock_buffer_name_pattern	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#lock_buffer_name_pattern =$/;"	v
g:neocomplete#lock_iminsert	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#lock_iminsert =$/;"	v
g:neocomplete#enable_multibyte_completion	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#enable_multibyte_completion =$/;"	v
g:neocomplete#release_cache_time	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#release_cache_time =$/;"	v
g:neocomplete#skip_auto_completion_time	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#skip_auto_completion_time =$/;"	v
g:neocomplete#enable_auto_close_preview	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#enable_auto_close_preview =$/;"	v
g:neocomplete#enable_refresh_always	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#enable_refresh_always =$/;"	v
g:neocomplete#fallback_mappings	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#fallback_mappings =$/;"	v
g:neocomplete#sources	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#sources =$/;"	v
g:neocomplete#keyword_patterns	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#keyword_patterns =$/;"	v
g:neocomplete#delimiter_patterns	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#delimiter_patterns =$/;"	v
g:neocomplete#text_mode_filetypes	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#text_mode_filetypes =$/;"	v
g:neocomplete#tags_filter_patterns	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#tags_filter_patterns =$/;"	v
g:neocomplete#force_omni_input_patterns	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#force_omni_input_patterns =$/;"	v
g:neocomplete#ignore_source_files	plugged/neocomplete.vim/autoload/neocomplete.vim	/^let g:neocomplete#ignore_source_files =$/;"	v
neocomplete#initialize	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#initialize() abort "{{{$/;"	f
neocomplete#get_current_neocomplete	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#get_current_neocomplete() abort "{{{$/;"	f
neocomplete#get_context	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#get_context() abort "{{{$/;"	f
neocomplete#define_source	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#define_source(source) abort "{{{$/;"	f
neocomplete#define_filter	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#define_filter(filter) abort "{{{$/;"	f
neocomplete#available_sources	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#available_sources() abort "{{{$/;"	f
neocomplete#custom_source	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#custom_source(source_name, option_name, value) abort "{{{$/;"	f
neocomplete#dup_filter	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#dup_filter(list) abort "{{{$/;"	f
neocomplete#system	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#system(...) abort "{{{$/;"	f
neocomplete#has_vimproc	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#has_vimproc() abort "{{{$/;"	f
neocomplete#get_cur_text	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#get_cur_text(...) abort "{{{$/;"	f
neocomplete#get_keyword_pattern	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#get_keyword_pattern(...) abort "{{{$/;"	f
neocomplete#get_keyword_pattern_end	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#get_keyword_pattern_end(...) abort "{{{$/;"	f
neocomplete#match_word	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#match_word(...) abort "{{{$/;"	f
neocomplete#is_enabled	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_enabled() abort "{{{$/;"	f
neocomplete#is_locked	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_locked(...) abort "{{{$/;"	f
neocomplete#is_cache_disabled	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_cache_disabled() abort "{{{$/;"	f
neocomplete#is_auto_select	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_auto_select() abort "{{{$/;"	f
neocomplete#is_auto_complete	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_auto_complete() abort "{{{$/;"	f
neocomplete#is_eskk_enabled	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_eskk_enabled() abort "{{{$/;"	f
neocomplete#is_multibyte_input	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_multibyte_input(cur_text) abort "{{{$/;"	f
neocomplete#is_text_mode	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_text_mode() abort "{{{$/;"	f
neocomplete#is_windows	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_windows() abort "{{{$/;"	f
neocomplete#is_prefetch	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#is_prefetch() abort "{{{$/;"	f
neocomplete#exists_echodoc	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#exists_echodoc() abort "{{{$/;"	f
neocomplete#within_comment	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#within_comment() abort "{{{$/;"	f
neocomplete#print_error	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#print_error(string) abort "{{{$/;"	f
neocomplete#print_warning	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#print_warning(string) abort "{{{$/;"	f
neocomplete#head_match	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#head_match(checkstr, headstr) abort "{{{$/;"	f
neocomplete#get_source_filetypes	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#get_source_filetypes(filetype) abort "{{{$/;"	f
neocomplete#escape_match	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#escape_match(str) abort "{{{$/;"	f
neocomplete#get_context_filetype	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#get_context_filetype(...) abort "{{{$/;"	f
neocomplete#print_debug	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#print_debug(expr) abort "{{{$/;"	f
neocomplete#get_data_directory	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#get_data_directory() abort "{{{$/;"	f
neocomplete#complete_check	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#complete_check() abort "{{{$/;"	f
neocomplete#skip_next_complete	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#skip_next_complete() abort "{{{$/;"	f
neocomplete#get_default_matchers	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#get_default_matchers() abort "{{{$/;"	f
neocomplete#set_default_matchers	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#set_default_matchers(matchers) abort "{{{$/;"	f
neocomplete#set_dictionary_helper	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#set_dictionary_helper(variable, keys, value) abort "{{{$/;"	f
neocomplete#disable_default_dictionary	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#disable_default_dictionary(variable) abort "{{{$/;"	f
neocomplete#filetype_complete	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#filetype_complete(arglead, cmdline, cursorpos) abort "{{{$/;"	f
neocomplete#smart_close_popup	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#smart_close_popup() abort$/;"	f
neocomplete#close_popup	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#close_popup() abort$/;"	f
neocomplete#cancel_popup	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#cancel_popup() abort$/;"	f
neocomplete#undo_completion	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#undo_completion() abort$/;"	f
neocomplete#complete_common_string	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#complete_common_string() abort$/;"	f
neocomplete#start_manual_complete	plugged/neocomplete.vim/autoload/neocomplete.vim	/^function! neocomplete#start_manual_complete(...) abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/unite/sources/neocomplete.vim	/^let s:save_cpo = &cpo$/;"	v
unite#sources#neocomplete#define	plugged/neocomplete.vim/autoload/unite/sources/neocomplete.vim	/^function! unite#sources#neocomplete#define() abort "{{{$/;"	f
s:neocomplete_source	plugged/neocomplete.vim/autoload/unite/sources/neocomplete.vim	/^let s:neocomplete_source = {$/;"	v
neocomplete_source.hooks.on_init	plugged/neocomplete.vim/autoload/unite/sources/neocomplete.vim	/^function! s:neocomplete_source.hooks.on_init(args, context) abort "{{{$/;"	f
neocomplete_source.gather_candidates	plugged/neocomplete.vim/autoload/unite/sources/neocomplete.vim	/^function! s:neocomplete_source.gather_candidates(args, context) abort "{{{$/;"	f
unite#sources#neocomplete#start_complete	plugged/neocomplete.vim/autoload/unite/sources/neocomplete.vim	/^function! unite#sources#neocomplete#start_complete() abort "{{{$/;"	f
unite#sources#neocomplete#start_quick_match	plugged/neocomplete.vim/autoload/unite/sources/neocomplete.vim	/^function! unite#sources#neocomplete#start_quick_match() abort "{{{$/;"	f
start_complete	plugged/neocomplete.vim/autoload/unite/sources/neocomplete.vim	/^function! s:start_complete(is_quick_match) abort "{{{$/;"	f
vital#_neocomplete#Data#List#import	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^  function! vital#_neocomplete#Data#List#import() abort$/;"	f
_SID	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^  function! s:_SID() abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^let s:save_cpo = &cpo$/;"	v
pop	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:pop(list) abort$/;"	f
push	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:push(list, val) abort$/;"	f
shift	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:shift(list) abort$/;"	f
unshift	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:unshift(list, val) abort$/;"	f
cons	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:cons(x, xs) abort$/;"	f
conj	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:conj(xs, x) abort$/;"	f
uniq	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:uniq(list) abort$/;"	f
uniq_by	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:uniq_by(list, f) abort$/;"	f
clear	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:clear(list) abort$/;"	f
concat	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:concat(list) abort$/;"	f
flatten	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:flatten(list, ...) abort$/;"	f
sort	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:sort(list, expr) abort$/;"	f
_compare	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:_compare(a, b) abort$/;"	f
sort_by	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:sort_by(list, expr) abort$/;"	f
max_by	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:max_by(list, expr) abort$/;"	f
min_by	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:min_by(list, expr) abort$/;"	f
char_range	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:char_range(from, to) abort$/;"	f
has	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:has(list, value) abort$/;"	f
has_index	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:has_index(list, index) abort$/;"	f
span	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:span(f, xs) abort$/;"	f
break	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:break(f, xs) abort$/;"	f
take_while	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:take_while(f, xs) abort$/;"	f
partition	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:partition(f, xs) abort$/;"	f
all	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:all(f, xs) abort$/;"	f
any	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:any(f, xs) abort$/;"	f
and	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:and(xs) abort$/;"	f
or	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:or(xs) abort$/;"	f
map_accum	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:map_accum(expr, xs, init) abort$/;"	f
foldl	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldl(f, init, xs) abort$/;"	f
foldl1	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldl1(f, xs) abort$/;"	f
foldr	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldr(f, init, xs) abort$/;"	f
foldr1	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:foldr1(f, xs) abort$/;"	f
zip	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:zip(...) abort$/;"	f
zip_fill	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:zip_fill(xs, ys, filler) abort$/;"	f
with_index	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:with_index(list, ...) abort$/;"	f
find	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find(list, default, f) abort$/;"	f
find_index	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find_index(xs, f, ...) abort$/;"	f
find_last_index	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find_last_index(xs, f, ...) abort$/;"	f
find_indices	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:find_indices(xs, f, ...) abort$/;"	f
has_common_items	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:has_common_items(list1, list2) abort$/;"	f
intersect	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:intersect(list1, list2) abort$/;"	f
group_by	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:group_by(xs, f) abort$/;"	f
_default_compare	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:_default_compare(a, b) abort$/;"	f
binary_search	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:binary_search(list, value, ...) abort$/;"	f
product	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:product(lists) abort$/;"	f
permutations	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:permutations(list, ...) abort$/;"	f
combinations	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/List.vim	/^function! s:combinations(list, r) abort$/;"	f
vital#_neocomplete#Data#String#import	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^  function! vital#_neocomplete#Data#String#import() abort$/;"	f
_SID	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:_SID() abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^let s:save_cpo = &cpo$/;"	v
_vital_loaded	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_depends	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_vital_depends() abort$/;"	f
_vital_created	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_vital_created(module) abort$/;"	f
replace	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:replace(str, from, to) abort$/;"	f
replace_first	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:replace_first(str, from, to) abort$/;"	f
_replace	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_replace(str, from, to, flags) abort$/;"	f
scan	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:scan(str, pattern) abort$/;"	f
reverse	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:reverse(str) abort$/;"	f
starts_with	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:starts_with(str, prefix) abort$/;"	f
ends_with	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:ends_with(str, suffix) abort$/;"	f
common_head	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:common_head(strs) abort$/;"	f
split_leftright	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split_leftright(expr, pattern) abort$/;"	f
split3	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split3(expr, pattern) abort$/;"	f
nsplit	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nsplit(expr, n, ...) abort$/;"	f
s:strchars	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^  let s:strchars = function('strchars')$/;"	v
strchars	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:strchars(str) abort$/;"	f
contains_multibyte	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:contains_multibyte(str) abort "{{{$/;"	f
chop	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:chop(str) abort "{{{$/;"	f
chomp	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:chomp(str) abort "{{{$/;"	f
_split_by_wcswidth_once	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_split_by_wcswidth_once(body, x) abort$/;"	f
_split_by_wcswidth	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_split_by_wcswidth(body, x) abort$/;"	f
trim	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:trim(str) abort$/;"	f
trim_start	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:trim_start(str) abort$/;"	f
trim_end	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:trim_end(str) abort$/;"	f
wrap	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:wrap(str,...) abort$/;"	f
nr2byte	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nr2byte(nr) abort$/;"	f
nr2enc_char	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nr2enc_char(charcode) abort$/;"	f
nr2hex	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:nr2hex(nr) abort$/;"	f
diffidx	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:diffidx(a, b) abort$/;"	f
substitute_last	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:substitute_last(expr, pat, sub) abort$/;"	f
dstring	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:dstring(expr) abort$/;"	f
lines	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:lines(str) abort$/;"	f
_pad_with_char	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:_pad_with_char(str, left, right, char) abort$/;"	f
pad_left	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_left(str, width, ...) abort$/;"	f
pad_right	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_right(str, width, ...) abort$/;"	f
pad_both_sides	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_both_sides(str, width, ...) abort$/;"	f
pad_between_letters	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:pad_between_letters(str, width, ...) abort$/;"	f
justify_equal_spacing	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:justify_equal_spacing(str, width, ...) abort$/;"	f
levenshtein_distance	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:levenshtein_distance(str1, str2) abort$/;"	f
padding_by_displaywidth	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:padding_by_displaywidth(expr, width, float) abort$/;"	f
split_by_displaywidth	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split_by_displaywidth(expr, width, float, is_wrap) abort$/;"	f
hash	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:hash(str) abort$/;"	f
truncate	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:truncate(str, width) abort$/;"	f
truncate_skipping	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
strwidthpart	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart_reverse	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
s:wcswidth	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^  let s:wcswidth = function('strwidth')$/;"	v
wcswidth	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:wcswidth(str) abort$/;"	f
_wcwidth	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
remove_ansi_sequences	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:remove_ansi_sequences(text) abort$/;"	f
escape_pattern	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:escape_pattern(str) abort$/;"	f
unescape_pattern	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:unescape_pattern(str) abort$/;"	f
unescape	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:unescape(str, chars) abort$/;"	f
iconv	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
repair_posix_text	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:repair_posix_text(text, ...) abort$/;"	f
join_posix_lines	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:join_posix_lines(lines, ...) abort$/;"	f
split_posix_text	plugged/neocomplete.vim/autoload/vital/_neocomplete/Data/String.vim	/^function! s:split_posix_text(text, ...) abort$/;"	f
vital#_neocomplete#Prelude#import	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^  function! vital#_neocomplete#Prelude#import() abort$/;"	f
_SID	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:_SID() abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^let s:save_cpo = &cpo$/;"	v
glob	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
glob	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:glob(expr) abort$/;"	f
globpath	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:globpath(path, expr) abort$/;"	f
globpath	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:globpath(path, expr) abort$/;"	f
is_numeric	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_numeric(Value) abort$/;"	f
is_number	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_number(Value) abort$/;"	f
is_string	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_string(Value) abort$/;"	f
is_funcref	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_funcref(Value) abort$/;"	f
is_list	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_list(Value) abort$/;"	f
is_dict	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_dict(Value) abort$/;"	f
is_float	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_float(Value) abort$/;"	f
truncate_skipping	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:truncate_skipping(str, max, footer_width, separator) abort$/;"	f
truncate	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:truncate(str, width) abort$/;"	f
strwidthpart	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:strwidthpart(str, width) abort$/;"	f
strwidthpart_reverse	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:strwidthpart_reverse(str, width) abort$/;"	f
wcswidth	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
wcswidth	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:wcswidth(str) abort$/;"	f
_wcwidth	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^  function! s:_wcwidth(ucs) abort$/;"	f
s:is_windows	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_cygwin	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_mac	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_unix	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^let s:is_unix = has('unix')$/;"	v
is_windows	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_windows() abort$/;"	f
is_cygwin	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_cygwin() abort$/;"	f
is_mac	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_mac() abort$/;"	f
is_unix	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:is_unix() abort$/;"	f
_warn_deprecated	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_warn_deprecated(name, alternative) abort$/;"	f
smart_execute_command	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:smart_execute_command(action, word) abort$/;"	f
escape_file_searching	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:escape_file_searching(buffer_name) abort$/;"	f
escape_pattern	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:escape_pattern(str) abort$/;"	f
getchar	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:getchar(...) abort$/;"	f
getchar_safe	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:getchar_safe(...) abort$/;"	f
input_safe	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:input_safe(...) abort$/;"	f
input_helper	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:input_helper(funcname, args) abort$/;"	f
set_default	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:set_default(var, val) abort$/;"	f
substitute_path_separator	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:substitute_path_separator(path) abort$/;"	f
path2directory	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:path2directory(path) abort$/;"	f
_path2project_directory_git	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_path2project_directory_git(path) abort$/;"	f
_path2project_directory_svn	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_path2project_directory_svn(path) abort$/;"	f
_path2project_directory_others	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:_path2project_directory_others(vcs, path) abort$/;"	f
path2project_directory	plugged/neocomplete.vim/autoload/vital/_neocomplete/Prelude.vim	/^function! s:path2project_directory(path, ...) abort$/;"	f
vital#_neocomplete#Process#import	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^  function! vital#_neocomplete#Process#import() abort$/;"	f
_SID	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^  function! s:_SID() abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^let s:save_cpo = &cpo$/;"	v
s:is_windows	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_unix	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^let s:is_unix = has('unix')$/;"	v
s:need_trans	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^let s:need_trans = v:version < 704 || (v:version == 704 && !has('patch122'))$/;"	v
s:TYPE_DICT	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^let s:TYPE_DICT = type({})$/;"	v
s:TYPE_LIST	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^let s:TYPE_LIST = type([])$/;"	v
s:TYPE_STRING	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^let s:TYPE_STRING = type('')$/;"	v
spawn	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^function! s:spawn(expr, ...) abort$/;"	f
iconv	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^function! s:iconv(expr, from, to) abort$/;"	f
has_vimproc	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^function! s:has_vimproc() abort$/;"	f
system	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^function! s:system(str, ...) abort$/;"	f
get_last_status	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^function! s:get_last_status() abort$/;"	f
shellescape	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^  function! s:shellescape(command) abort$/;"	f
shellescape	plugged/neocomplete.vim/autoload/vital/_neocomplete/Process.vim	/^  function! s:shellescape(...) abort$/;"	f
vital#_neocomplete#System#Cache#Deprecated#import	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^  function! vital#_neocomplete#System#Cache#Deprecated#import() abort$/;"	f
_SID	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^  function! s:_SID() abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^let s:save_cpo = &cpo$/;"	v
_vital_loaded	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_vital_loaded(V) abort$/;"	f
_vital_depends	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_vital_depends() abort$/;"	f
getfilename	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:getfilename(cache_dir, filename) abort$/;"	f
filereadable	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:filereadable(cache_dir, filename) abort$/;"	f
readfile	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:readfile(cache_dir, filename) abort$/;"	f
writefile	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:writefile(cache_dir, filename, list) abort$/;"	f
delete	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:delete(cache_dir, filename) abort$/;"	f
deletefile	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:deletefile(cache_dir, filename) abort$/;"	f
_encode_name	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_encode_name(cache_dir, filename) abort$/;"	f
check_old_cache	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:check_old_cache(cache_dir, filename) abort$/;"	f
_create_hash	plugged/neocomplete.vim/autoload/vital/_neocomplete/System/Cache/Deprecated.vim	/^function! s:_create_hash(dir, str) abort$/;"	f
s:_plugin_name	plugged/neocomplete.vim/autoload/vital/_neocomplete.vim	/^let s:_plugin_name = expand('<sfile>:t:r')$/;"	v
vital#	plugged/neocomplete.vim/autoload/vital/_neocomplete.vim	/^function! vital#{s:_plugin_name}#new() abort$/;"	f
s:plugin_name	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:plugin_name = expand('<sfile>:t:r')$/;"	v
s:vital_base_dir	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:vital_base_dir = expand('<sfile>:h')$/;"	v
s:project_root	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:project_root = expand('<sfile>:h:h:h')$/;"	v
s:is_vital_vim	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:is_vital_vim = s:plugin_name is# 'vital'$/;"	v
s:loaded	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:loaded = {}$/;"	v
s:cache_sid	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:cache_sid = {}$/;"	v
_function	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  function! s:_function(fstr) abort$/;"	f
_SID	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  function! s:_SID() abort$/;"	f
s:_s	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  let s:_s = '<SNR>' . s:_SID() . '_'$/;"	v
_function	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  function! s:_function(fstr) abort$/;"	f
vital#	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! vital#{s:plugin_name}#new() abort$/;"	f
vital#	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! vital#{s:plugin_name}#import(...) abort$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:Vital = {}$/;"	v
new	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:new(plugin_name) abort$/;"	f
vital_files	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:vital_files() abort$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:Vital.vital_files = s:_function('s:vital_files')$/;"	v
import	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:import(name, ...) abort dict$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:Vital.import = s:_function('s:import')$/;"	v
load	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:load(...) abort dict$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:Vital.load = s:_function('s:load')$/;"	v
unload	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:unload() abort dict$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:Vital.unload = s:_function('s:unload')$/;"	v
exists	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:exists(name) abort dict$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:Vital.exists = s:_function('s:exists')$/;"	v
search	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:search(pattern) abort dict$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:Vital.search = s:_function('s:search')$/;"	v
plugin_name	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:plugin_name() abort dict$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:Vital.plugin_name = s:_function('s:plugin_name')$/;"	v
_self_vital_files	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_self_vital_files() abort$/;"	f
_global_vital_files	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_global_vital_files() abort$/;"	f
_extract_files	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_extract_files(pattern, files) abort$/;"	f
_file2module	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_file2module(file) abort$/;"	f
_import	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_import(name) abort dict$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:Vital._import = s:_function('s:_import')$/;"	v
_get_module	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_get_module(name) abort dict$/;"	f
_get_builtin_module	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_get_builtin_module(name) abort$/;"	f
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  let s:Vital._get_module = s:_function('s:_get_builtin_module')$/;"	v
s:Vital	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  let s:Vital._get_module = s:_function('s:_get_module')$/;"	v
_import_func_name	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_import_func_name(plugin_name, module_name) abort$/;"	f
_module_sid	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_module_sid(name) abort$/;"	f
_module_path	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_module_path(name) abort$/;"	f
_module_sid_base_dir	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_module_sid_base_dir() abort$/;"	f
_dot_to_sharp	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_dot_to_sharp(name) abort$/;"	f
_exists_autoload_func_with_source	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_exists_autoload_func_with_source(funcname) abort$/;"	f
_runtime	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_runtime(path) abort$/;"	f
_source	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_source(path) abort$/;"	f
_sid	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_sid(path, filter_pattern) abort$/;"	f
_redir	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_redir(cmd) abort$/;"	f
s:_unify_path_cache	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  let s:_unify_path_cache = {}$/;"	v
_unify_path	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  function! s:_unify_path(path) abort$/;"	f
_unify_path	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  function! s:_unify_path(path) abort$/;"	f
s:SNR	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^let s:SNR = join(map(range(len("\\<SNR>")), '"[\\\\x" . printf("%0x", char2nr("\\<SNR>"[v:val])) . "]"'), '')$/;"	v
sid2sfuncs	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:sid2sfuncs(sid) abort$/;"	f
_sfuncname	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^function! s:_sfuncname(sid, funcname) abort$/;"	f
_uniq	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  function! s:_uniq(list) abort$/;"	f
_uniq	plugged/neocomplete.vim/autoload/vital/neocomplete.vim	/^  function! s:_uniq(list) abort$/;"	f
vital#of	plugged/neocomplete.vim/autoload/vital.vim	/^function! vital#of(name) abort$/;"	f
s:save_cpo	plugged/neocomplete.vim/plugin/neocomplete/buffer.vim	/^let s:save_cpo = &cpo$/;"	v
NeoCompleteBufferMakeCache	plugged/neocomplete.vim/plugin/neocomplete/buffer.vim	/^      \\ NeoCompleteBufferMakeCache$/;"	c
g:loaded_neocomplete_buffer	plugged/neocomplete.vim/plugin/neocomplete/buffer.vim	/^let g:loaded_neocomplete_buffer = 1$/;"	v
s:save_cpo	plugged/neocomplete.vim/plugin/neocomplete/dictionary.vim	/^let s:save_cpo = &cpo$/;"	v
NeoCompleteDictionaryMakeCache	plugged/neocomplete.vim/plugin/neocomplete/dictionary.vim	/^      \\ NeoCompleteDictionaryMakeCache$/;"	c
g:loaded_neocomplete_dictionary	plugged/neocomplete.vim/plugin/neocomplete/dictionary.vim	/^let g:loaded_neocomplete_dictionary = 1$/;"	v
s:save_cpo	plugged/neocomplete.vim/plugin/neocomplete/member.vim	/^let s:save_cpo = &cpo$/;"	v
NeoCompleteMemberMakeCache	plugged/neocomplete.vim/plugin/neocomplete/member.vim	/^      \\ NeoCompleteMemberMakeCache$/;"	c
g:loaded_neocomplete_member	plugged/neocomplete.vim/plugin/neocomplete/member.vim	/^let g:loaded_neocomplete_member = 1$/;"	v
s:save_cpo	plugged/neocomplete.vim/plugin/neocomplete/tag.vim	/^let s:save_cpo = &cpo$/;"	v
NeoCompleteTagMakeCache	plugged/neocomplete.vim/plugin/neocomplete/tag.vim	/^      \\ NeoCompleteTagMakeCache$/;"	c
g:loaded_neocomplete_tag	plugged/neocomplete.vim/plugin/neocomplete/tag.vim	/^let g:loaded_neocomplete_tag = 1$/;"	v
g:loaded_neocomplete	plugged/neocomplete.vim/plugin/neocomplete.vim	/^let g:loaded_neocomplete = 1$/;"	v
s:save_cpo	plugged/neocomplete.vim/plugin/neocomplete.vim	/^let s:save_cpo = &cpo$/;"	v
NeoCompleteEnable	plugged/neocomplete.vim/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteEnable$/;"	c
NeoCompleteDisable	plugged/neocomplete.vim/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteDisable$/;"	c
NeoCompleteLock	plugged/neocomplete.vim/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteLock$/;"	c
NeoCompleteUnlock	plugged/neocomplete.vim/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteUnlock$/;"	c
NeoCompleteToggle	plugged/neocomplete.vim/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteToggle$/;"	c
NeoCompleteSetFileType	plugged/neocomplete.vim/plugin/neocomplete.vim	/^command! -nargs=1 -bar -complete=filetype NeoCompleteSetFileType$/;"	c
NeoCompleteClean	plugged/neocomplete.vim/plugin/neocomplete.vim	/^command! -nargs=0 -bar NeoCompleteClean$/;"	c
g:neocomplete#enable_debug	plugged/neocomplete.vim/plugin/neocomplete.vim	/^let g:neocomplete#enable_debug =$/;"	v
neocomplete	plugged/neocomplete.vim/plugin/neocomplete.vim	/^  augroup neocomplete$/;"	a
s:suite	plugged/neocomplete.vim/test/neocomplete.vim	/^let s:suite = themis#suite('parser')$/;"	v
s:assert	plugged/neocomplete.vim/test/neocomplete.vim	/^let s:assert = themis#helper('assert')$/;"	v
suite.escape	plugged/neocomplete.vim/test/neocomplete.vim	/^function! s:suite.escape() abort$/;"	f
suite.sort	plugged/neocomplete.vim/test/neocomplete.vim	/^function! s:suite.sort() abort$/;"	f
start	plugged/neocomplete.vim/test/neocomplete.vim	/^  let start = reltime()$/;"	v
start	plugged/neocomplete.vim/test/neocomplete.vim	/^  let start = reltime()$/;"	v
suite.fuzzy	plugged/neocomplete.vim/test/neocomplete.vim	/^function! s:suite.fuzzy() abort$/;"	f
suite.overlap	plugged/neocomplete.vim/test/neocomplete.vim	/^function! s:suite.overlap() abort$/;"	f
s:save_cpo	plugged/neoinclude.vim/autoload/neocomplete/sources/file_include.vim	/^let s:save_cpo = &cpo$/;"	v
s:source	plugged/neoinclude.vim/autoload/neocomplete/sources/file_include.vim	/^let s:source = {$/;"	v
neocomplete#sources#file_include#define	plugged/neoinclude.vim/autoload/neocomplete/sources/file_include.vim	/^function! neocomplete#sources#file_include#define() abort "{{{$/;"	f
source.get_complete_position	plugged/neoinclude.vim/autoload/neocomplete/sources/file_include.vim	/^function! s:source.get_complete_position(context) abort "{{{$/;"	f
source.gather_candidates	plugged/neoinclude.vim/autoload/neocomplete/sources/file_include.vim	/^function! s:source.gather_candidates(context) abort "{{{$/;"	f
s:save_cpo	plugged/neoinclude.vim/autoload/neoinclude/file_include.vim	/^let s:save_cpo = &cpo$/;"	v
neoinclude#file_include#get_complete_position	plugged/neoinclude.vim/autoload/neoinclude/file_include.vim	/^function! neoinclude#file_include#get_complete_position(input) abort "{{{$/;"	f
neoinclude#file_include#get_include_files	plugged/neoinclude.vim/autoload/neoinclude/file_include.vim	/^function! neoinclude#file_include#get_include_files(input) abort "{{{$/;"	f
get_default_include_files	plugged/neoinclude.vim/autoload/neoinclude/file_include.vim	/^function! s:get_default_include_files(filetype) abort "{{{$/;"	f
s:save_cpo	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^let s:save_cpo = &cpo$/;"	v
neoinclude#include#initialize	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^function! neoinclude#include#initialize() abort "{{{$/;"	f
neoinclude#include#get_include_files	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^function! neoinclude#include#get_include_files(...) abort "{{{$/;"	f
neoinclude#include#get_tag_files	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^function! neoinclude#include#get_tag_files(...) abort "{{{$/;"	f
neoinclude#include#get_current_include_files	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^function! neoinclude#include#get_current_include_files() abort "{{{$/;"	f
check_buffer	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^function! s:check_buffer(bufnr, is_force) abort "{{{$/;"	f
get_buffer_include_files	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^function! s:get_buffer_include_files(bufnr) abort "{{{$/;"	f
get_include_files	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^function! s:get_include_files(nestlevel, lines, filetype, pattern, path, expr) abort "{{{$/;"	f
initialize_include	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^function! s:initialize_include(filename, filetype, ctags, is_force) abort "{{{$/;"	f
neoinclude#include#make_cache	plugged/neoinclude.vim/autoload/neoinclude/include.vim	/^function! neoinclude#include#make_cache(bufname) abort "{{{$/;"	f
s:save_cpo	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:is_windows	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64') || has('win95')$/;"	v
s:is_cygwin	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_mac	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_unix	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^let s:is_unix = has('unix')$/;"	v
neoinclude#util#is_windows	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#is_windows() abort$/;"	f
neoinclude#util#is_cygwin	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#is_cygwin() abort$/;"	f
neoinclude#util#is_mac	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#is_mac() abort$/;"	f
neoinclude#util#uniq	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#uniq(list) abort "{{{$/;"	f
neoinclude#util#glob	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#glob(pattern, ...) abort "{{{$/;"	f
neoinclude#util#substitute_path_separator	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#substitute_path_separator(path) abort "{{{$/;"	f
neoinclude#util#set_default_dictionary	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#set_default_dictionary(variable, keys, value) abort "{{{$/;"	f
neoinclude#util#set_dictionary_helper	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#set_dictionary_helper(variable, keys, pattern) abort "{{{$/;"	f
neoinclude#util#system	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#system(command) abort "{{{$/;"	f
neoinclude#util#async_system	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#async_system(command) abort "{{{$/;"	f
neoinclude#util#has_vimproc	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#has_vimproc() abort "{{{$/;"	f
iconv	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! s:iconv(expr, from, to) abort "{{{$/;"	f
neoinclude#util#get_context_filetype	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#get_context_filetype() abort "{{{$/;"	f
neoinclude#util#get_buffer_config	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#get_buffer_config($/;"	f
neoinclude#util#head_match	plugged/neoinclude.vim/autoload/neoinclude/util.vim	/^function! neoinclude#util#head_match(checkstr, headstr) abort "{{{$/;"	f
s:save_cpo	plugged/neoinclude.vim/autoload/neoinclude.vim	/^let s:save_cpo = &cpo$/;"	v
s:initialized	plugged/neoinclude.vim/autoload/neoinclude.vim	/^let s:initialized = 0$/;"	v
neoinclude#initialize	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#initialize() abort "{{{$/;"	f
neoinclude#set_filetype_paths	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#set_filetype_paths(bufnr, filetype) abort "{{{$/;"	f
neoinclude#get_path	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#get_path(bufnr, filetype) abort "{{{$/;"	f
neoinclude#get_pattern	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#get_pattern(bufnr, filetype) abort "{{{$/;"	f
neoinclude#get_expr	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#get_expr(bufnr, filetype) abort "{{{$/;"	f
neoinclude#get_reverse_expr	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#get_reverse_expr(filetype) abort "{{{$/;"	f
neoinclude#get_exts	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#get_exts(filetype) abort "{{{$/;"	f
neoinclude#get_function	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#get_function(filetype) abort "{{{$/;"	f
neoinclude#get_delimiters	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#get_delimiters(filetype) abort "{{{$/;"	f
neoinclude#get_suffixes	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#get_suffixes(bufnr, filetype) abort "{{{$/;"	f
neoinclude#analyze_vim_include_files	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#analyze_vim_include_files(lines, path) abort "{{{$/;"	f
neoinclude#analyze_ruby_include_files	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! neoinclude#analyze_ruby_include_files(lines, path) abort "{{{$/;"	f
set_python_paths	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! s:set_python_paths(python_bin) abort "{{{$/;"	f
set_cpp_paths	plugged/neoinclude.vim/autoload/neoinclude.vim	/^function! s:set_cpp_paths(bufnr) abort "{{{$/;"	f
s:save_cpo	plugged/neoinclude.vim/autoload/unite/sources/file_include.vim	/^let s:save_cpo = &cpo$/;"	v
unite#sources#file_include#define	plugged/neoinclude.vim/autoload/unite/sources/file_include.vim	/^function! unite#sources#file_include#define() abort$/;"	f
s:source	plugged/neoinclude.vim/autoload/unite/sources/file_include.vim	/^let s:source = {$/;"	v
source.hooks.on_init	plugged/neoinclude.vim/autoload/unite/sources/file_include.vim	/^function! s:source.hooks.on_init(args, context) abort "{{{$/;"	f
source.gather_candidates	plugged/neoinclude.vim/autoload/unite/sources/file_include.vim	/^function! s:source.gather_candidates(args, context) abort "{{{$/;"	f
s:save_cpo	plugged/neoinclude.vim/plugin/neoinclude.vim	/^let s:save_cpo = &cpo$/;"	v
NeoIncludeMakeCache	plugged/neoinclude.vim/plugin/neoinclude.vim	/^command! -complete=buffer -nargs=? NeoIncludeMakeCache$/;"	c
g:loaded_neoinclude	plugged/neoinclude.vim/plugin/neoinclude.vim	/^let g:loaded_neoinclude = 1$/;"	v
Base	plugged/neoinclude.vim/rplugin/python3/deoplete/sources/file_include.py	/^from .base import Base$/;"	i
deoplete	plugged/neoinclude.vim/rplugin/python3/deoplete/sources/file_include.py	/^import deoplete.util$/;"	i
util	plugged/neoinclude.vim/rplugin/python3/deoplete/sources/file_include.py	/^import deoplete.util$/;"	i
Source	plugged/neoinclude.vim/rplugin/python3/deoplete/sources/file_include.py	/^class Source(Base):$/;"	c
__init__	plugged/neoinclude.vim/rplugin/python3/deoplete/sources/file_include.py	/^    def __init__(self, vim):$/;"	m	class:Source
get_complete_position	plugged/neoinclude.vim/rplugin/python3/deoplete/sources/file_include.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
gather_candidates	plugged/neoinclude.vim/rplugin/python3/deoplete/sources/file_include.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
neomake#compat#getbufvar	plugged/neomake/autoload/neomake/compat.vim	/^  function! neomake#compat#getbufvar(buf, key, def) abort$/;"	f
neomake#compat#getbufvar	plugged/neomake/autoload/neomake/compat.vim	/^  function! neomake#compat#getbufvar(buf, key, def) abort$/;"	f
s:nvim_api	plugged/neomake/autoload/neomake/highlights.vim	/^let s:nvim_api = 0$/;"	v
s:highlights	plugged/neomake/autoload/neomake/highlights.vim	/^let s:highlights = {'file': {}, 'project': {}}$/;"	v
s:highlight_types	plugged/neomake/autoload/neomake/highlights.vim	/^let s:highlight_types = {$/;"	v
s:nvim_api	plugged/neomake/autoload/neomake/highlights.vim	/^    let s:nvim_api = 1$/;"	v
InitBufHighlights	plugged/neomake/autoload/neomake/highlights.vim	/^function! s:InitBufHighlights(type, buf) abort$/;"	f
neomake#highlights#ResetFile	plugged/neomake/autoload/neomake/highlights.vim	/^function! neomake#highlights#ResetFile(buf) abort$/;"	f
neomake#highlights#ResetProject	plugged/neomake/autoload/neomake/highlights.vim	/^function! neomake#highlights#ResetProject(buf) abort$/;"	f
neomake#highlights#AddHighlight	plugged/neomake/autoload/neomake/highlights.vim	/^function! neomake#highlights#AddHighlight(entry, type) abort$/;"	f
neomake#highlights#ShowHighlights	plugged/neomake/autoload/neomake/highlights.vim	/^function! neomake#highlights#ShowHighlights() abort$/;"	f
neomake#highlights#DefineHighlights	plugged/neomake/autoload/neomake/highlights.vim	/^function! neomake#highlights#DefineHighlights() abort$/;"	f
ResetHighlights	plugged/neomake/autoload/neomake/highlights.vim	/^function! s:ResetHighlights() abort$/;"	f
neomake#makers#cabal#cabal	plugged/neomake/autoload/neomake/makers/cabal.vim	/^function! neomake#makers#cabal#cabal()$/;"	f
neomake#makers#cargo#cargo	plugged/neomake/autoload/neomake/makers/cargo.vim	/^function! neomake#makers#cargo#cargo() abort$/;"	f
s:rustup_has_nightly	plugged/neomake/autoload/neomake/makers/clippy.vim	/^let s:rustup_has_nightly = -1$/;"	v
neomake#makers#clippy#clippy	plugged/neomake/autoload/neomake/makers/clippy.vim	/^function! neomake#makers#clippy#clippy() abort$/;"	f
neomake#makers#ft#ada#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/ada.vim	/^function! neomake#makers#ft#ada#EnabledMakers()$/;"	f
neomake#makers#ft#ada#gcc	plugged/neomake/autoload/neomake/makers/ft/ada.vim	/^function! neomake#makers#ft#ada#gcc()$/;"	f
neomake#makers#ft#angular#SupersetOf	plugged/neomake/autoload/neomake/makers/ft/angular.vim	/^function! neomake#makers#ft#angular#SupersetOf()$/;"	f
neomake#makers#ft#angular#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/angular.vim	/^function! neomake#makers#ft#angular#EnabledMakers()$/;"	f
neomake#makers#ft#angular#jshint	plugged/neomake/autoload/neomake/makers/ft/angular.vim	/^function! neomake#makers#ft#angular#jshint()$/;"	f
neomake#makers#ft#angular#eslint	plugged/neomake/autoload/neomake/makers/ft/angular.vim	/^function! neomake#makers#ft#angular#eslint()$/;"	f
neomake#makers#ft#angular#eslint_d	plugged/neomake/autoload/neomake/makers/ft/angular.vim	/^function! neomake#makers#ft#angular#eslint_d()$/;"	f
neomake#makers#ft#angular#jscs	plugged/neomake/autoload/neomake/makers/ft/angular.vim	/^function! neomake#makers#ft#angular#jscs()$/;"	f
neomake#makers#ft#ansible#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/ansible.vim	/^function! neomake#makers#ft#ansible#EnabledMakers() abort$/;"	f
neomake#makers#ft#ansible#ansiblelint	plugged/neomake/autoload/neomake/makers/ft/ansible.vim	/^function! neomake#makers#ft#ansible#ansiblelint() abort$/;"	f
neomake#makers#ft#apiblueprint#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/apiblueprint.vim	/^function! neomake#makers#ft#apiblueprint#EnabledMakers() abort$/;"	f
neomake#makers#ft#apiblueprint#drafter	plugged/neomake/autoload/neomake/makers/ft/apiblueprint.vim	/^function! neomake#makers#ft#apiblueprint#drafter() abort$/;"	f
neomake#makers#ft#applescript#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/applescript.vim	/^function! neomake#makers#ft#applescript#EnabledMakers()$/;"	f
neomake#makers#ft#applescript#osacompile	plugged/neomake/autoload/neomake/makers/ft/applescript.vim	/^function! neomake#makers#ft#applescript#osacompile()$/;"	f
neomake#makers#ft#c#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/c.vim	/^function! neomake#makers#ft#c#EnabledMakers()$/;"	f
neomake#makers#ft#c#clang	plugged/neomake/autoload/neomake/makers/ft/c.vim	/^function! neomake#makers#ft#c#clang()$/;"	f
neomake#makers#ft#c#clangcheck	plugged/neomake/autoload/neomake/makers/ft/c.vim	/^function! neomake#makers#ft#c#clangcheck()$/;"	f
neomake#makers#ft#c#gcc	plugged/neomake/autoload/neomake/makers/ft/c.vim	/^function! neomake#makers#ft#c#gcc()$/;"	f
neomake#makers#ft#c#clangtidy	plugged/neomake/autoload/neomake/makers/ft/c.vim	/^function! neomake#makers#ft#c#clangtidy()$/;"	f
neomake#makers#ft#c#checkpatch	plugged/neomake/autoload/neomake/makers/ft/c.vim	/^function! neomake#makers#ft#c#checkpatch()$/;"	f
neomake#makers#ft#cf3#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/cf3.vim	/^function! neomake#makers#ft#cf3#EnabledMakers() abort$/;"	f
neomake#makers#ft#cf3#cfpromises	plugged/neomake/autoload/neomake/makers/ft/cf3.vim	/^function! neomake#makers#ft#cf3#cfpromises() abort$/;"	f
neomake#makers#ft#coffee#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/coffee.vim	/^function! neomake#makers#ft#coffee#EnabledMakers()$/;"	f
neomake#makers#ft#coffee#coffeelint	plugged/neomake/autoload/neomake/makers/ft/coffee.vim	/^function! neomake#makers#ft#coffee#coffeelint()$/;"	f
neomake#makers#ft#cpp#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/cpp.vim	/^function! neomake#makers#ft#cpp#EnabledMakers() abort$/;"	f
neomake#makers#ft#cpp#clang	plugged/neomake/autoload/neomake/makers/ft/cpp.vim	/^function! neomake#makers#ft#cpp#clang() abort$/;"	f
neomake#makers#ft#cpp#gcc	plugged/neomake/autoload/neomake/makers/ft/cpp.vim	/^function! neomake#makers#ft#cpp#gcc() abort$/;"	f
neomake#makers#ft#cpp#clangtidy	plugged/neomake/autoload/neomake/makers/ft/cpp.vim	/^function! neomake#makers#ft#cpp#clangtidy() abort$/;"	f
neomake#makers#ft#cpp#clangcheck	plugged/neomake/autoload/neomake/makers/ft/cpp.vim	/^function! neomake#makers#ft#cpp#clangcheck() abort$/;"	f
neomake#makers#ft#crystal#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/crystal.vim	/^function! neomake#makers#ft#crystal#EnabledMakers() abort$/;"	f
neomake#makers#ft#crystal#crystal	plugged/neomake/autoload/neomake/makers/ft/crystal.vim	/^function! neomake#makers#ft#crystal#crystal() abort$/;"	f
neomake#makers#ft#cs#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/cs.vim	/^function! neomake#makers#ft#cs#EnabledMakers()$/;"	f
neomake#makers#ft#cs#mcs	plugged/neomake/autoload/neomake/makers/ft/cs.vim	/^function! neomake#makers#ft#cs#mcs()$/;"	f
neomake#makers#ft#css#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/css.vim	/^function! neomake#makers#ft#css#EnabledMakers() abort$/;"	f
neomake#makers#ft#css#csslint	plugged/neomake/autoload/neomake/makers/ft/css.vim	/^function! neomake#makers#ft#css#csslint() abort$/;"	f
neomake#makers#ft#css#stylelint	plugged/neomake/autoload/neomake/makers/ft/css.vim	/^function! neomake#makers#ft#css#stylelint() abort$/;"	f
neomake#makers#ft#cuda#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/cuda.vim	/^function! neomake#makers#ft#cuda#EnabledMakers()$/;"	f
neomake#makers#ft#cuda#nvcc	plugged/neomake/autoload/neomake/makers/ft/cuda.vim	/^function! neomake#makers#ft#cuda#nvcc()$/;"	f
neomake#makers#ft#d#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/d.vim	/^function! neomake#makers#ft#d#EnabledMakers()$/;"	f
findDubRoot	plugged/neomake/autoload/neomake/makers/ft/d.vim	/^function! s:findDubRoot()$/;"	f
UpdateDub	plugged/neomake/autoload/neomake/makers/ft/d.vim	/^function! s:UpdateDub()$/;"	f
DmdStyleMaker	plugged/neomake/autoload/neomake/makers/ft/d.vim	/^function! s:DmdStyleMaker(args)$/;"	f
neomake#makers#ft#d#dmd	plugged/neomake/autoload/neomake/makers/ft/d.vim	/^function! neomake#makers#ft#d#dmd()$/;"	f
neomake#makers#ft#d#ldmd	plugged/neomake/autoload/neomake/makers/ft/d.vim	/^function! neomake#makers#ft#d#ldmd()$/;"	f
neomake#makers#ft#d#gdmd	plugged/neomake/autoload/neomake/makers/ft/d.vim	/^function! neomake#makers#ft#d#gdmd()$/;"	f
neomake#makers#ft#elixir#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/elixir.vim	/^function! neomake#makers#ft#elixir#EnabledMakers() abort$/;"	f
neomake#makers#ft#elixir#elixir	plugged/neomake/autoload/neomake/makers/ft/elixir.vim	/^function! neomake#makers#ft#elixir#elixir() abort$/;"	f
neomake#makers#ft#elixir#credo	plugged/neomake/autoload/neomake/makers/ft/elixir.vim	/^function! neomake#makers#ft#elixir#credo() abort$/;"	f
neomake#makers#ft#elixir#mix	plugged/neomake/autoload/neomake/makers/ft/elixir.vim	/^function! neomake#makers#ft#elixir#mix() abort$/;"	f
neomake#makers#ft#elixir#dogma	plugged/neomake/autoload/neomake/makers/ft/elixir.vim	/^function! neomake#makers#ft#elixir#dogma() abort$/;"	f
neomake#makers#ft#erlang#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/erlang.vim	/^function! neomake#makers#ft#erlang#EnabledMakers()$/;"	f
neomake#makers#ft#erlang#erlc	plugged/neomake/autoload/neomake/makers/ft/erlang.vim	/^function! neomake#makers#ft#erlang#erlc()$/;"	f
neomake#makers#ft#fish#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/fish.vim	/^function! neomake#makers#ft#fish#EnabledMakers() abort$/;"	f
neomake#makers#ft#fish#fish	plugged/neomake/autoload/neomake/makers/ft/fish.vim	/^function! neomake#makers#ft#fish#fish() abort$/;"	f
neomake#makers#ft#fortran#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/fortran.vim	/^function! neomake#makers#ft#fortran#EnabledMakers() abort$/;"	f
neomake#makers#ft#fortran#ifort	plugged/neomake/autoload/neomake/makers/ft/fortran.vim	/^function! neomake#makers#ft#fortran#ifort() abort$/;"	f
neomake#makers#ft#fortran#gfortran	plugged/neomake/autoload/neomake/makers/ft/fortran.vim	/^function! neomake#makers#ft#fortran#gfortran() abort$/;"	f
neomake#makers#ft#go#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/go.vim	/^function! neomake#makers#ft#go#EnabledMakers()$/;"	f
neomake#makers#ft#go#go	plugged/neomake/autoload/neomake/makers/ft/go.vim	/^function! neomake#makers#ft#go#go()$/;"	f
neomake#makers#ft#go#golint	plugged/neomake/autoload/neomake/makers/ft/go.vim	/^function! neomake#makers#ft#go#golint()$/;"	f
neomake#makers#ft#go#govet	plugged/neomake/autoload/neomake/makers/ft/go.vim	/^function! neomake#makers#ft#go#govet()$/;"	f
neomake#makers#ft#haml#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/haml.vim	/^function! neomake#makers#ft#haml#EnabledMakers()$/;"	f
neomake#makers#ft#haml#hamllint	plugged/neomake/autoload/neomake/makers/ft/haml.vim	/^function! neomake#makers#ft#haml#hamllint()$/;"	f
neomake#makers#ft#haskell#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! neomake#makers#ft#haskell#EnabledMakers() abort$/;"	f
neomake#makers#ft#haskell#hdevtools	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! neomake#makers#ft#haskell#hdevtools() abort$/;"	f
neomake#makers#ft#haskell#ghcmod	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! neomake#makers#ft#haskell#ghcmod() abort$/;"	f
neomake#makers#ft#haskell#HlintEntryProcess	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! neomake#makers#ft#haskell#HlintEntryProcess(entry) abort$/;"	f
neomake#makers#ft#haskell#hlint	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! neomake#makers#ft#haskell#hlint() abort$/;"	f
neomake#makers#ft#haskell#liquid	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! neomake#makers#ft#haskell#liquid() abort$/;"	f
CheckStackMakerAsync	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! s:CheckStackMakerAsync(job_id, data, event) dict abort$/;"	f
TryStack	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! s:TryStack(maker) abort$/;"	f
CleanUpSpaceAndBackticks	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! s:CleanUpSpaceAndBackticks() abort$/;"	f
neomake#makers#ft#html#tidy	plugged/neomake/autoload/neomake/makers/ft/html.vim	/^function! neomake#makers#ft#html#tidy() abort$/;"	f
neomake#makers#ft#html#htmlhint	plugged/neomake/autoload/neomake/makers/ft/html.vim	/^function! neomake#makers#ft#html#htmlhint() abort$/;"	f
neomake#makers#ft#html#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/html.vim	/^function! neomake#makers#ft#html#EnabledMakers() abort$/;"	f
neomake#makers#ft#idris#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/idris.vim	/^function! neomake#makers#ft#idris#EnabledMakers() abort$/;"	f
neomake#makers#ft#idris#postprocess	plugged/neomake/autoload/neomake/makers/ft/idris.vim	/^function! neomake#makers#ft#idris#postprocess(entry) abort$/;"	f
neomake#makers#ft#idris#idris	plugged/neomake/autoload/neomake/makers/ft/idris.vim	/^function! neomake#makers#ft#idris#idris() abort$/;"	f
neomake#makers#ft#jade#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/jade.vim	/^function! neomake#makers#ft#jade#EnabledMakers()$/;"	f
neomake#makers#ft#jade#jadelint	plugged/neomake/autoload/neomake/makers/ft/jade.vim	/^function! neomake#makers#ft#jade#jadelint()$/;"	f
neomake#makers#ft#jasmine#SupersetOf	plugged/neomake/autoload/neomake/makers/ft/jasmine.vim	/^function! neomake#makers#ft#jasmine#SupersetOf()$/;"	f
neomake#makers#ft#jasmine#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/jasmine.vim	/^function! neomake#makers#ft#jasmine#EnabledMakers()$/;"	f
neomake#makers#ft#jasmine#jshint	plugged/neomake/autoload/neomake/makers/ft/jasmine.vim	/^function! neomake#makers#ft#jasmine#jshint()$/;"	f
neomake#makers#ft#jasmine#eslint	plugged/neomake/autoload/neomake/makers/ft/jasmine.vim	/^function! neomake#makers#ft#jasmine#eslint()$/;"	f
neomake#makers#ft#jasmine#eslint_d	plugged/neomake/autoload/neomake/makers/ft/jasmine.vim	/^function! neomake#makers#ft#jasmine#eslint_d()$/;"	f
neomake#makers#ft#jasmine#jscs	plugged/neomake/autoload/neomake/makers/ft/jasmine.vim	/^function! neomake#makers#ft#jasmine#jscs()$/;"	f
os	plugged/neomake/autoload/neomake/makers/ft/java/classpath.py	/^import os$/;"	i
ReadClasspathFile	plugged/neomake/autoload/neomake/makers/ft/java/classpath.py	/^def ReadClasspathFile(fn):$/;"	f
s:save_cpo	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let s:save_cpo = &cpoptions$/;"	v
g:neomake_java_javac_maker	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_maker = 1$/;"	v
g:neomake_java_javac_maven_pom_tags	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_maven_pom_tags = ['build', 'properties']$/;"	v
g:neomake_java_javac_maven_pom_properties	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_maven_pom_properties = {}$/;"	v
s:is_windows	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let s:is_windows = has('win32') || has('win64') || has('win16') || has('dos32') || has('dos16')$/;"	v
s:fsep	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^    let s:fsep = ';'$/;"	v
s:psep	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^    let s:psep = '\\'$/;"	v
s:fsep	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^    let s:fsep = ':'$/;"	v
s:psep	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^    let s:psep = '\/'$/;"	v
g:neomake_java_checker_home	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_checker_home = fnamemodify(expand('<sfile>'), ':p:h:gs?\\\\?\/?')$/;"	v
g:neomake_java_javac_executable	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_executable =$/;"	v
g:neomake_java_maven_executable	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_maven_executable =$/;"	v
g:neomake_java_gradle_executable	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_gradle_executable =$/;"	v
g:neomake_java_checkstyle_executable	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_checkstyle_executable =$/;"	v
g:neomake_java_javac_options	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_options =$/;"	v
g:neomake_java_maven_options	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_maven_options =$/;"	v
g:neomake_java_javac_classpath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_classpath =$/;"	v
g:neomake_java_javac_outputdir	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_outputdir =$/;"	v
g:neomake_java_checkstyle_xml	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_checkstyle_xml =$/;"	v
g:neomake_java_javac_delete_output	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_delete_output =$/;"	v
g:neomake_java_javac_autoload_maven_classpath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_autoload_maven_classpath =$/;"	v
g:neomake_java_javac_autoload_gradle_classpath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_autoload_gradle_classpath =$/;"	v
g:neomake_java_javac_autoload_eclipse_classpath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_autoload_eclipse_classpath =$/;"	v
g:neomake_java_javac_maven_pom_ftime	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_maven_pom_ftime =$/;"	v
g:neomake_java_javac_maven_pom_classpath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_maven_pom_classpath =$/;"	v
g:neomake_java_javac_gradle_ftime	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_gradle_ftime =$/;"	v
g:neomake_java_javac_gradle_classpath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let g:neomake_java_javac_gradle_classpath =$/;"	v
s:has_maven	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let s:has_maven = executable(expand(g:neomake_java_maven_executable, 1))$/;"	v
s:has_gradle	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^let s:has_gradle = executable(expand(g:neomake_java_gradle_executable, 1))$/;"	v
tmpdir	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:tmpdir() abort$/;"	f
ClassSep	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:ClassSep() abort$/;"	f
shescape	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:shescape(string) abort$/;"	f
AddToClasspath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:AddToClasspath(classpath, path) abort$/;"	f
ReadClassPathFile	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:ReadClassPathFile(classpathFile) abort$/;"	f
neomake#makers#ft#java#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! neomake#makers#ft#java#EnabledMakers() abort$/;"	f
neomake#makers#ft#java#javac	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! neomake#makers#ft#java#javac() abort$/;"	f
neomake#makers#ft#java#checkstyle	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! neomake#makers#ft#java#checkstyle() abort$/;"	f
findFileInParent	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:findFileInParent(what, where) abort " {{{2$/;"	f
GetMavenProperties	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:GetMavenProperties() abort " {{{2$/;"	f
GetMavenClasspath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:GetMavenClasspath() abort " {{{2$/;"	f
MavenOutputDirectory	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:MavenOutputDirectory() abort " {{{2$/;"	f
GradleOutputDirectory	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:GradleOutputDirectory() abort$/;"	f
GetGradleClasspath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:GetGradleClasspath() abort$/;"	f
GlobPathList	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:GlobPathList(path, pattern, suf) abort$/;"	f
neomake#makers#ft#javascript#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#EnabledMakers() abort$/;"	f
neomake#makers#ft#javascript#gjslint	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#gjslint() abort$/;"	f
neomake#makers#ft#javascript#jshint	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#jshint() abort$/;"	f
neomake#makers#ft#javascript#jscs	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#jscs() abort$/;"	f
neomake#makers#ft#javascript#eslint	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#eslint() abort$/;"	f
neomake#makers#ft#javascript#eslint_d	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#eslint_d() abort$/;"	f
neomake#makers#ft#javascript#standard	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#standard() abort$/;"	f
neomake#makers#ft#javascript#semistandard	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#semistandard() abort$/;"	f
neomake#makers#ft#javascript#flow	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#flow() abort$/;"	f
neomake#makers#ft#javascript#FlowProcess	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#FlowProcess(entry) abort$/;"	f
neomake#makers#ft#javascript#xo	plugged/neomake/autoload/neomake/makers/ft/javascript.vim	/^function! neomake#makers#ft#javascript#xo() abort$/;"	f
neomake#makers#ft#json#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/json.vim	/^function! neomake#makers#ft#json#EnabledMakers() abort$/;"	f
neomake#makers#ft#json#jsonlintpy	plugged/neomake/autoload/neomake/makers/ft/json.vim	/^function! neomake#makers#ft#json#jsonlintpy() abort$/;"	f
neomake#makers#ft#json#jsonlint	plugged/neomake/autoload/neomake/makers/ft/json.vim	/^function! neomake#makers#ft#json#jsonlint() abort$/;"	f
neomake#makers#ft#jsx#SupersetOf	plugged/neomake/autoload/neomake/makers/ft/jsx.vim	/^function! neomake#makers#ft#jsx#SupersetOf()$/;"	f
neomake#makers#ft#jsx#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/jsx.vim	/^function! neomake#makers#ft#jsx#EnabledMakers()$/;"	f
neomake#makers#ft#jsx#jshint	plugged/neomake/autoload/neomake/makers/ft/jsx.vim	/^function! neomake#makers#ft#jsx#jshint()$/;"	f
neomake#makers#ft#jsx#jsxhint	plugged/neomake/autoload/neomake/makers/ft/jsx.vim	/^function! neomake#makers#ft#jsx#jsxhint()$/;"	f
neomake#makers#ft#jsx#eslint	plugged/neomake/autoload/neomake/makers/ft/jsx.vim	/^function! neomake#makers#ft#jsx#eslint()$/;"	f
neomake#makers#ft#jsx#eslint_d	plugged/neomake/autoload/neomake/makers/ft/jsx.vim	/^function! neomake#makers#ft#jsx#eslint_d()$/;"	f
neomake#makers#ft#julia#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/julia.vim	/^function! neomake#makers#ft#julia#EnabledMakers() abort$/;"	f
neomake#makers#ft#julia#lint	plugged/neomake/autoload/neomake/makers/ft/julia.vim	/^function! neomake#makers#ft#julia#lint() abort$/;"	f
neomake#makers#ft#less#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/less.vim	/^function! neomake#makers#ft#less#EnabledMakers()$/;"	f
neomake#makers#ft#less#lessc	plugged/neomake/autoload/neomake/makers/ft/less.vim	/^function! neomake#makers#ft#less#lessc()$/;"	f
neomake#makers#ft#less#stylelint	plugged/neomake/autoload/neomake/makers/ft/less.vim	/^function! neomake#makers#ft#less#stylelint() abort$/;"	f
neomake#makers#ft#lua#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/lua.vim	/^function! neomake#makers#ft#lua#EnabledMakers() abort$/;"	f
neomake#makers#ft#lua#luacheck	plugged/neomake/autoload/neomake/makers/ft/lua.vim	/^function! neomake#makers#ft#lua#luacheck() abort$/;"	f
neomake#makers#ft#lua#luac	plugged/neomake/autoload/neomake/makers/ft/lua.vim	/^function! neomake#makers#ft#lua#luac() abort$/;"	f
neomake#makers#ft#mail#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/mail.vim	/^function! neomake#makers#ft#mail#EnabledMakers() abort$/;"	f
neomake#makers#ft#mail#proselint	plugged/neomake/autoload/neomake/makers/ft/mail.vim	/^function! neomake#makers#ft#mail#proselint() abort$/;"	f
neomake#makers#ft#markdown#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/markdown.vim	/^function! neomake#makers#ft#markdown#EnabledMakers() abort$/;"	f
neomake#makers#ft#markdown#mdl	plugged/neomake/autoload/neomake/makers/ft/markdown.vim	/^function! neomake#makers#ft#markdown#mdl() abort$/;"	f
neomake#makers#ft#markdown#markdownlint	plugged/neomake/autoload/neomake/makers/ft/markdown.vim	/^function! neomake#makers#ft#markdown#markdownlint() abort$/;"	f
neomake#makers#ft#markdown#alex	plugged/neomake/autoload/neomake/makers/ft/markdown.vim	/^function! neomake#makers#ft#markdown#alex() abort$/;"	f
neomake#makers#ft#markdown#proselint	plugged/neomake/autoload/neomake/makers/ft/markdown.vim	/^function! neomake#makers#ft#markdown#proselint() abort$/;"	f
neomake#makers#ft#markdown#writegood	plugged/neomake/autoload/neomake/makers/ft/markdown.vim	/^function! neomake#makers#ft#markdown#writegood() abort$/;"	f
neomake#makers#ft#moon#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/moon.vim	/^function! neomake#makers#ft#moon#EnabledMakers()$/;"	f
neomake#makers#ft#moon#moonc	plugged/neomake/autoload/neomake/makers/ft/moon.vim	/^function! neomake#makers#ft#moon#moonc()$/;"	f
neomake#makers#ft#nim#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/nim.vim	/^function! neomake#makers#ft#nim#EnabledMakers()$/;"	f
neomake#makers#ft#nim#nim	plugged/neomake/autoload/neomake/makers/ft/nim.vim	/^function! neomake#makers#ft#nim#nim()$/;"	f
neomake#makers#ft#nix#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/nix.vim	/^function! neomake#makers#ft#nix#EnabledMakers()$/;"	f
neomake#makers#ft#nix#nix_instantiate	plugged/neomake/autoload/neomake/makers/ft/nix.vim	/^function! neomake#makers#ft#nix#nix_instantiate()$/;"	f
neomake#makers#ft#node#SupersetOf	plugged/neomake/autoload/neomake/makers/ft/node.vim	/^function! neomake#makers#ft#node#SupersetOf()$/;"	f
neomake#makers#ft#node#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/node.vim	/^function! neomake#makers#ft#node#EnabledMakers()$/;"	f
neomake#makers#ft#node#jshint	plugged/neomake/autoload/neomake/makers/ft/node.vim	/^function! neomake#makers#ft#node#jshint()$/;"	f
neomake#makers#ft#node#eslint	plugged/neomake/autoload/neomake/makers/ft/node.vim	/^function! neomake#makers#ft#node#eslint()$/;"	f
neomake#makers#ft#node#eslint_d	plugged/neomake/autoload/neomake/makers/ft/node.vim	/^function! neomake#makers#ft#node#eslint_d()$/;"	f
neomake#makers#ft#node#jscs	plugged/neomake/autoload/neomake/makers/ft/node.vim	/^function! neomake#makers#ft#node#jscs()$/;"	f
neomake#makers#ft#pandoc#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/pandoc.vim	/^function! neomake#makers#ft#pandoc#EnabledMakers() abort$/;"	f
neomake#makers#ft#pandoc#mdl	plugged/neomake/autoload/neomake/makers/ft/pandoc.vim	/^function! neomake#makers#ft#pandoc#mdl() abort$/;"	f
neomake#makers#ft#pandoc#markdownlint	plugged/neomake/autoload/neomake/makers/ft/pandoc.vim	/^function! neomake#makers#ft#pandoc#markdownlint() abort$/;"	f
neomake#makers#ft#pandoc#proselint	plugged/neomake/autoload/neomake/makers/ft/pandoc.vim	/^function! neomake#makers#ft#pandoc#proselint() abort$/;"	f
neomake#makers#ft#pandoc#writegood	plugged/neomake/autoload/neomake/makers/ft/pandoc.vim	/^function! neomake#makers#ft#pandoc#writegood() abort$/;"	f
neomake#makers#ft#perl#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/perl.vim	/^function! neomake#makers#ft#perl#EnabledMakers() abort$/;"	f
neomake#makers#ft#perl#perlcritic	plugged/neomake/autoload/neomake/makers/ft/perl.vim	/^function! neomake#makers#ft#perl#perlcritic() abort$/;"	f
neomake#makers#ft#perl#perl	plugged/neomake/autoload/neomake/makers/ft/perl.vim	/^function! neomake#makers#ft#perl#perl() abort$/;"	f
neomake#makers#ft#perl#PerlEntryProcess	plugged/neomake/autoload/neomake/makers/ft/perl.vim	/^function! neomake#makers#ft#perl#PerlEntryProcess(entry) abort$/;"	f
neomake#makers#ft#php#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/php.vim	/^function! neomake#makers#ft#php#EnabledMakers() abort$/;"	f
neomake#makers#ft#php#php	plugged/neomake/autoload/neomake/makers/ft/php.vim	/^function! neomake#makers#ft#php#php() abort$/;"	f
neomake#makers#ft#php#PhpEntryProcess	plugged/neomake/autoload/neomake/makers/ft/php.vim	/^function! neomake#makers#ft#php#PhpEntryProcess(entry) abort$/;"	f
neomake#makers#ft#php#phpcs	plugged/neomake/autoload/neomake/makers/ft/php.vim	/^function! neomake#makers#ft#php#phpcs() abort$/;"	f
neomake#makers#ft#php#phpmd	plugged/neomake/autoload/neomake/makers/ft/php.vim	/^function! neomake#makers#ft#php#phpmd() abort$/;"	f
neomake#makers#ft#pug#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/pug.vim	/^function! neomake#makers#ft#pug#EnabledMakers()$/;"	f
neomake#makers#ft#pug#puglint	plugged/neomake/autoload/neomake/makers/ft/pug.vim	/^function! neomake#makers#ft#pug#puglint()$/;"	f
neomake#makers#ft#puppet#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/puppet.vim	/^function! neomake#makers#ft#puppet#EnabledMakers()$/;"	f
neomake#makers#ft#puppet#puppetlint	plugged/neomake/autoload/neomake/makers/ft/puppet.vim	/^function! neomake#makers#ft#puppet#puppetlint()$/;"	f
neomake#makers#ft#puppet#puppet	plugged/neomake/autoload/neomake/makers/ft/puppet.vim	/^function! neomake#makers#ft#puppet#puppet()$/;"	f
neomake#makers#ft#python#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#EnabledMakers() abort$/;"	f
neomake#makers#ft#python#pylint	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#pylint() abort$/;"	f
neomake#makers#ft#python#PylintEntryProcess	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#PylintEntryProcess(entry) abort$/;"	f
neomake#makers#ft#python#flake8	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#flake8() abort$/;"	f
neomake#makers#ft#python#Flake8EntryProcess	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#Flake8EntryProcess(entry) abort$/;"	f
neomake#makers#ft#python#pyflakes	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#pyflakes() abort$/;"	f
neomake#makers#ft#python#pep8	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#pep8() abort$/;"	f
neomake#makers#ft#python#Pep8EntryProcess	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#Pep8EntryProcess(entry) abort$/;"	f
neomake#makers#ft#python#pydocstyle	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#pydocstyle() abort$/;"	f
neomake#makers#ft#python#pep257	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#pep257() abort$/;"	f
neomake#makers#ft#python#PylamaEntryProcess	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#PylamaEntryProcess(entry) abort$/;"	f
neomake#makers#ft#python#pylama	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#pylama() abort$/;"	f
neomake#makers#ft#python#python	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#python() abort$/;"	f
neomake#makers#ft#python#frosted	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#frosted() abort$/;"	f
neomake#makers#ft#python#vulture	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#vulture() abort$/;"	f
neomake#makers#ft#python#mypy	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#mypy() abort$/;"	f
neomake#makers#ft#python#py3kwarn	plugged/neomake/autoload/neomake/makers/ft/python.vim	/^function! neomake#makers#ft#python#py3kwarn() abort$/;"	f
neomake#makers#ft#racket#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/racket.vim	/^function! neomake#makers#ft#racket#EnabledMakers()$/;"	f
neomake#makers#ft#racket#raco	plugged/neomake/autoload/neomake/makers/ft/racket.vim	/^function! neomake#makers#ft#racket#raco()$/;"	f
neomake#makers#ft#rst#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/rst.vim	/^function! neomake#makers#ft#rst#EnabledMakers()$/;"	f
neomake#makers#ft#rst#rstlint	plugged/neomake/autoload/neomake/makers/ft/rst.vim	/^function! neomake#makers#ft#rst#rstlint()$/;"	f
neomake#makers#ft#rst#rstcheck	plugged/neomake/autoload/neomake/makers/ft/rst.vim	/^function! neomake#makers#ft#rst#rstcheck()$/;"	f
neomake#makers#ft#ruby#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/ruby.vim	/^function! neomake#makers#ft#ruby#EnabledMakers()$/;"	f
neomake#makers#ft#ruby#rubocop	plugged/neomake/autoload/neomake/makers/ft/ruby.vim	/^function! neomake#makers#ft#ruby#rubocop()$/;"	f
neomake#makers#ft#ruby#rubylint	plugged/neomake/autoload/neomake/makers/ft/ruby.vim	/^function! neomake#makers#ft#ruby#rubylint()$/;"	f
neomake#makers#ft#ruby#RubocopEntryProcess	plugged/neomake/autoload/neomake/makers/ft/ruby.vim	/^function! neomake#makers#ft#ruby#RubocopEntryProcess(entry)$/;"	f
neomake#makers#ft#ruby#mri	plugged/neomake/autoload/neomake/makers/ft/ruby.vim	/^function! neomake#makers#ft#ruby#mri()$/;"	f
neomake#makers#ft#ruby#jruby	plugged/neomake/autoload/neomake/makers/ft/ruby.vim	/^function! neomake#makers#ft#ruby#jruby()$/;"	f
neomake#makers#ft#ruby#reek	plugged/neomake/autoload/neomake/makers/ft/ruby.vim	/^function! neomake#makers#ft#ruby#reek()$/;"	f
neomake#makers#ft#rust#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/rust.vim	/^function! neomake#makers#ft#rust#EnabledMakers() abort$/;"	f
neomake#makers#ft#rust#rustc	plugged/neomake/autoload/neomake/makers/ft/rust.vim	/^function! neomake#makers#ft#rust#rustc() abort$/;"	f
neomake#makers#ft#scala#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/scala.vim	/^function! neomake#makers#ft#scala#EnabledMakers()$/;"	f
neomake#makers#ft#scala#fsc	plugged/neomake/autoload/neomake/makers/ft/scala.vim	/^function! neomake#makers#ft#scala#fsc()$/;"	f
neomake#makers#ft#scala#scalac	plugged/neomake/autoload/neomake/makers/ft/scala.vim	/^function! neomake#makers#ft#scala#scalac()$/;"	f
neomake#makers#ft#scala#scalastyle	plugged/neomake/autoload/neomake/makers/ft/scala.vim	/^function! neomake#makers#ft#scala#scalastyle()$/;"	f
neomake#makers#ft#scss#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/scss.vim	/^function! neomake#makers#ft#scss#EnabledMakers() abort$/;"	f
neomake#makers#ft#scss#sasslint	plugged/neomake/autoload/neomake/makers/ft/scss.vim	/^function! neomake#makers#ft#scss#sasslint() abort$/;"	f
neomake#makers#ft#scss#scsslint	plugged/neomake/autoload/neomake/makers/ft/scss.vim	/^function! neomake#makers#ft#scss#scsslint() abort$/;"	f
neomake#makers#ft#scss#stylelint	plugged/neomake/autoload/neomake/makers/ft/scss.vim	/^function! neomake#makers#ft#scss#stylelint() abort$/;"	f
neomake#makers#ft#sh#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/sh.vim	/^function! neomake#makers#ft#sh#EnabledMakers() abort$/;"	f
neomake#makers#ft#sh#shellcheck	plugged/neomake/autoload/neomake/makers/ft/sh.vim	/^function! neomake#makers#ft#sh#shellcheck() abort$/;"	f
neomake#makers#ft#sh#checkbashisms	plugged/neomake/autoload/neomake/makers/ft/sh.vim	/^function! neomake#makers#ft#sh#checkbashisms() abort$/;"	f
neomake#makers#ft#sh#sh	plugged/neomake/autoload/neomake/makers/ft/sh.vim	/^function! neomake#makers#ft#sh#sh() abort$/;"	f
neomake#makers#ft#slim#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/slim.vim	/^function! neomake#makers#ft#slim#EnabledMakers()$/;"	f
neomake#makers#ft#slim#slimlint	plugged/neomake/autoload/neomake/makers/ft/slim.vim	/^function! neomake#makers#ft#slim#slimlint()$/;"	f
neomake#makers#ft#sml#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/sml.vim	/^function! neomake#makers#ft#sml#EnabledMakers()$/;"	f
neomake#makers#ft#sml#smlnj	plugged/neomake/autoload/neomake/makers/ft/sml.vim	/^function! neomake#makers#ft#sml#smlnj()$/;"	f
neomake#makers#ft#spec#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/spec.vim	/^function! neomake#makers#ft#spec#EnabledMakers() abort$/;"	f
neomake#makers#ft#spec#rpmlint	plugged/neomake/autoload/neomake/makers/ft/spec.vim	/^function! neomake#makers#ft#spec#rpmlint() abort$/;"	f
neomake#makers#ft#sql#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/sql.vim	/^function! neomake#makers#ft#sql#EnabledMakers()$/;"	f
neomake#makers#ft#sql#sqlint	plugged/neomake/autoload/neomake/makers/ft/sql.vim	/^function! neomake#makers#ft#sql#sqlint()$/;"	f
neomake#makers#ft#stylus#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/stylus.vim	/^function! neomake#makers#ft#stylus#EnabledMakers()$/;"	f
neomake#makers#ft#stylus#stylint	plugged/neomake/autoload/neomake/makers/ft/stylus.vim	/^function! neomake#makers#ft#stylus#stylint()$/;"	f
neomake#makers#ft#swift#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/swift.vim	/^function! neomake#makers#ft#swift#EnabledMakers() abort$/;"	f
neomake#makers#ft#swift#swiftc	plugged/neomake/autoload/neomake/makers/ft/swift.vim	/^function! neomake#makers#ft#swift#swiftc() abort$/;"	f
neomake#makers#ft#tcl#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/tcl.vim	/^function! neomake#makers#ft#tcl#EnabledMakers()$/;"	f
neomake#makers#ft#tcl#nagelfar	plugged/neomake/autoload/neomake/makers/ft/tcl.vim	/^function! neomake#makers#ft#tcl#nagelfar()$/;"	f
neomake#makers#ft#tex#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/tex.vim	/^function! neomake#makers#ft#tex#EnabledMakers() abort$/;"	f
neomake#makers#ft#tex#chktex	plugged/neomake/autoload/neomake/makers/ft/tex.vim	/^function! neomake#makers#ft#tex#chktex()$/;"	f
neomake#makers#ft#tex#lacheck	plugged/neomake/autoload/neomake/makers/ft/tex.vim	/^function! neomake#makers#ft#tex#lacheck()$/;"	f
neomake#makers#ft#tex#rubber	plugged/neomake/autoload/neomake/makers/ft/tex.vim	/^function! neomake#makers#ft#tex#rubber()$/;"	f
neomake#makers#ft#tex#rubberinfo	plugged/neomake/autoload/neomake/makers/ft/tex.vim	/^function! neomake#makers#ft#tex#rubberinfo()$/;"	f
neomake#makers#ft#tex#latexrun	plugged/neomake/autoload/neomake/makers/ft/tex.vim	/^function! neomake#makers#ft#tex#latexrun()$/;"	f
neomake#makers#ft#tex#proselint	plugged/neomake/autoload/neomake/makers/ft/tex.vim	/^function! neomake#makers#ft#tex#proselint() abort$/;"	f
neomake#makers#ft#text#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/text.vim	/^function! neomake#makers#ft#text#EnabledMakers() abort$/;"	f
neomake#makers#ft#text#proselint	plugged/neomake/autoload/neomake/makers/ft/text.vim	/^function! neomake#makers#ft#text#proselint() abort$/;"	f
neomake#makers#ft#text#PostprocessWritegood	plugged/neomake/autoload/neomake/makers/ft/text.vim	/^function! neomake#makers#ft#text#PostprocessWritegood(entry) abort$/;"	f
neomake#makers#ft#text#writegood	plugged/neomake/autoload/neomake/makers/ft/text.vim	/^function! neomake#makers#ft#text#writegood() abort$/;"	f
neomake#makers#ft#tsx#SupersetOf	plugged/neomake/autoload/neomake/makers/ft/tsx.vim	/^function! neomake#makers#ft#tsx#SupersetOf()$/;"	f
neomake#makers#ft#tsx#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/tsx.vim	/^function! neomake#makers#ft#tsx#EnabledMakers()$/;"	f
neomake#makers#ft#tsx#tsc	plugged/neomake/autoload/neomake/makers/ft/tsx.vim	/^function! neomake#makers#ft#tsx#tsc()$/;"	f
neomake#makers#ft#tsx#tslint	plugged/neomake/autoload/neomake/makers/ft/tsx.vim	/^function! neomake#makers#ft#tsx#tslint()$/;"	f
neomake#makers#ft#typescript#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/typescript.vim	/^function! neomake#makers#ft#typescript#EnabledMakers() abort$/;"	f
neomake#makers#ft#typescript#tsc	plugged/neomake/autoload/neomake/makers/ft/typescript.vim	/^function! neomake#makers#ft#typescript#tsc() abort$/;"	f
neomake#makers#ft#typescript#tslint	plugged/neomake/autoload/neomake/makers/ft/typescript.vim	/^function! neomake#makers#ft#typescript#tslint() abort$/;"	f
neomake#makers#ft#verilog#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/verilog.vim	/^function! neomake#makers#ft#verilog#EnabledMakers() abort$/;"	f
neomake#makers#ft#verilog#iverilog	plugged/neomake/autoload/neomake/makers/ft/verilog.vim	/^function! neomake#makers#ft#verilog#iverilog() abort$/;"	f
neomake#makers#ft#vhdl#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/vhdl.vim	/^function! neomake#makers#ft#vhdl#EnabledMakers()$/;"	f
neomake#makers#ft#vhdl#ghdl	plugged/neomake/autoload/neomake/makers/ft/vhdl.vim	/^function! neomake#makers#ft#vhdl#ghdl()$/;"	f
neomake#makers#ft#vim#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/vim.vim	/^function! neomake#makers#ft#vim#EnabledMakers() abort$/;"	f
neomake#makers#ft#vim#vint	plugged/neomake/autoload/neomake/makers/ft/vim.vim	/^function! neomake#makers#ft#vim#vint() abort$/;"	f
neomake#makers#ft#vim#vimlint	plugged/neomake/autoload/neomake/makers/ft/vim.vim	/^function! neomake#makers#ft#vim#vimlint() abort$/;"	f
neomake#makers#ft#vue#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/vue.vim	/^function! neomake#makers#ft#vue#EnabledMakers() abort$/;"	f
neomake#makers#ft#vue#eslint	plugged/neomake/autoload/neomake/makers/ft/vue.vim	/^function! neomake#makers#ft#vue#eslint() abort$/;"	f
neomake#makers#ft#vue#eslint_d	plugged/neomake/autoload/neomake/makers/ft/vue.vim	/^function! neomake#makers#ft#vue#eslint_d() abort$/;"	f
neomake#makers#ft#vue#standard	plugged/neomake/autoload/neomake/makers/ft/vue.vim	/^function! neomake#makers#ft#vue#standard() abort$/;"	f
neomake#makers#ft#vue#semistandard	plugged/neomake/autoload/neomake/makers/ft/vue.vim	/^function! neomake#makers#ft#vue#semistandard() abort$/;"	f
neomake#makers#ft#yaml#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/yaml.vim	/^function! neomake#makers#ft#yaml#EnabledMakers()$/;"	f
neomake#makers#ft#yaml#yamllint	plugged/neomake/autoload/neomake/makers/ft/yaml.vim	/^function! neomake#makers#ft#yaml#yamllint()$/;"	f
neomake#makers#ft#zsh#EnabledMakers	plugged/neomake/autoload/neomake/makers/ft/zsh.vim	/^function! neomake#makers#ft#zsh#EnabledMakers() abort$/;"	f
neomake#makers#ft#zsh#shellcheck	plugged/neomake/autoload/neomake/makers/ft/zsh.vim	/^function! neomake#makers#ft#zsh#shellcheck() abort$/;"	f
neomake#makers#ft#zsh#zsh	plugged/neomake/autoload/neomake/makers/ft/zsh.vim	/^function! neomake#makers#ft#zsh#zsh() abort$/;"	f
neomake#makers#gradle#gradle	plugged/neomake/autoload/neomake/makers/gradle.vim	/^function! neomake#makers#gradle#gradle()$/;"	f
neomake#makers#mvn#mvn	plugged/neomake/autoload/neomake/makers/mvn.vim	/^function! neomake#makers#mvn#mvn()$/;"	f
s:sign_queue	plugged/neomake/autoload/neomake/signs.vim	/^let s:sign_queue = {$/;"	v
s:last_placed_signs	plugged/neomake/autoload/neomake/signs.vim	/^let s:last_placed_signs = {$/;"	v
s:placed_signs	plugged/neomake/autoload/neomake/signs.vim	/^let s:placed_signs = {$/;"	v
s:neomake_sign_id	plugged/neomake/autoload/neomake/signs.vim	/^let s:neomake_sign_id = {$/;"	v
neomake#signs#ResetProject	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#ResetProject() abort$/;"	f
neomake#signs#ResetFile	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#ResetFile(bufnr) abort$/;"	f
neomake#signs#Reset	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#Reset(bufnr, type) abort$/;"	f
neomake#signs#RegisterSign	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#RegisterSign(entry, type) abort$/;"	f
neomake#signs#PlaceSign	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#PlaceSign(entry, type) abort$/;"	f
neomake#signs#CleanAllOldSigns	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#CleanAllOldSigns(type) abort$/;"	f
neomake#signs#CleanOldSigns	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#CleanOldSigns(bufnr, type) abort$/;"	f
neomake#signs#PlaceVisibleSigns	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#PlaceVisibleSigns() abort$/;"	f
neomake#signs#RedefineSign	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#RedefineSign(name, opts) abort$/;"	f
neomake#signs#RedefineErrorSign	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#RedefineErrorSign(...) abort$/;"	f
neomake#signs#RedefineWarningSign	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#RedefineWarningSign(...) abort$/;"	f
neomake#signs#RedefineMessageSign	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#RedefineMessageSign(...) abort$/;"	f
neomake#signs#RedefineInfoSign	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#RedefineInfoSign(...) abort$/;"	f
neomake#signs#HlexistsAndIsNotCleared	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#HlexistsAndIsNotCleared(group) abort$/;"	f
neomake#signs#DefineHighlights	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#DefineHighlights() abort$/;"	f
neomake#signs#DefineSigns	plugged/neomake/autoload/neomake/signs.vim	/^function! neomake#signs#DefineSigns() abort$/;"	f
s:qflist_counts	plugged/neomake/autoload/neomake/statusline.vim	/^let s:qflist_counts = {}$/;"	v
s:loclist_counts	plugged/neomake/autoload/neomake/statusline.vim	/^let s:loclist_counts = {}$/;"	v
setCount	plugged/neomake/autoload/neomake/statusline.vim	/^function! s:setCount(counts, item, buf) abort$/;"	f
neomake#statusline#ResetCountsForBuf	plugged/neomake/autoload/neomake/statusline.vim	/^function! neomake#statusline#ResetCountsForBuf(...) abort$/;"	f
neomake#statusline#ResetCountsForProject	plugged/neomake/autoload/neomake/statusline.vim	/^function! neomake#statusline#ResetCountsForProject(...) abort$/;"	f
neomake#statusline#ResetCounts	plugged/neomake/autoload/neomake/statusline.vim	/^function! neomake#statusline#ResetCounts() abort$/;"	f
neomake#statusline#AddLoclistCount	plugged/neomake/autoload/neomake/statusline.vim	/^function! neomake#statusline#AddLoclistCount(buf, item) abort$/;"	f
neomake#statusline#AddQflistCount	plugged/neomake/autoload/neomake/statusline.vim	/^function! neomake#statusline#AddQflistCount(item) abort$/;"	f
neomake#statusline#LoclistCounts	plugged/neomake/autoload/neomake/statusline.vim	/^function! neomake#statusline#LoclistCounts(...) abort$/;"	f
neomake#statusline#QflistCounts	plugged/neomake/autoload/neomake/statusline.vim	/^function! neomake#statusline#QflistCounts() abort$/;"	f
showErrWarning	plugged/neomake/autoload/neomake/statusline.vim	/^function! s:showErrWarning(counts, prefix) abort$/;"	f
neomake#statusline#LoclistStatus	plugged/neomake/autoload/neomake/statusline.vim	/^function! neomake#statusline#LoclistStatus(...) abort$/;"	f
neomake#statusline#QflistStatus	plugged/neomake/autoload/neomake/statusline.vim	/^function! neomake#statusline#QflistStatus(...) abort$/;"	f
s:level_to_name	plugged/neomake/autoload/neomake/utils.vim	/^let s:level_to_name = {$/;"	v
s:reltime_start	plugged/neomake/autoload/neomake/utils.vim	/^    let s:reltime_start = reltime()$/;"	v
timestr	plugged/neomake/autoload/neomake/utils.vim	/^function! s:timestr() abort$/;"	f
s:unset	plugged/neomake/autoload/neomake/utils.vim	/^let s:unset = {}$/;"	v
neomake#utils#LogMessage	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#LogMessage(level, msg, ...) abort$/;"	f
neomake#utils#ErrorMessage	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#ErrorMessage(...) abort$/;"	f
neomake#utils#QuietMessage	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#QuietMessage(...) abort$/;"	f
neomake#utils#LoudMessage	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#LoudMessage(...) abort$/;"	f
neomake#utils#DebugMessage	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#DebugMessage(...) abort$/;"	f
neomake#utils#Stringify	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#Stringify(obj) abort$/;"	f
neomake#utils#DebugObject	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#DebugObject(msg, obj) abort$/;"	f
neomake#utils#wstrpart	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#wstrpart(mb_string, start, len) abort$/;"	f
neomake#utils#WideMessage	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#WideMessage(msg) abort " {{{2$/;"	f
neomake#utils#IsRunningWindows	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#IsRunningWindows() abort$/;"	f
neomake#utils#DevNull	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#DevNull() abort$/;"	f
neomake#utils#Exists	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#Exists(exe) abort$/;"	f
neomake#utils#Random	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#Random() abort$/;"	f
s:command_maker	plugged/neomake/autoload/neomake/utils.vim	/^let s:command_maker = {$/;"	v
command_maker.fn	plugged/neomake/autoload/neomake/utils.vim	/^function! s:command_maker.fn(jobinfo) dict abort$/;"	f
neomake#utils#MakerFromCommand	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#MakerFromCommand(command) abort$/;"	f
s:available_makers	plugged/neomake/autoload/neomake/utils.vim	/^let s:available_makers = {}$/;"	v
neomake#utils#MakerIsAvailable	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#MakerIsAvailable(ft, maker_name) abort$/;"	f
neomake#utils#AvailableMakers	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#AvailableMakers(ft, makers) abort$/;"	f
neomake#utils#GetSupersetOf	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#GetSupersetOf(ft) abort$/;"	f
neomake#utils#GetSortedFiletypes	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#GetSortedFiletypes(ft) abort$/;"	f
neomake#utils#GetSetting	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#GetSetting(key, maker, default, fts, bufnr) abort$/;"	f
neomake#utils#GetHighlight	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#GetHighlight(group, what) abort$/;"	f
neomake#utils#ReverseSynIDattr	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#ReverseSynIDattr(attr) abort$/;"	f
neomake#utils#CompressWhitespace	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#CompressWhitespace(entry) abort$/;"	f
neomake#utils#redir	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#redir(cmd) abort$/;"	f
neomake#utils#ExpandArgs	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#ExpandArgs(args) abort$/;"	f
neomake#utils#hook	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#hook(event, context, ...) abort$/;"	f
neomake#utils#diff_dict	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#diff_dict(d1, d2) abort$/;"	f
neomake#utils#sort_by_col	plugged/neomake/autoload/neomake/utils.vim	/^function! neomake#utils#sort_by_col(a, b) abort$/;"	f
s:make_id	plugged/neomake/autoload/neomake.vim	/^let s:make_id = 0$/;"	v
s:job_id	plugged/neomake/autoload/neomake.vim	/^let s:job_id = 1$/;"	v
s:jobs	plugged/neomake/autoload/neomake.vim	/^let s:jobs = {}$/;"	v
s:make_options	plugged/neomake/autoload/neomake.vim	/^let s:make_options = {}$/;"	v
s:jobs_by_maker	plugged/neomake/autoload/neomake.vim	/^let s:jobs_by_maker = {}$/;"	v
s:current_errors	plugged/neomake/autoload/neomake.vim	/^let s:current_errors = {$/;"	v
s:need_errors_cleaning	plugged/neomake/autoload/neomake.vim	/^let s:need_errors_cleaning = {$/;"	v
s:maker_defaults	plugged/neomake/autoload/neomake.vim	/^let s:maker_defaults = {$/;"	v
s:project_job_output	plugged/neomake/autoload/neomake.vim	/^let s:project_job_output = {}$/;"	v
s:buffer_job_output	plugged/neomake/autoload/neomake.vim	/^let s:buffer_job_output = {}$/;"	v
neomake#has_async_support	plugged/neomake/autoload/neomake.vim	/^function! neomake#has_async_support() abort$/;"	f
sort_jobs	plugged/neomake/autoload/neomake.vim	/^function! s:sort_jobs(a, b) abort$/;"	f
neomake#GetJobs	plugged/neomake/autoload/neomake.vim	/^function! neomake#GetJobs(...) abort$/;"	f
neomake#GetJob	plugged/neomake/autoload/neomake.vim	/^function! neomake#GetJob(job_id) abort$/;"	f
neomake#GetStatus	plugged/neomake/autoload/neomake.vim	/^function! neomake#GetStatus() abort$/;"	f
neomake#ListJobs	plugged/neomake/autoload/neomake.vim	/^function! neomake#ListJobs() abort$/;"	f
neomake#CancelJob	plugged/neomake/autoload/neomake.vim	/^function! neomake#CancelJob(job_id, ...) abort$/;"	f
neomake#CancelJobs	plugged/neomake/autoload/neomake.vim	/^function! neomake#CancelJobs(bang) abort$/;"	f
gettabwinvar	plugged/neomake/autoload/neomake.vim	/^function! s:gettabwinvar(t, w, v, d) abort$/;"	f
AddMakeInfoForCurrentWin	plugged/neomake/autoload/neomake.vim	/^function! s:AddMakeInfoForCurrentWin(job_id) abort$/;"	f
MakeJob	plugged/neomake/autoload/neomake.vim	/^function! s:MakeJob(make_id, options) abort$/;"	f
s:maker_base	plugged/neomake/autoload/neomake.vim	/^let s:maker_base = {}$/;"	v
maker_base.get_argv	plugged/neomake/autoload/neomake.vim	/^function! s:maker_base.get_argv(...) abort dict$/;"	f
neomake#GetMaker	plugged/neomake/autoload/neomake.vim	/^function! neomake#GetMaker(name_or_maker, ...) abort$/;"	f
neomake#GetMakers	plugged/neomake/autoload/neomake.vim	/^function! neomake#GetMakers(ft) abort$/;"	f
neomake#GetProjectMakers	plugged/neomake/autoload/neomake.vim	/^function! neomake#GetProjectMakers() abort$/;"	f
neomake#GetEnabledMakers	plugged/neomake/autoload/neomake.vim	/^function! neomake#GetEnabledMakers(...) abort$/;"	f
HandleLoclistQflistDisplay	plugged/neomake/autoload/neomake.vim	/^function! s:HandleLoclistQflistDisplay(file_mode) abort$/;"	f
Make	plugged/neomake/autoload/neomake.vim	/^function! s:Make(options) abort$/;"	f
AddExprCallback	plugged/neomake/autoload/neomake.vim	/^function! s:AddExprCallback(jobinfo, prev_index) abort$/;"	f
CleanJobinfo	plugged/neomake/autoload/neomake.vim	/^function! s:CleanJobinfo(jobinfo) abort$/;"	f
CanProcessJobOutput	plugged/neomake/autoload/neomake.vim	/^function! s:CanProcessJobOutput() abort$/;"	f
ProcessJobOutput	plugged/neomake/autoload/neomake.vim	/^function! s:ProcessJobOutput(jobinfo, lines, source) abort$/;"	f
neomake#ProcessCurrentWindow	plugged/neomake/autoload/neomake.vim	/^function! neomake#ProcessCurrentWindow() abort$/;"	f
ProcessPendingOutput	plugged/neomake/autoload/neomake.vim	/^function! s:ProcessPendingOutput(outputs) abort$/;"	f
neomake#ProcessPendingOutput	plugged/neomake/autoload/neomake.vim	/^function! neomake#ProcessPendingOutput() abort$/;"	f
GetTabWinForMakeId	plugged/neomake/autoload/neomake.vim	/^function! s:GetTabWinForMakeId(make_id) abort$/;"	f
RegisterJobOutput	plugged/neomake/autoload/neomake.vim	/^function! s:RegisterJobOutput(jobinfo, lines, source) abort$/;"	f
vim_output_handler	plugged/neomake/autoload/neomake.vim	/^function! s:vim_output_handler(channel, output, event_type) abort$/;"	f
vim_output_handler_stdout	plugged/neomake/autoload/neomake.vim	/^function! s:vim_output_handler_stdout(channel, output) abort$/;"	f
vim_output_handler_stderr	plugged/neomake/autoload/neomake.vim	/^function! s:vim_output_handler_stderr(channel, output) abort$/;"	f
vim_exit_handler	plugged/neomake/autoload/neomake.vim	/^function! s:vim_exit_handler(channel) abort$/;"	f
has_pending_output	plugged/neomake/autoload/neomake.vim	/^function! s:has_pending_output(jobinfo) abort$/;"	f
s:nvim_output_handler_queue	plugged/neomake/autoload/neomake.vim	/^let s:nvim_output_handler_queue = []$/;"	v
nvim_output_handler	plugged/neomake/autoload/neomake.vim	/^function! s:nvim_output_handler(job_id, data, event_type) abort$/;"	f
nvim_output_handler_cb	plugged/neomake/autoload/neomake.vim	/^function! s:nvim_output_handler_cb(timer) abort$/;"	f
exit_handler	plugged/neomake/autoload/neomake.vim	/^function! s:exit_handler(job_id, data, event_type) abort$/;"	f
output_handler	plugged/neomake/autoload/neomake.vim	/^function! s:output_handler(job_id, data, event_type) abort$/;"	f
handle_next_makers	plugged/neomake/autoload/neomake.vim	/^function! s:handle_next_makers(jobinfo, status) abort$/;"	f
neomake#CleanOldProjectSignsAndErrors	plugged/neomake/autoload/neomake.vim	/^function! neomake#CleanOldProjectSignsAndErrors() abort$/;"	f
neomake#CleanOldFileSignsAndErrors	plugged/neomake/autoload/neomake.vim	/^function! neomake#CleanOldFileSignsAndErrors(...) abort$/;"	f
neomake#EchoCurrentError	plugged/neomake/autoload/neomake.vim	/^function! neomake#EchoCurrentError() abort$/;"	f
s:last_cursormoved	plugged/neomake/autoload/neomake.vim	/^let s:last_cursormoved = [0, 0]$/;"	v
neomake#CursorMoved	plugged/neomake/autoload/neomake.vim	/^function! neomake#CursorMoved() abort$/;"	f
cursormoved_delayed_cb	plugged/neomake/autoload/neomake.vim	/^function! s:cursormoved_delayed_cb(...) abort$/;"	f
neomake#CursorMovedDelayed	plugged/neomake/autoload/neomake.vim	/^function! neomake#CursorMovedDelayed() abort$/;"	f
neomake#CompleteMakers	plugged/neomake/autoload/neomake.vim	/^function! neomake#CompleteMakers(ArgLead, CmdLine, ...) abort$/;"	f
neomake#CompleteJobs	plugged/neomake/autoload/neomake.vim	/^function! neomake#CompleteJobs(...) abort$/;"	f
neomake#Make	plugged/neomake/autoload/neomake.vim	/^function! neomake#Make(file_mode, enabled_makers, ...) abort$/;"	f
neomake#ShCommand	plugged/neomake/autoload/neomake.vim	/^function! neomake#ShCommand(bang, sh_command, ...) abort$/;"	f
neomake#Sh	plugged/neomake/autoload/neomake.vim	/^function! neomake#Sh(sh_command, ...) abort$/;"	f
display_maker_info	plugged/neomake/autoload/neomake.vim	/^function! s:display_maker_info(...) abort$/;"	f
neomake#DisplayInfo	plugged/neomake/autoload/neomake.vim	/^function! neomake#DisplayInfo() abort$/;"	f
CDPATH	plugged/neomake/Makefile	/^CDPATH:=$/;"	m
SHELL	plugged/neomake/Makefile	/^SHELL:=\/bin\/bash -o pipefail$/;"	m
VADER	plugged/neomake/Makefile	/^VADER:=Vader!$/;"	m
VADER_OPTIONS	plugged/neomake/Makefile	/^VADER_OPTIONS?=$/;"	m
VADER_ARGS	plugged/neomake/Makefile	/^VADER_ARGS=tests\/neomake.vader $(VADER_OPTIONS)$/;"	m
VIM_ARGS	plugged/neomake/Makefile	/^VIM_ARGS='+$(VADER) $(VADER_ARGS)'$/;"	m
DEFAULT_VADER_DIR	plugged/neomake/Makefile	/^DEFAULT_VADER_DIR:=tests\/vim\/plugins\/vader$/;"	m
TESTS_VADER_DIR	plugged/neomake/Makefile	/^export TESTS_VADER_DIR:=$(abspath $(firstword $(wildcard tests\/vim\/plugins\/vader.override) $(DEFAULT_VADER_DIR)))$/;"	m
-depth	plugged/neomake/Makefile	/^	git clone --depth=1 https:\/\/github.com\/junegunn\/vader.vim $@$/;"	m
TEST_VIMRC	plugged/neomake/Makefile	/^TEST_VIMRC:=tests\/vim\/vimrc$/;"	m
TEST_VIM_PREFIX	plugged/neomake/Makefile	/^TEST_VIM_PREFIX:=SHELL=\/bin\/bash$/;"	m
VADER_OPTIONS	plugged/neomake/Makefile	/^testx: export VADER_OPTIONS=-x$/;"	m
TEST_VIM	plugged/neomake/Makefile	/^testnvim: TEST_VIM:=nvim --headless$/;"	m
TEST_VIM	plugged/neomake/Makefile	/^testvim: TEST_VIM:=vim -X$/;"	m
_SED_HIGHLIGHT_ERRORS	plugged/neomake/Makefile	/^_SED_HIGHLIGHT_ERRORS:=| sed -e 's\/^ \\+([ [:digit:]]\\+\\\/[[:digit:]]\\+) \\[[ [:alpha:]]\\+\\] (X).*\/[31m[1m\\0[0m\/' \\$/;"	m
_REDIR_STDOUT	plugged/neomake/Makefile	/^_REDIR_STDOUT:=2>&1 <\/dev\/null >\/dev\/null $(_SED_HIGHLIGHT_ERRORS) >&2$/;"	m
VADER	plugged/neomake/Makefile	/^_run_interactive: VADER:=Vader$/;"	m
_REDIR_STDOUT	plugged/neomake/Makefile	/^_run_interactive: _REDIR_STDOUT:=$/;"	m
TEST_VIM	plugged/neomake/Makefile	/^testvim_interactive: TEST_VIM:=vim -X$/;"	m
TEST_VIM	plugged/neomake/Makefile	/^testnvim_interactive: TEST_VIM:=nvim$/;"	m
VIM_ARGS	plugged/neomake/Makefile	/^runvim: VIM_ARGS:=$/;"	m
VIM_ARGS	plugged/neomake/Makefile	/^runnvim: VIM_ARGS:=$/;"	m
TEST_TARGET	plugged/neomake/Makefile	/^TEST_TARGET:=test$/;"	m
TESTS	plugged/neomake/Makefile	/^TESTS:=$(wildcard tests\/*.vader tests\/*\/*.vader)$/;"	m
uniq	plugged/neomake/Makefile	/^uniq = $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1)))$/;"	m
_TESTS_REL_AND_ABS	plugged/neomake/Makefile	/^_TESTS_REL_AND_ABS:=$(call uniq,$(abspath $(TESTS)) $(TESTS))$/;"	m
LINT_FILES	plugged/neomake/Makefile	/^LINT_FILES:=.\/plugin .\/autoload$/;"	m
VIMHELPLINT_VIM	plugged/neomake/Makefile	/^vimhelplint: VIMHELPLINT_VIM:=vim$/;"	m
DOCKER_RUN	plugged/neomake/Makefile	/^docker_make: DOCKER_RUN=make -C \/testplugin $(DOCKER_MAKE_TARGET)$/;"	m
DOCKER_IMAGE	plugged/neomake/Makefile	/^DOCKER_IMAGE:=neomake\/vims-for-tests$/;"	m
DOCKER_STREAMS	plugged/neomake/Makefile	/^DOCKER_STREAMS:=-ti$/;"	m
DOCKER	plugged/neomake/Makefile	/^DOCKER=docker run $(DOCKER_STREAMS) --rm \\$/;"	m
DOCKER_VIMS	plugged/neomake/Makefile	/^DOCKER_VIMS:=vim73 vim74-trusty vim74-xenial vim8069 vim-master$/;"	m
_DOCKER_VIM_TARGETS	plugged/neomake/Makefile	/^_DOCKER_VIM_TARGETS:=$(addprefix docker_test-,$(DOCKER_VIMS))$/;"	m
DOCKER_VIM	plugged/neomake/Makefile	/^docker_test: DOCKER_VIM:=vim-master$/;"	m
DOCKER_STREAMS	plugged/neomake/Makefile	/^docker_test: DOCKER_STREAMS:=-a stderr$/;"	m
DOCKER_MAKE_TARGET	plugged/neomake/Makefile	/^docker_test: DOCKER_MAKE_TARGET:=testvim TEST_VIM=\/vim-build\/bin\/$(DOCKER_VIM) VIM_ARGS="$(VIM_ARGS)"$/;"	m
TESTS_VADER_DIR	plugged/neomake/Makefile	/^docker_run: TESTS_VADER_DIR:=$(DEFAULT_VADER_DIR)$/;"	m
g:loaded_neomake	plugged/neomake/plugin/neomake.vim	/^let g:loaded_neomake = 1$/;"	v
Neomake	plugged/neomake/plugin/neomake.vim	/^      \\ Neomake call neomake#Make(<bang>1, [<f-args>])$/;"	c
NeomakeProject	plugged/neomake/plugin/neomake.vim	/^      \\ NeomakeProject Neomake! <args>$/;"	c
NeomakeFile	plugged/neomake/plugin/neomake.vim	/^      \\ NeomakeFile Neomake <args>$/;"	c
NeomakeSh	plugged/neomake/plugin/neomake.vim	/^      \\ NeomakeSh call neomake#ShCommand(<bang>0, <q-args>)$/;"	c
NeomakeListJobs	plugged/neomake/plugin/neomake.vim	/^command! NeomakeListJobs call neomake#ListJobs()$/;"	c
NeomakeCancelJob	plugged/neomake/plugin/neomake.vim	/^      \\ NeomakeCancelJob call neomake#CancelJob(<q-args>, <bang>0)$/;"	c
NeomakeCancelJobs	plugged/neomake/plugin/neomake.vim	/^command! -bang NeomakeCancelJobs call neomake#CancelJobs(<bang>0)$/;"	c
NeomakeInfo	plugged/neomake/plugin/neomake.vim	/^command! -bar NeomakeInfo call neomake#DisplayInfo()$/;"	c
neomake	plugged/neomake/plugin/neomake.vim	/^augroup neomake$/;"	a
g:neomake_place_signs	plugged/neomake/plugin/neomake.vim	/^  let g:neomake_place_signs = get(g:, 'neomake_place_signs', 1)$/;"	v
g:neomake_place_signs	plugged/neomake/plugin/neomake.vim	/^  let g:neomake_place_signs = 0$/;"	v
g:neopairs#enable	plugged/neopairs.vim/autoload/neopairs.vim	/^let g:neopairs#enable =$/;"	v
g:neopairs#pairs	plugged/neopairs.vim/autoload/neopairs.vim	/^let g:neopairs#pairs =$/;"	v
g:neopairs#_pairs	plugged/neopairs.vim/autoload/neopairs.vim	/^let g:neopairs#_pairs =$/;"	v
neopairs#_complete_done	plugged/neopairs.vim/autoload/neopairs.vim	/^function! neopairs#_complete_done() abort "{{{$/;"	f
get_input	plugged/neopairs.vim/autoload/neopairs.vim	/^function! s:get_input(event) abort "{{{$/;"	f
g:loaded_neopairs	plugged/neopairs.vim/plugin/neopairs.vim	/^let g:loaded_neopairs = 1$/;"	v
neopairs	plugged/neopairs.vim/plugin/neopairs.vim	/^augroup neopairs$/;"	a
print_function	plugged/pyclewn/build_vimball.py	/^from __future__ import print_function$/;"	i
sys	plugged/pyclewn/build_vimball.py	/^import sys$/;"	i
os	plugged/pyclewn/build_vimball.py	/^import os$/;"	i
string	plugged/pyclewn/build_vimball.py	/^import string$/;"	i
tempfile	plugged/pyclewn/build_vimball.py	/^import tempfile$/;"	i
subprocess	plugged/pyclewn/build_vimball.py	/^import subprocess$/;"	i
shutil	plugged/pyclewn/build_vimball.py	/^import shutil$/;"	i
importlib	plugged/pyclewn/build_vimball.py	/^import importlib$/;"	i
__version__	plugged/pyclewn/build_vimball.py	/^from lib.clewn import __version__$/;"	i
DEBUGGERS	plugged/pyclewn/build_vimball.py	/^DEBUGGERS = ('simple', 'gdb', 'pdb')$/;"	v
RUNTIME	plugged/pyclewn/build_vimball.py	/^RUNTIME = [$/;"	v
keymap_files	plugged/pyclewn/build_vimball.py	/^def keymap_files():$/;"	f
vimball	plugged/pyclewn/build_vimball.py	/^def vimball():$/;"	f
main	plugged/pyclewn/build_vimball.py	/^def main():$/;"	f
absolute_import	plugged/pyclewn/foobar.py	/^from __future__ import absolute_import$/;"	i
division	plugged/pyclewn/foobar.py	/^from __future__ import division$/;"	i
print_function	plugged/pyclewn/foobar.py	/^from __future__ import print_function$/;"	i
sys	plugged/pyclewn/foobar.py	/^import sys$/;"	i
testsuite	plugged/pyclewn/foobar.py	/^import testsuite.foo as foo$/;"	i
foo	plugged/pyclewn/foobar.py	/^import testsuite.foo as foo$/;"	i
main	plugged/pyclewn/foobar.py	/^def main():$/;"	f
clewn	plugged/pyclewn/foobar.py	/^    import clewn.vim as vim; vim.pdb(testrun=True,$/;"	i
vim	plugged/pyclewn/foobar.py	/^    import clewn.vim as vim; vim.pdb(testrun=True,$/;"	i
vim	plugged/pyclewn/foobar.py	/^    import clewn.vim as vim; vim.pdb(testrun=True,$/;"	i
pdb	plugged/pyclewn/foobar.py	/^    import clewn.vim as vim; vim.pdb(testrun=True,$/;"	i
testrun	plugged/pyclewn/foobar.py	/^    import clewn.vim as vim; vim.pdb(testrun=True,$/;"	i
True	plugged/pyclewn/foobar.py	/^    import clewn.vim as vim; vim.pdb(testrun=True,$/;"	i
next_line	plugged/pyclewn/foobar.py	/^    next_line = 1$/;"	v
absolute_import	plugged/pyclewn/lib/clewn/__init__.py	/^from __future__ import absolute_import$/;"	i
division	plugged/pyclewn/lib/clewn/__init__.py	/^from __future__ import division$/;"	i
print_function	plugged/pyclewn/lib/clewn/__init__.py	/^from __future__ import print_function$/;"	i
unicode_literals	plugged/pyclewn/lib/clewn/__init__.py	/^from __future__ import unicode_literals$/;"	i
sys	plugged/pyclewn/lib/clewn/__init__.py	/^import sys$/;"	i
os	plugged/pyclewn/lib/clewn/__init__.py	/^import os$/;"	i
__version__	plugged/pyclewn/lib/clewn/__init__.py	/^__version__ = '2.2'$/;"	v
PY26	plugged/pyclewn/lib/clewn/__init__.py	/^PY26 = (sys.version_info < (2, 7))$/;"	v
PY3	plugged/pyclewn/lib/clewn/__init__.py	/^PY3 = (sys.version_info >= (3,))$/;"	v
PY32	plugged/pyclewn/lib/clewn/__init__.py	/^PY32 = (sys.version_info >= (3, 2))$/;"	v
PY33	plugged/pyclewn/lib/clewn/__init__.py	/^PY33 = (sys.version_info >= (3, 3))$/;"	v
PY34	plugged/pyclewn/lib/clewn/__init__.py	/^PY34 = (sys.version_info >= (3, 4))$/;"	v
text_type	plugged/pyclewn/lib/clewn/__init__.py	/^text_type = str if PY3 else unicode$/;"	v
ClewnError	plugged/pyclewn/lib/clewn/__init__.py	/^class ClewnError(Exception):$/;"	c
get_vimball	plugged/pyclewn/lib/clewn/__init__.py	/^def get_vimball():$/;"	f
get_data	plugged/pyclewn/lib/clewn/__init__.py	/^    from pkgutil import get_data$/;"	i
absolute_import	plugged/pyclewn/lib/clewn/__main__.py	/^from __future__ import absolute_import$/;"	i
division	plugged/pyclewn/lib/clewn/__main__.py	/^from __future__ import division$/;"	i
print_function	plugged/pyclewn/lib/clewn/__main__.py	/^from __future__ import print_function$/;"	i
unicode_literals	plugged/pyclewn/lib/clewn/__main__.py	/^from __future__ import unicode_literals$/;"	i
vim	plugged/pyclewn/lib/clewn/__main__.py	/^from . import vim$/;"	i
absolute_import	plugged/pyclewn/lib/clewn/buffer.py	/^from __future__ import absolute_import$/;"	i
division	plugged/pyclewn/lib/clewn/buffer.py	/^from __future__ import division$/;"	i
print_function	plugged/pyclewn/lib/clewn/buffer.py	/^from __future__ import print_function$/;"	i
unicode_literals	plugged/pyclewn/lib/clewn/buffer.py	/^from __future__ import unicode_literals$/;"	i
os	plugged/pyclewn/lib/clewn/buffer.py	/^import os$/;"	i
re	plugged/pyclewn/lib/clewn/buffer.py	/^import re$/;"	i
text_type	plugged/pyclewn/lib/clewn/buffer.py	/^from . import text_type, misc$/;"	i
misc	plugged/pyclewn/lib/clewn/buffer.py	/^from . import text_type, misc$/;"	i
FRAME_ANNO_ID	plugged/pyclewn/lib/clewn/buffer.py	/^FRAME_ANNO_ID = 'frame'$/;"	v
RE_CLEWNAME	plugged/pyclewn/lib/clewn/buffer.py	/^              r'# RE: a valid ClewnBuffer name'$/;"	v
re_clewname	plugged/pyclewn/lib/clewn/buffer.py	/^re_clewname = re.compile(RE_CLEWNAME, re.VERBOSE)$/;"	v
is_clewnbuf	plugged/pyclewn/lib/clewn/buffer.py	/^def is_clewnbuf(bufname):$/;"	f
Buffer	plugged/pyclewn/lib/clewn/buffer.py	/^class Buffer(dict):$/;"	c
__init__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __init__(self, name, buf_id, nbsock):$/;"	m	class:Buffer
get_typeNum	plugged/pyclewn/lib/clewn/buffer.py	/^    def get_typeNum(self):$/;"	m	class:Buffer
last_typeNum	plugged/pyclewn/lib/clewn/buffer.py	/^    last_typeNum = property(get_typeNum, None, None,$/;"	v	class:Buffer
define_frameanno	plugged/pyclewn/lib/clewn/buffer.py	/^    def define_frameanno(self):$/;"	m	class:Buffer
add_anno	plugged/pyclewn/lib/clewn/buffer.py	/^    def add_anno(self, anno_id, lnum):$/;"	m	class:Buffer
delete_anno	plugged/pyclewn/lib/clewn/buffer.py	/^    def delete_anno(self, anno_id):$/;"	m	class:Buffer
update	plugged/pyclewn/lib/clewn/buffer.py	/^    def update(self, anno_id=None, disabled=False):$/;"	m	class:Buffer
remove_all	plugged/pyclewn/lib/clewn/buffer.py	/^    def remove_all(self, lnum=None):$/;"	m	class:Buffer
getname	plugged/pyclewn/lib/clewn/buffer.py	/^    def getname(self):$/;"	m	class:Buffer
name	plugged/pyclewn/lib/clewn/buffer.py	/^    name = property(getname, None, None, getname.__doc__)$/;"	v	class:Buffer
Annotation	plugged/pyclewn/lib/clewn/buffer.py	/^class Annotation(object):$/;"	c
__init__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __init__(self, buf, bp, lnum, nbsock, disabled=False):$/;"	m	class:Annotation
define_bpanno	plugged/pyclewn/lib/clewn/buffer.py	/^    def define_bpanno(self):$/;"	m	class:Annotation
update	plugged/pyclewn/lib/clewn/buffer.py	/^    def update(self, disabled=False):$/;"	m	class:Annotation
remove_anno	plugged/pyclewn/lib/clewn/buffer.py	/^    def remove_anno(self):$/;"	m	class:Annotation
__repr__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __repr__(self):$/;"	m	class:Annotation	file:
FrameAnnotation	plugged/pyclewn/lib/clewn/buffer.py	/^class FrameAnnotation(Annotation):$/;"	c
__init__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __init__(self, nbsock):$/;"	m	class:FrameAnnotation
set_buf_lnum	plugged/pyclewn/lib/clewn/buffer.py	/^    def set_buf_lnum(self, buf, lnum):$/;"	m	class:FrameAnnotation
update	plugged/pyclewn/lib/clewn/buffer.py	/^    def update(self, disabled=False):$/;"	m	class:FrameAnnotation
__repr__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __repr__(self):$/;"	m	class:FrameAnnotation	file:
BufferSet	plugged/pyclewn/lib/clewn/buffer.py	/^class BufferSet(dict):$/;"	c
__init__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __init__(self, nbsock):$/;"	m	class:BufferSet
add_anno	plugged/pyclewn/lib/clewn/buffer.py	/^    def add_anno(self, anno_id, pathname, lnum):$/;"	m	class:BufferSet
update_anno	plugged/pyclewn/lib/clewn/buffer.py	/^    def update_anno(self, anno_id, disabled=False):$/;"	m	class:BufferSet
delete_anno	plugged/pyclewn/lib/clewn/buffer.py	/^    def delete_anno(self, anno_id):$/;"	m	class:BufferSet
show_frame	plugged/pyclewn/lib/clewn/buffer.py	/^    def show_frame(self, pathname=None, lnum=1):$/;"	m	class:BufferSet
add_bp	plugged/pyclewn/lib/clewn/buffer.py	/^    def add_bp(self, bp_id, pathname, lnum):$/;"	m	class:BufferSet
update_bp	plugged/pyclewn/lib/clewn/buffer.py	/^    def update_bp(self, bp_id, disabled=False):$/;"	m	class:BufferSet
getbuf	plugged/pyclewn/lib/clewn/buffer.py	/^    def getbuf(self, buf_id):$/;"	m	class:BufferSet
remove_all	plugged/pyclewn/lib/clewn/buffer.py	/^    def remove_all(self):$/;"	m	class:BufferSet
get_lnum_list	plugged/pyclewn/lib/clewn/buffer.py	/^    def get_lnum_list(self, pathname):$/;"	m	class:BufferSet
__getitem__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __getitem__(self, pathname):$/;"	m	class:BufferSet	file:
__setitem__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __setitem__(self, pathname, item):$/;"	m	class:BufferSet	file:
setdefault	plugged/pyclewn/lib/clewn/buffer.py	/^    def setdefault(self, pathname, failobj=None):$/;"	m	class:BufferSet
__delitem__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __delitem__(self, key):$/;"	m	class:BufferSet	file:
__len__	plugged/pyclewn/lib/clewn/buffer.py	/^    def __len__(self):$/;"	m	class:BufferSet	file:
popitem	plugged/pyclewn/lib/clewn/buffer.py	/^    def popitem(self):$/;"	m	class:BufferSet
pop	plugged/pyclewn/lib/clewn/buffer.py	/^    def pop(self, key, *args):$/;"	m	class:BufferSet
update	plugged/pyclewn/lib/clewn/buffer.py	/^    def update(self, dict=None, **kwargs):$/;"	m	class:BufferSet
copy	plugged/pyclewn/lib/clewn/buffer.py	/^    def copy(self):$/;"	m	class:BufferSet
absolute_import	plugged/pyclewn/lib/clewn/debugger.py	/^from __future__ import absolute_import$/;"	i
division	plugged/pyclewn/lib/clewn/debugger.py	/^from __future__ import division$/;"	i
print_function	plugged/pyclewn/lib/clewn/debugger.py	/^from __future__ import print_function$/;"	i
unicode_literals	plugged/pyclewn/lib/clewn/debugger.py	/^from __future__ import unicode_literals$/;"	i
open	plugged/pyclewn/lib/clewn/debugger.py	/^from io import open$/;"	i
sys	plugged/pyclewn/lib/clewn/debugger.py	/^import sys$/;"	i
os	plugged/pyclewn/lib/clewn/debugger.py	/^import os$/;"	i
re	plugged/pyclewn/lib/clewn/debugger.py	/^import re$/;"	i
asyncio	plugged/pyclewn/lib/clewn/debugger.py	/^import asyncio$/;"	i
time	plugged/pyclewn/lib/clewn/debugger.py	/^import time$/;"	i
logging	plugged/pyclewn/lib/clewn/debugger.py	/^import logging$/;"	i
string	plugged/pyclewn/lib/clewn/debugger.py	/^import string$/;"	i
pkgutil	plugged/pyclewn/lib/clewn/debugger.py	/^import pkgutil$/;"	i
copy	plugged/pyclewn/lib/clewn/debugger.py	/^import copy$/;"	i
subprocess	plugged/pyclewn/lib/clewn/debugger.py	/^import subprocess$/;"	i
ABCMeta	plugged/pyclewn/lib/clewn/debugger.py	/^from abc import ABCMeta, abstractmethod$/;"	i
abstractmethod	plugged/pyclewn/lib/clewn/debugger.py	/^from abc import ABCMeta, abstractmethod$/;"	i
__version__	plugged/pyclewn/lib/clewn/debugger.py	/^from . import __version__, ClewnError, misc, netbeans, runtime_version$/;"	i
ClewnError	plugged/pyclewn/lib/clewn/debugger.py	/^from . import __version__, ClewnError, misc, netbeans, runtime_version$/;"	i
misc	plugged/pyclewn/lib/clewn/debugger.py	/^from . import __version__, ClewnError, misc, netbeans, runtime_version$/;"	i
netbeans	plugged/pyclewn/lib/clewn/debugger.py	/^from . import __version__, ClewnError, misc, netbeans, runtime_version$/;"	i
runtime_version	plugged/pyclewn/lib/clewn/debugger.py	/^from . import __version__, ClewnError, misc, netbeans, runtime_version$/;"	i
BCKGROUND_JOB_DELAY	plugged/pyclewn/lib/clewn/debugger.py	/^BCKGROUND_JOB_DELAY = .200$/;"	v
COMPLETION_SUFFIX	plugged/pyclewn/lib/clewn/debugger.py	/^COMPLETION_SUFFIX = ' %(pre)s%(cmd)s call s:nbcommand("%(cmd)s", <f-args>)'$/;"	v
RE_KEY	plugged/pyclewn/lib/clewn/debugger.py	/^    r'# RE: key:value line in .pyclewn_keys'$/;"	v
RE_COMMENT	plugged/pyclewn/lib/clewn/debugger.py	/^             r'# RE: a comment line'$/;"	v
RE_FILENAMELNUM	plugged/pyclewn/lib/clewn/debugger.py	/^                  r'# RE: pathname:lnum'$/;"	v
re_key	plugged/pyclewn/lib/clewn/debugger.py	/^re_key = re.compile(RE_KEY, re.VERBOSE)$/;"	v
re_comment	plugged/pyclewn/lib/clewn/debugger.py	/^re_comment = re.compile(RE_COMMENT, re.VERBOSE)$/;"	v
re_filenamelnum	plugged/pyclewn/lib/clewn/debugger.py	/^re_filenamelnum = re.compile(RE_FILENAMELNUM, re.VERBOSE)$/;"	v
name_lnum	plugged/pyclewn/lib/clewn/debugger.py	/^def name_lnum(name_lnum):$/;"	f
Debugger	plugged/pyclewn/lib/clewn/debugger.py	/^class Debugger(object):$/;"	c
__metaclass__	plugged/pyclewn/lib/clewn/debugger.py	/^    __metaclass__ = ABCMeta$/;"	v	class:Debugger
__init__	plugged/pyclewn/lib/clewn/debugger.py	/^    def __init__(self, vim):$/;"	m	class:Debugger
set_nbsock	plugged/pyclewn/lib/clewn/debugger.py	/^    def set_nbsock(self, nbsock):$/;"	m	class:Debugger
pre_cmd	plugged/pyclewn/lib/clewn/debugger.py	/^    def pre_cmd(self, cmd, args):$/;"	m	class:Debugger
default_cmd_processing	plugged/pyclewn/lib/clewn/debugger.py	/^    def default_cmd_processing(self, cmd, args):$/;"	m	class:Debugger
post_cmd	plugged/pyclewn/lib/clewn/debugger.py	/^    def post_cmd(self, cmd, args):$/;"	m	class:Debugger
vim_script_custom	plugged/pyclewn/lib/clewn/debugger.py	/^    def vim_script_custom(self, prefix):$/;"	m	class:Debugger
add_bp	plugged/pyclewn/lib/clewn/debugger.py	/^    def add_bp(self, bp_id, pathname, lnum):$/;"	m	class:Debugger
update_bp	plugged/pyclewn/lib/clewn/debugger.py	/^    def update_bp(self, bp_id, disabled=False):$/;"	m	class:Debugger
delete_bp	plugged/pyclewn/lib/clewn/debugger.py	/^    def delete_bp(self, bp_id):$/;"	m	class:Debugger
remove_all	plugged/pyclewn/lib/clewn/debugger.py	/^    def remove_all(self):$/;"	m	class:Debugger
get_lnum_list	plugged/pyclewn/lib/clewn/debugger.py	/^    def get_lnum_list(self, pathname):$/;"	m	class:Debugger
update_listbuffer	plugged/pyclewn/lib/clewn/debugger.py	/^    def update_listbuffer(self, bufname, getdata, dirty, lnum=None):$/;"	m	class:Debugger
update_tabpage_buffers	plugged/pyclewn/lib/clewn/debugger.py	/^    def update_tabpage_buffers(self):$/;"	m	class:Debugger
show_frame	plugged/pyclewn/lib/clewn/debugger.py	/^    def show_frame(self, pathname=None, lnum=1):$/;"	m	class:Debugger
balloon_text	plugged/pyclewn/lib/clewn/debugger.py	/^    def balloon_text(self, text):$/;"	m	class:Debugger
show_balloon	plugged/pyclewn/lib/clewn/debugger.py	/^    def show_balloon(self, text):$/;"	m	class:Debugger
print_prompt	plugged/pyclewn/lib/clewn/debugger.py	/^    def print_prompt(self):$/;"	m	class:Debugger
get_console	plugged/pyclewn/lib/clewn/debugger.py	/^    def get_console(self):$/;"	m	class:Debugger
console_print	plugged/pyclewn/lib/clewn/debugger.py	/^    def console_print(self, format, *args):$/;"	m	class:Debugger
console_flush	plugged/pyclewn/lib/clewn/debugger.py	/^    def console_flush(self):$/;"	m	class:Debugger
inferiortty	plugged/pyclewn/lib/clewn/debugger.py	/^    def inferiortty(self, set_inferior_tty_cb):$/;"	m	class:Debugger
_set_inferior_tty	plugged/pyclewn/lib/clewn/debugger.py	/^        def _set_inferior_tty():$/;"	f	function:Debugger.inferiortty
close	plugged/pyclewn/lib/clewn/debugger.py	/^    def close(self):$/;"	m	class:Debugger
netbeans_detach	plugged/pyclewn/lib/clewn/debugger.py	/^    def netbeans_detach(self):$/;"	m	class:Debugger
_start	plugged/pyclewn/lib/clewn/debugger.py	/^    def _start(self):$/;"	m	class:Debugger
start	plugged/pyclewn/lib/clewn/debugger.py	/^    def start(self):$/;"	m	class:Debugger
_background_jobs	plugged/pyclewn/lib/clewn/debugger.py	/^    def _background_jobs(self):$/;"	m	class:Debugger
flush_console	plugged/pyclewn/lib/clewn/debugger.py	/^    def flush_console(self):$/;"	m	class:Debugger
_get_cmds	plugged/pyclewn/lib/clewn/debugger.py	/^    def _get_cmds(self):$/;"	m	class:Debugger
vim_script	plugged/pyclewn/lib/clewn/debugger.py	/^    def vim_script(self):$/;"	m	class:Debugger
_do_cmd	plugged/pyclewn/lib/clewn/debugger.py	/^    def _do_cmd(self, method, cmd, args):$/;"	m	class:Debugger
_dispatch_keypos	plugged/pyclewn/lib/clewn/debugger.py	/^    def _dispatch_keypos(self, cmd, args, buf, lnum):$/;"	m	class:Debugger
_keymaps	plugged/pyclewn/lib/clewn/debugger.py	/^    def _keymaps(self, key, buf, lnum):$/;"	m	class:Debugger
_read_keysfile	plugged/pyclewn/lib/clewn/debugger.py	/^    def _read_keysfile(self):$/;"	m	class:Debugger
cmd_help	plugged/pyclewn/lib/clewn/debugger.py	/^    def cmd_help(self, *args):$/;"	m	class:Debugger
cmd_dumprepr	plugged/pyclewn/lib/clewn/debugger.py	/^    def cmd_dumprepr(self, cmd, args):$/;"	m	class:Debugger
cmd_loglevel	plugged/pyclewn/lib/clewn/debugger.py	/^    def cmd_loglevel(self, cmd, level):$/;"	m	class:Debugger
cmd_mapkeys	plugged/pyclewn/lib/clewn/debugger.py	/^    def cmd_mapkeys(self, *args):$/;"	m	class:Debugger
not_a_pyclewn_method	plugged/pyclewn/lib/clewn/debugger.py	/^    def not_a_pyclewn_method(self, cmd):$/;"	m	class:Debugger
cmd_unmapkeys	plugged/pyclewn/lib/clewn/debugger.py	/^    def cmd_unmapkeys(self, cmd, *args):$/;"	m	class:Debugger
cmd_exitclewn	plugged/pyclewn/lib/clewn/debugger.py	/^    def cmd_exitclewn(self, cmd, *args):$/;"	m	class:Debugger
cmd_ballooneval	plugged/pyclewn/lib/clewn/debugger.py	/^    def cmd_ballooneval(self, *args):$/;"	m	class:Debugger
__str__	plugged/pyclewn/lib/clewn/debugger.py	/^    def __str__(self):$/;"	m	class:Debugger	file:
s:cpo_save	plugged/pyclewn/lib/clewn/debugger.vim	/^let s:cpo_save=&cpo$/;"	v
s:bufList	plugged/pyclewn/lib/clewn/debugger.vim	/^let s:bufList = {}$/;"	v
s:bufLen	plugged/pyclewn/lib/clewn/debugger.vim	/^let s:bufLen = 0$/;"	v
error	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:error(msg)$/;"	f
BuildList	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:BuildList()$/;"	f
InBufferList	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:InBufferList(pathname)$/;"	f
PrintBufferList	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:PrintBufferList()$/;"	f
bufwin_event	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:bufwin_event(fullname, state)$/;"	f
tabpage_event	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:tabpage_event()$/;"	f
mapkeys	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:mapkeys()$/;"	f
clewn	plugged/pyclewn/lib/clewn/debugger.vim	/^augroup clewn$/;"	a
restore_clewn_window	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:restore_clewn_window(name)$/;"	f
s:runonce_dict	plugged/pyclewn/lib/clewn/debugger.vim	/^let s:runonce_dict = {}$/;"	v
runonce_dict.create_windows	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:runonce_dict.create_windows() dict$/;"	f
runonce_dict.send_fake_fileopened_evts	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:runonce_dict.send_fake_fileopened_evts() dict$/;"	f
nbcommand	plugged/pyclewn/lib/clewn/debugger.vim	/^function! s:nbcommand(...)$/;"	f
nbcommand	plugged/pyclewn/lib/clewn/debugger.vim	/^    function! s:nbcommand(...)$/;"	f
unmapkeys	plugged/pyclewn/lib/clewn/debugger.vim	/^function s:unmapkeys()$/;"	f
exitclewn	plugged/pyclewn/lib/clewn/debugger.vim	/^function s:exitclewn()$/;"	f
absolute_import	plugged/pyclewn/lib/clewn/gdb.py	/^from __future__ import absolute_import$/;"	i
division	plugged/pyclewn/lib/clewn/gdb.py	/^from __future__ import division$/;"	i
print_function	plugged/pyclewn/lib/clewn/gdb.py	/^from __future__ import print_function$/;"	i
unicode_literals	plugged/pyclewn/lib/clewn/gdb.py	/^from __future__ import unicode_literals$/;"	i
open	plugged/pyclewn/lib/clewn/gdb.py	/^from io import open$/;"	i
os	plugged/pyclewn/lib/clewn/gdb.py	/^import os$/;"	i
subprocess	plugged/pyclewn/lib/clewn/gdb.py	/^import subprocess$/;"	i
re	plugged/pyclewn/lib/clewn/gdb.py	/^import re$/;"	i
time	plugged/pyclewn/lib/clewn/gdb.py	/^import time$/;"	i
pkgutil	plugged/pyclewn/lib/clewn/gdb.py	/^import pkgutil$/;"	i
collections	plugged/pyclewn/lib/clewn/gdb.py	/^import collections$/;"	i
takewhile	plugged/pyclewn/lib/clewn/gdb.py	/^from itertools import takewhile$/;"	i
ClewnError	plugged/pyclewn/lib/clewn/gdb.py	/^from . import ClewnError, gdbmi, misc, debugger$/;"	i
gdbmi	plugged/pyclewn/lib/clewn/gdb.py	/^from . import ClewnError, gdbmi, misc, debugger$/;"	i
misc	plugged/pyclewn/lib/clewn/gdb.py	/^from . import ClewnError, gdbmi, misc, debugger$/;"	i
debugger	plugged/pyclewn/lib/clewn/gdb.py	/^from . import ClewnError, gdbmi, misc, debugger$/;"	i
Process	plugged/pyclewn/lib/clewn/gdb.py	/^from .process import Process$/;"	i
_timer	plugged/pyclewn/lib/clewn/gdb.py	/^_timer = time.time$/;"	v
GDB_VERSION	plugged/pyclewn/lib/clewn/gdb.py	/^GDB_VERSION = [6, 2, 1]$/;"	v
COMPLETION_TIMEOUT	plugged/pyclewn/lib/clewn/gdb.py	/^COMPLETION_TIMEOUT = 10 # seconds$/;"	v
SETFMTVAR_FORMATS	plugged/pyclewn/lib/clewn/gdb.py	/^SETFMTVAR_FORMATS = ('binary', 'decimal', 'hexadecimal', 'octal', 'natural')$/;"	v
COMPLETION	plugged/pyclewn/lib/clewn/gdb.py	/^COMPLETION = ('command! -bar -nargs=* -complete=customlist,s:GdbComplete' +$/;"	v
MAPKEYS	plugged/pyclewn/lib/clewn/gdb.py	/^MAPKEYS = {$/;"	v
RE_COMPLETION	plugged/pyclewn/lib/clewn/gdb.py	/^                r'# RE: cmd 1st_arg_completion'$/;"	v
RE_MIRECORD	plugged/pyclewn/lib/clewn/gdb.py	/^              r'# gdb\/mi record'$/;"	v
RE_ANNO_1	plugged/pyclewn/lib/clewn/gdb.py	/^            r'# ^Z^ZD:FILENAME:LINE:CHARACTER:MIDDLE:ADDR'$/;"	v
RE_FINISH	plugged/pyclewn/lib/clewn/gdb.py	/^            r'# return value after Cfinish' % misc.QUOTED_STRING$/;"	v
RE_VIM_COMMAND	plugged/pyclewn/lib/clewn/gdb.py	/^                 r'# a valid Vim command name'$/;"	v
re_completion	plugged/pyclewn/lib/clewn/gdb.py	/^re_completion = re.compile(RE_COMPLETION, re.VERBOSE)$/;"	v
re_mirecord	plugged/pyclewn/lib/clewn/gdb.py	/^re_mirecord = re.compile(RE_MIRECORD, re.VERBOSE)$/;"	v
re_anno_1	plugged/pyclewn/lib/clewn/gdb.py	/^re_anno_1 = re.compile(RE_ANNO_1, re.VERBOSE)$/;"	v
re_finish	plugged/pyclewn/lib/clewn/gdb.py	/^re_finish = re.compile(RE_FINISH, re.VERBOSE)$/;"	v
re_vim_command	plugged/pyclewn/lib/clewn/gdb.py	/^re_vim_command = re.compile(RE_VIM_COMMAND, re.VERBOSE)$/;"	v
gdb_batch	plugged/pyclewn/lib/clewn/gdb.py	/^def gdb_batch(pgm, job):$/;"	f
parse_gdb_version	plugged/pyclewn/lib/clewn/gdb.py	/^def parse_gdb_version(header):$/;"	f
parse_version	plugged/pyclewn/lib/clewn/gdb.py	/^    def parse_version(txt):$/;"	f	function:parse_gdb_version
gdb_version	plugged/pyclewn/lib/clewn/gdb.py	/^def gdb_version(pgm):$/;"	f
GlobalSetup	plugged/pyclewn/lib/clewn/gdb.py	/^class GlobalSetup(misc.Singleton):$/;"	c
filename_complt	plugged/pyclewn/lib/clewn/gdb.py	/^    filename_complt = [$/;"	v	class:GlobalSetup
illegal_cmds	plugged/pyclewn/lib/clewn/gdb.py	/^    illegal_cmds = [$/;"	v	class:GlobalSetup
run_cmds	plugged/pyclewn/lib/clewn/gdb.py	/^    run_cmds = ($/;"	v	class:GlobalSetup
illegal_setargs	plugged/pyclewn/lib/clewn/gdb.py	/^    illegal_setargs = ($/;"	v	class:GlobalSetup
init	plugged/pyclewn/lib/clewn/gdb.py	/^    def init(self, gdbname, pyclewn_cmds, vim_implementation):$/;"	m	class:GlobalSetup
__init__	plugged/pyclewn/lib/clewn/gdb.py	/^    def __init__(self, gdbname, pyclewn_cmds, vim_implementation):$/;"	m	class:GlobalSetup
build_cmds	plugged/pyclewn/lib/clewn/gdb.py	/^    def build_cmds(self):$/;"	m	class:GlobalSetup
Gdb	plugged/pyclewn/lib/clewn/gdb.py	/^class Gdb(debugger.Debugger, Process):$/;"	c
__init__	plugged/pyclewn/lib/clewn/gdb.py	/^    def __init__(self, *args):$/;"	m	class:Gdb
parse_paramlist	plugged/pyclewn/lib/clewn/gdb.py	/^    def parse_paramlist(self, parameters):$/;"	m	class:Gdb
getargv	plugged/pyclewn/lib/clewn/gdb.py	/^    def getargv(self):$/;"	m	class:Gdb
vim_script_custom	plugged/pyclewn/lib/clewn/gdb.py	/^    def vim_script_custom(self, prefix):$/;"	m	class:Gdb
start	plugged/pyclewn/lib/clewn/gdb.py	/^    def start(self):$/;"	m	class:Gdb
print_prompt	plugged/pyclewn/lib/clewn/gdb.py	/^    def print_prompt(self):$/;"	m	class:Gdb
gdb_background_jobs	plugged/pyclewn/lib/clewn/gdb.py	/^    def gdb_background_jobs(self):$/;"	m	class:Gdb
accepting_cmd	plugged/pyclewn/lib/clewn/gdb.py	/^    def accepting_cmd(self):$/;"	m	class:Gdb
terminate_cmd	plugged/pyclewn/lib/clewn/gdb.py	/^    def terminate_cmd(self):$/;"	m	class:Gdb
handle_strrecord	plugged/pyclewn/lib/clewn/gdb.py	/^    def handle_strrecord(self, cmd):$/;"	m	class:Gdb
handle_line	plugged/pyclewn/lib/clewn/gdb.py	/^    def handle_line(self, line):$/;"	m	class:Gdb
process_stream_record	plugged/pyclewn/lib/clewn/gdb.py	/^    def process_stream_record(self, line):$/;"	m	class:Gdb
process_mi_record	plugged/pyclewn/lib/clewn/gdb.py	/^    def process_mi_record(self, matchobj):$/;"	m	class:Gdb
process_prompt	plugged/pyclewn/lib/clewn/gdb.py	/^    def process_prompt(self):$/;"	m	class:Gdb
process_oob	plugged/pyclewn/lib/clewn/gdb.py	/^    def process_oob(self):$/;"	m	class:Gdb
clicmd_notify	plugged/pyclewn/lib/clewn/gdb.py	/^    def clicmd_notify(self, cmd, console=True, gdb=True):$/;"	m	class:Gdb
write	plugged/pyclewn/lib/clewn/gdb.py	/^    def write(self, data):$/;"	m	class:Gdb
update_tabpage_buffers	plugged/pyclewn/lib/clewn/gdb.py	/^    def update_tabpage_buffers(self):$/;"	m	class:Gdb
close	plugged/pyclewn/lib/clewn/gdb.py	/^    def close(self):$/;"	m	class:Gdb
_do_cmd	plugged/pyclewn/lib/clewn/gdb.py	/^    def _do_cmd(self, method, cmd, args):$/;"	m	class:Gdb
pre_cmd	plugged/pyclewn/lib/clewn/gdb.py	/^    def pre_cmd(self, cmd, args):$/;"	m	class:Gdb
post_cmd	plugged/pyclewn/lib/clewn/gdb.py	/^    def post_cmd(self, cmd, args):$/;"	m	class:Gdb
default_cmd_processing	plugged/pyclewn/lib/clewn/gdb.py	/^    def default_cmd_processing(self, cmd, args):$/;"	m	class:Gdb
cmd_help	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_help(self, *args):$/;"	m	class:Gdb
cmd_inferiortty	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_inferiortty(self, *args):$/;"	m	class:Gdb
set_inferior_tty_cb	plugged/pyclewn/lib/clewn/gdb.py	/^        def set_inferior_tty_cb(line):$/;"	f	function:Gdb.cmd_inferiortty
cmd_complete	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_complete(self, cmd, args):$/;"	m	class:Gdb
cmd_define	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_define(self, cmd, *args):$/;"	m	class:Gdb
cmd_commands	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_commands(self, cmd, *args):$/;"	m	class:Gdb
cmd_document	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_document(self, cmd, *args):$/;"	m	class:Gdb
cmd_dbgvar	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_dbgvar(self, cmd, args):$/;"	m	class:Gdb
cmd_delvar	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_delvar(self, cmd, args):$/;"	m	class:Gdb
cmd_foldvar	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_foldvar(self, cmd, args):$/;"	m	class:Gdb
cmd_setfmtvar	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_setfmtvar(self, cmd, args):$/;"	m	class:Gdb
cmd_project	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_project(self, cmd, args):$/;"	m	class:Gdb
cmd_quit	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_quit(self, *args):$/;"	m	class:Gdb
cmd_sigint	plugged/pyclewn/lib/clewn/gdb.py	/^    def cmd_sigint(self, *args):$/;"	m	class:Gdb
balloon_text	plugged/pyclewn/lib/clewn/gdb.py	/^    def balloon_text(self, text):$/;"	m	class:Gdb
_test	plugged/pyclewn/lib/clewn/gdb.py	/^def _test():$/;"	f
doctest	plugged/pyclewn/lib/clewn/gdb.py	/^    import doctest$/;"	i
