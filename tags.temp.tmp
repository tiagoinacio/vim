!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$	plugged/vim-easymotion/t/easymotion_spec.vim	/^        normal \$$/;"	m
$	plugged/vim-easymotion/t/easymotion_spec.vim	/^        normal! \$$/;"	m
$	plugged/vim-easymotion/t/operator_pending_spec.vim	/^        normal! \$$/;"	m
$JS_CMD	cfg/options.vim	/^let $JS_CMD='node'$/;"	v
$NVIM_TUI_ENABLE_CURSOR_SHAPE	cfg/options.vim	/^let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1$/;"	v
%	plugged/matchit/plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	plugged/matchit/plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	plugged/matchit/plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
+	cfg/mapping.vim	/^ nnoremap + :bn<cr>$/;"	m
,	cfg/mapping.vim	/^nnoremap , :$/;"	m
,	plugged/vim-easymotion/t/easymotion_spec.vim	/^        map , <Plug>(easymotion-prev)$/;"	m
,	plugged/vim-easymotion/t/easymotion_spec.vim	/^        normal ,$/;"	m
-	cfg/mapping.vim	/^ nnoremap - :bp<cr>$/;"	m
-	plugged/vim-vinegar/plugin/vinegar.vim	/^  nmap - <Plug>VinegarUp$/;"	m
-depth	plugged/neomake/Makefile	/^	git clone -q --depth=1 -b display-source-with-exceptions https:\/\/github.com\/blueyed\/vader.vim $@$/;"	m
-depth	plugged/neomake/Makefile	/^	git clone -q --depth=1 https:\/\/github.com\/tpope\/vim-fugitive $@$/;"	m
-follow-imports	plugged/defx.nvim/Makefile	/^	mypy --ignore-missing-imports --follow-imports=skip --strict rplugin\/python3\/defx$/;"	m
-follow-imports	plugged/denite.nvim/Makefile	/^	mypy --ignore-missing-imports --follow-imports=skip rplugin\/python3\/denite$/;"	m
.	plugged/vim-repeat/autoload/repeat.vim	/^    nmap . <Plug>(RepeatDot)$/;"	m
/	plugged/vim-easymotion/t/easymotion_spec.vim	/^        map \/ <Plug>(easymotion-sn)$/;"	m
/	plugged/vim-easymotion/t/smartsign_spec.vim	/^        map \/ <Plug>(easymotion-sn)$/;"	m
/,,1	plugged/vim-easymotion/t/smartsign_spec.vim	/^        normal \/,,1$/;"	m
/,<1	plugged/vim-easymotion/t/smartsign_spec.vim	/^        normal \/,<1$/;"	m
0	cfg/mapping.vim	/^ nnoremap 0 ^$/;"	m
0	plugged/vim-easymotion/t/easymotion_spec.vim	/^        normal! 0$/;"	m
0	plugged/vim-easymotion/t/operator_pending_spec.vim	/^        normal! 0$/;"	m
0	plugged/vim-easymotion/t/smartsign_spec.vim	/^        normal! 0$/;"	m
2,	plugged/vim-easymotion/t/easymotion_spec.vim	/^        normal 2,$/;"	m
3;	plugged/vim-easymotion/t/easymotion_spec.vim	/^        normal 3;$/;"	m
4,	plugged/vim-easymotion/t/easymotion_spec.vim	/^        normal 4,$/;"	m
:Q	cfg/mapping.vim	/^nnoremap :Q :q$/;"	m
;	plugged/vim-easymotion/t/easymotion_spec.vim	/^        map ; <Plug>(easymotion-next)$/;"	m
;	plugged/vim-easymotion/t/easymotion_spec.vim	/^        normal ;$/;"	m
<	cfg/mapping.vim	/^ vnoremap < <gv$/;"	m
<BS>	cfg/mapping.vim	/^ vnoremap <BS> x$/;"	m
<BS>	cfg/packages/fzf.vim	/^    nnoremap <BS> :GitFiles<cr>$/;"	m
<BS>	cfg/packages/fzf.vim	/^    vnoremap <BS> \/$/;"	m
<BS>	cfg/packages/macvim.vim	/^    nmap <BS> :Unite file_rec\/async<cr>$/;"	m
<BS>	cfg/packages/neocomplete.vim	/^inoremap <expr><BS> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-G>S	plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-R>	plugged/vim-repeat/autoload/repeat.vim	/^    nmap <C-R> <Plug>(RepeatRedo)$/;"	m
<C-S>	plugged/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-a>	cfg/mapping.vim	/^ cnoremap <C-a> <Home>$/;"	m
<C-e>	cfg/packages/nerdtree.vim	/^map <C-e> :NERDTreeFind<CR>$/;"	m
<C-g>	cfg/packages/neocomplete.vim	/^inoremap <expr><C-g>     neocomplete#undo_completion()$/;"	m
<C-h>	cfg/packages/neocomplete.vim	/^inoremap <expr><C-h> neocomplete#smart_close_popup()."\\<C-h>"$/;"	m
<C-l>	cfg/packages/neocomplete.vim	/^inoremap <expr><C-l>     neocomplete#complete_common_string()$/;"	m
<C-n>	cfg/packages/nerdtree.vim	/^map <C-n> :NERDTreeToggle<CR>$/;"	m
<C-q>	cfg/packages/dispatch.vim	/^nnoremap <C-q> :History:<CR>$/;"	m
<C-x><C-o>	cfg/packages/marching.vim	/^imap <buffer> <C-x><C-o> <Plug>(marching_start_omni_complete)$/;"	m
<C-x><C-x><C-o>	cfg/packages/marching.vim	/^imap <buffer> <C-x><C-x><C-o> <Plug>(marching_force_start_omni_complete)$/;"	m
<CR>	cfg/packages/neocomplete.vim	/^inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>$/;"	m
<Leader><Leader>	plugged/vim-easymotion/plugin/EasyMotion.vim	/^            map <Leader><Leader> <Plug>(easymotion-prefix)$/;"	m
<Leader>B	plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>B <Plug>(easymotion-B)$/;"	m
<Leader>E	plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>E <Plug>(easymotion-E)$/;"	m
<Leader>W	plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>W <Plug>(easymotion-W)$/;"	m
<Leader>b	plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>b <Plug>(easymotion-iskeyword-b)$/;"	m
<Leader>b	plugged/vim-easymotion/t/easymotion_spec.vim	/^        map <Leader>b <Plug>(easymotion-iskeyword-b)$/;"	m
<Leader>e	plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>e <Plug>(easymotion-iskeyword-e)$/;"	m
<Leader>fa	plugged/fzf-bookmark.vim/plugin/fzf-bookmark.vim	/^    nnoremap <silent> <Leader>fa :BMFiles<cr>$/;"	m
<Leader>fg	plugged/fzf-bookmark.vim/plugin/fzf-bookmark.vim	/^    nnoremap <silent> <Leader>fg :BMGitFiles<cr>$/;"	m
<Leader>fp	plugged/fzf-bookmark.vim/plugin/fzf-bookmark.vim	/^    nnoremap <silent> <Leader>fp :BMChangeDirectory<cr>$/;"	m
<Leader>gE	plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>gE <Plug>(easymotion-gE)$/;"	m
<Leader>gd	cfg/packages/fzf.vim	/^    nnoremap <silent> <Leader>gd :call GitDiff()<cr>$/;"	m
<Leader>ge	plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>ge <Plug>(easymotion-iskeyword-ge)$/;"	m
<Leader>w	plugged/vim-easymotion/t/compare_movements_spec.vim	/^        nmap <Leader>w <Plug>(easymotion-iskeyword-w)$/;"	m
<Leader>w	plugged/vim-easymotion/t/easymotion_spec.vim	/^        map <Leader>w <Plug>(easymotion-iskeyword-w)$/;"	m
<Plug>(-fzf-complete-trigger)	plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(RepeatDot)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatDot)      :<C-U>exe repeat#run(v:count)<CR>$/;"	m
<Plug>(RepeatRedo)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatRedo)     :<C-U>call repeat#wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<Plug>(RepeatUndo)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndo)     :<C-U>call repeat#wrap('u',v:count)<CR>$/;"	m
<Plug>(RepeatUndoLine)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndoLine) :<C-U>call repeat#wrap('U',v:count)<CR>$/;"	m
<Plug>(easymotion-activate)	plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-activate) :<C-u>call EasyMotion#activate(0)<CR>$/;"	m
<Plug>(easymotion-dotrepeat)	plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-dotrepeat)$/;"	m
<Plug>(easymotion-next)	plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-next)$/;"	m
<Plug>(easymotion-overwin-f)	plugged/vim-easymotion/plugin/EasyMotion.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-f) :<C-u>call EasyMotion#OverwinF(1)<CR>$/;"	m
<Plug>(easymotion-overwin-f2)	plugged/vim-easymotion/plugin/EasyMotion.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-f2) :<C-u>call EasyMotion#OverwinF(2)<CR>$/;"	m
<Plug>(easymotion-overwin-line)	plugged/vim-easymotion/plugin/EasyMotion.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-line) :<C-u>call EasyMotion#overwin#line()<CR>$/;"	m
<Plug>(easymotion-overwin-w)	plugged/vim-easymotion/plugin/EasyMotion.vim	/^nnoremap <silent> <Plug>(easymotion-overwin-w) :<C-u>call EasyMotion#overwin#w()<CR>$/;"	m
<Plug>(easymotion-prev)	plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-prev)$/;"	m
<Plug>(easymotion-repeat)	plugged/vim-easymotion/plugin/EasyMotion.vim	/^noremap  <silent><Plug>(easymotion-repeat)$/;"	m
<Plug>(jsdoc)	plugged/vim-jsdoc/ftplugin/javascript/jsdoc.vim	/^nnoremap <silent> <buffer> <Plug>(jsdoc) :call jsdoc#insert()<CR>$/;"	m
<Plug>(jsdoc)	plugged/vim-jsdoc/ftplugin/typescript/jsdoc.vim	/^nnoremap <silent> <buffer> <Plug>(jsdoc) :call jsdoc#insert()<CR>$/;"	m
<Plug>CSurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>CmdlineCompleteBackward	plugged/CmdlineComplete/plugin/cmdline-complete.vim	/^cnoremap <silent> <Plug>CmdlineCompleteBackward <c-r>=<sid>CmdlineComplete(1)<cr>$/;"	m
<Plug>CmdlineCompleteForward	plugged/CmdlineComplete/plugin/cmdline-complete.vim	/^cnoremap <silent> <Plug>CmdlineCompleteForward  <c-r>=<sid>CmdlineComplete(0)<cr>$/;"	m
<Plug>Csurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>GitGutterNextHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterNextHunk &diff ? ']c' : ":\\<C-U>execute v:count1 . 'GitGutterNextHunk'\\<CR>"$/;"	m
<Plug>GitGutterPrevHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <expr> <Plug>GitGutterPrevHunk &diff ? '[c' : ":\\<C-U>execute v:count1 . 'GitGutterPrevHunk'\\<CR>"$/;"	m
<Plug>GitGutterPreviewHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterPreviewHunk :GitGutterPreviewHunk<CR>$/;"	m
<Plug>GitGutterStageHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterStageHunk   :GitGutterStageHunk<CR>$/;"	m
<Plug>GitGutterTextObjectInnerPending	plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>GitGutterTextObjectInnerPending :<C-U>call gitgutter#hunk#text_object(1)<CR>$/;"	m
<Plug>GitGutterTextObjectOuterPending	plugged/vim-gitgutter/plugin/gitgutter.vim	/^onoremap <silent> <Plug>GitGutterTextObjectOuterPending :<C-U>call gitgutter#hunk#text_object(0)<CR>$/;"	m
<Plug>GitGutterUndoHunk	plugged/vim-gitgutter/plugin/gitgutter.vim	/^nnoremap <silent> <Plug>GitGutterUndoHunk    :GitGutterUndoHunk<CR>$/;"	m
<Plug>ISurround	plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>SurroundRepeat	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>TComment_<Leader>_<space>	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_<space> :TComment $/;"	m
<Plug>TComment_<Leader>__	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>__ :TComment<cr>$/;"	m
<Plug>TComment_<Leader>_a	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_a :TCommentAs $/;"	m
<Plug>TComment_<Leader>_b	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_b :TCommentBlock<cr>$/;"	m
<Plug>TComment_<Leader>_n	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_n :TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<Leader>_p	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_p vip:TComment<cr>$/;"	m
<Plug>TComment_<Leader>_r	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_r :TCommentRight<cr>$/;"	m
<Plug>TComment_<Leader>_s	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<Leader>_s :TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_<c-_><c-_>	plugged/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_><c-_> <c-o>:TComment<cr>$/;"	m
<Plug>TComment_<c-_><c-_>	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_><c-_> :TComment<cr>$/;"	m
<Plug>TComment_<c-_><c-_>	plugged/tcomment_vim/plugin/tcomment.vim	/^vnoremap <Plug>TComment_<c-_><c-_> :TCommentMaybeInline<cr>$/;"	m
<Plug>TComment_<c-_><space>	plugged/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_><space> <c-o>:TComment $/;"	m
<Plug>TComment_<c-_><space>	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_><space> :TComment $/;"	m
<Plug>TComment_<c-_>a	plugged/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>a <c-o>:TCommentAs $/;"	m
<Plug>TComment_<c-_>a	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>a :TCommentAs $/;"	m
<Plug>TComment_<c-_>b	plugged/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>b <c-\\><c-o>:TCommentBlock mode=#<cr>$/;"	m
<Plug>TComment_<c-_>b	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>b :TCommentBlock<cr>$/;"	m
<Plug>TComment_<c-_>ca	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>ca :<c-u>call tcomment#SetOption("as", input("Comment as: ", &filetype, "customlist,tcomment#complete#Complete"))<cr>$/;"	m
<Plug>TComment_<c-_>cc	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>cc :<c-u>call tcomment#SetOption("count", v:count1)<cr>$/;"	m
<Plug>TComment_<c-_>i	plugged/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>i <c-\\><c-o>v:TCommentInline mode=#<cr>$/;"	m
<Plug>TComment_<c-_>i	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>i v:TCommentInline mode=I#<cr>$/;"	m
<Plug>TComment_<c-_>i	plugged/tcomment_vim/plugin/tcomment.vim	/^vnoremap <Plug>TComment_<c-_>i :TCommentInline<cr>$/;"	m
<Plug>TComment_<c-_>n	plugged/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>n <c-o>:TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<c-_>n	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>n :TCommentAs <c-r>=&ft<cr> $/;"	m
<Plug>TComment_<c-_>p	plugged/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>p <c-o>:norm! m`vip<cr>:TComment<cr><c-o>``$/;"	m
<Plug>TComment_<c-_>p	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>p m`vip:TComment<cr>``$/;"	m
<Plug>TComment_<c-_>r	plugged/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>r <c-o>:TCommentRight<cr>$/;"	m
<Plug>TComment_<c-_>r	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>r :TCommentRight<cr>$/;"	m
<Plug>TComment_<c-_>s	plugged/tcomment_vim/plugin/tcomment.vim	/^inoremap <Plug>TComment_<c-_>s <c-o>:TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_<c-_>s	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_<c-_>s :TCommentAs <c-r>=&ft<cr>_$/;"	m
<Plug>TComment_ic	plugged/tcomment_vim/plugin/tcomment.vim	/^noremap <Plug>TComment_ic :<c-U>call tcomment#textobject#InlineComment()<cr>$/;"	m
<Plug>TComment_ic	plugged/tcomment_vim/plugin/tcomment.vim	/^vnoremap <Plug>TComment_ic :<c-U>call tcomment#textobject#InlineComment()<cr>$/;"	m
<Plug>VSurround	plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>VinegarSplitUp	plugged/vim-vinegar/plugin/vinegar.vim	/^nnoremap <silent> <Plug>VinegarSplitUp :call <SID>opendir('split')<CR>$/;"	m
<Plug>VinegarTabUp	plugged/vim-vinegar/plugin/vinegar.vim	/^nnoremap <silent> <Plug>VinegarTabUp :call <SID>opendir('tabedit')<CR>$/;"	m
<Plug>VinegarUp	plugged/vim-vinegar/plugin/vinegar.vim	/^nnoremap <silent> <Plug>VinegarUp :call <SID>opendir('edit')<CR>$/;"	m
<Plug>VinegarVerticalSplitUp	plugged/vim-vinegar/plugin/vinegar.vim	/^nnoremap <silent> <Plug>VinegarVerticalSplitUp :call <SID>opendir('vsplit')<CR>$/;"	m
<Plug>XTablineCdCurrent	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown1	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown2	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdDown3	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineCdHome	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>$/;"	m
<Plug>XTablineNextBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer$/;"	m
<Plug>XTablinePrevBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer$/;"	m
<Plug>XTablineReopen	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab$/;"	m
<Plug>XTablineSelectBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer$/;"	m
<Plug>XTablineToggleFiltering	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering$/;"	m
<Plug>XTablineToggleTabs	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs$/;"	m
<Plug>YSsurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'$/;"	m
<Plug>YSurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')$/;"	m
<Plug>Yssurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'$/;"	m
<Plug>Ysurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')$/;"	m
<SID>:	plugged/vim-fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>:.	plugged/vim-dispatch/plugin/dispatch.vim	/^nmap <script> <SID>:.    :<C-R>=getcmdline() =~ ',' ? "\\0250" : ""<CR>$/;"	m
<SID>NextBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>NextBuffer airline#extensions#tabline#xtabline#next_buffer(v:count1)$/;"	m
<SID>PrevBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>PrevBuffer airline#extensions#tabline#xtabline#prev_buffer(v:count1)$/;"	m
<SID>ReopenLastTab	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ReopenLastTab :XTabReopen<cr>$/;"	m
<SID>SelectBuffer	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <expr> <SID>SelectBuffer g:xtabline_changing_buffer ? "\\<C-c>" : ":<C-u>call airline#extensions#tabline#xtabline#select_buffer(v:count)\\<cr>"$/;"	m
<SID>ToggleFiltering	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleFiltering :call airline#extensions#tabline#xtabline#toggle_buffers()<cr>$/;"	m
<SID>ToggleTabs	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^    nnoremap <silent> <SID>ToggleTabs :call airline#extensions#tabline#xtabline#toggle_tabs()<cr>$/;"	m
<TAB>	cfg/packages/neocomplete.vim	/^inoremap <expr><TAB>  pumvisible() ? "\\<C-n>" : "\\<TAB>"$/;"	m
<Tab>	cfg/mapping.vim	/^inoremap <Tab> <C-R>=Tab_Or_Complete()<cr>$/;"	m
<c-T>	cfg/packages/tcomment.vim	/^nmap <c-T> :TComment<cr>$/;"	m
<c-T>	cfg/packages/tcomment.vim	/^vmap <c-T> :TComment<cr>$/;"	m
<c-\>	cfg/packages/tcomment.vim	/^nmap <c-\\> :TComment<cr>$/;"	m
<c-\>	cfg/packages/tcomment.vim	/^vmap <c-\\> :TComment<cr>$/;"	m
<c-n>	cfg/packages/gitgutter.vim	/^nnoremap <c-n> :GitGutterNextHunk<cr>$/;"	m
<c-n>	plugged/CmdlineComplete/plugin/cmdline-complete.vim	/^	cmap <unique> <silent> <c-n> <Plug>CmdlineCompleteForward$/;"	m
<c-p>	cfg/packages/gitgutter.vim	/^nnoremap <c-p> :GitGutterPrevHunk<cr>$/;"	m
<c-p>	plugged/CmdlineComplete/plugin/cmdline-complete.vim	/^	cmap <unique> <silent> <c-p> <Plug>CmdlineCompleteBackward$/;"	m
<c-x><c-l>	cfg/packages/fzf.vim	/^    imap <c-x><c-l> <plug>(fzf-complete-line)$/;"	m
<cr>	cfg/packages/easymotion.vim	/^nmap <cr> <Plug>(easymotion-bd-w)$/;"	m
<leader><BS>	cfg/packages/fzf.vim	/^    nnoremap <leader><BS> :Files<cr>$/;"	m
<leader><C-d>	cfg/packages/dispatch.vim	/^nnoremap <leader><C-d> :Dispatch!  && read<c-left><c-left><left>$/;"	m
<leader>bd	cfg/mapping.vim	/^ nnoremap <leader>bd :bp \\| bd #<cr>$/;"	m
<leader>bl	cfg/packages/fzf.vim	/^    nnoremap <leader>bl :BLines<cr>$/;"	m
<leader>bt	cfg/packages/fzf.vim	/^    nnoremap <leader>bt :BTags<cr>$/;"	m
<leader>cd2	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd2 <Plug>XTablineCdDown2$/;"	m
<leader>cd3	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cd3 <Plug>XTablineCdDown3$/;"	m
<leader>cdc	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdc <Plug>XTablineCdCurrent$/;"	m
<leader>cdd	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdd <Plug>XTablineCdDown1$/;"	m
<leader>cdh	plugged/vim-airline/autoload/airline/extensions/tabline/xtabline.vim	/^        map <unique> <leader>cdh <Plug>XTablineCdHome$/;"	m
<leader>cdl	cfg/mapping.vim	/^nnoremap <leader>cdl :cd %:p:h<cr>$/;"	m
<leader>cl	cfg/mapping.vim	/^nnoremap <leader>cl :lcd %:p:h<cr>$/;"	m
<leader>cr	cfg/mapping.vim	/^nnoremap <leader>cr :ProjectRootCD<cr>$/;"	m
<leader>dd	cfg/packages/dispatch.vim	/^nnoremap <leader>dd :Dispatch!  && read<c-left><c-left><left>$/;"	m
<leader>ee	cfg/mapping.vim	/^nnoremap <leader>ee :e %:p:h<tab>$/;"	m
<leader>f	plugged/ranger.vim/plugin/ranger.vim	/^  map <leader>f :Ranger<CR>$/;"	m
<leader>fa	cfg/packages/macvim.vim	/^    nmap <leader>fa :Favorites<cr>$/;"	m
<leader>ff	cfg/packages/ack.vim	/^nnoremap <leader>ff :Ack$/;"	m
<leader>gg	cfg/packages/agrep.vim	/^nnoremap <leader>gg :Agrep -r '' . <left><left><left><left>$/;"	m
<leader>gp	cfg/packages/gitgutter.vim	/^nnoremap <leader>gp :GitGutterPreviewHunk<cr>$/;"	m
<leader>gr	cfg/packages/gitgutter.vim	/^nnoremap <leader>gr :GitGutterUndoHunk<cr>$/;"	m
<leader>gs	cfg/packages/fzf.vim	/^    nnoremap <leader>gs :GFiles?<cr>$/;"	m
<leader>gt	cfg/packages/gitgutter.vim	/^nnoremap <leader>gt :GitGutterToggle<cr>$/;"	m
<leader>hc	cfg/packages/fzf.vim	/^    nnoremap <leader>hc :History:<cr>$/;"	m
<leader>hh	cfg/packages/fzf.vim	/^    nnoremap <leader>hh :History<cr>$/;"	m
<leader>hs	cfg/packages/fzf.vim	/^    nnoremap <leader>hs :History\/<cr>$/;"	m
<leader>js	cfg/mapping.vim	/^ vnoremap <leader>js :<',>'!python -m json.tool<cr>$/;"	m
<leader>js	cfg/packages/jsdoc.vim	/^nnoremap <leader>js :JsDoc<cr>$/;"	m
<leader>lc	cfg/mapping.vim	/^ nnoremap <leader>lc :lclose<cr>$/;"	m
<leader>li	cfg/packages/limelight.vim	/^nnoremap <leader>li :Limelight<cr>$/;"	m
<leader>ln	cfg/mapping.vim	/^ nnoremap <leader>ln :lnext<cr>$/;"	m
<leader>lo	cfg/mapping.vim	/^ nnoremap <leader>lo :lopen<cr>$/;"	m
<leader>lp	cfg/mapping.vim	/^ nnoremap <leader>lp :lprevious<cr>$/;"	m
<leader>ls	cfg/packages/fzf.vim	/^    nnoremap <leader>ls :Buffers<cr>$/;"	m
<leader>lt	cfg/mapping.vim	/^ nnoremap <leader>lt :call LocationListToggle()<cr>$/;"	m
<leader>mr	cfg/packages/fzf.vim	/^    nnoremap <leader>mr :FZFMru<cr>$/;"	m
<leader>qa	cfg/mapping.vim	/^nnoremap <leader>qa :qall!<cr>$/;"	m
<leader>qc	cfg/mapping.vim	/^ nnoremap <leader>qc :cclose<cr>$/;"	m
<leader>qn	cfg/mapping.vim	/^ nnoremap <leader>qn :cnext<cr>$/;"	m
<leader>qo	cfg/mapping.vim	/^ nnoremap <leader>qo :copen<cr>$/;"	m
<leader>qp	cfg/mapping.vim	/^ nnoremap <leader>qp :cprevious<cr>$/;"	m
<leader>qt	cfg/mapping.vim	/^ nnoremap <leader>qt :call QuickfixToggle()<cr>$/;"	m
<leader>s.	cfg/mapping.vim	/^nmap <leader>s. :source %<cr>$/;"	m
<leader>sb	cfg/mapping.vim	/^nnoremap <leader>sb :set scrollbind<cr>$/;"	m
<leader>sv	cfg/mapping.vim	/^nnoremap <leader>sv :source ~\/.vimrc<cr>$/;"	m
<leader>sw	cfg/require.vim	/^    nnoremap <leader>sw ToggleSpec()<CR>$/;"	m
<leader>sw	plugged/javascript-switch.vim/plugin/javascript-switch.vim	/^    nnoremap <leader>sw ToggleSpec()<CR>$/;"	m
<leader>ta	cfg/packages/fzf.vim	/^    nnoremap <leader>ta :Tags<cr>$/;"	m
<leader>td	cfg/packages/tern.vim	/^    nnoremap <leader>td :TernDef<cr>$/;"	m
<leader>tn	cfg/mapping.vim	/^ nnoremap <leader>tn :tnext<cr>$/;"	m
<leader>tp	cfg/mapping.vim	/^ nnoremap <leader>tp :tprev<cr>$/;"	m
<leader>tt	cfg/packages/tmux.vim	/^nnoremap <leader>tt :silent !tmux send-keys -t  "" C-m<left><left><left><left><left><left><left>$/;"	m
<leader>tw	cfg/mapping.vim	/^ nnoremap <leader>tw :tag <C-R><C-W><cr>$/;"	m
<leader>vn	cfg/packages/nyaovim.vim	/^nnoremap <leader>vn :e ~\/.config\/nyaovim\/nyaovimrc.html <cr>$/;"	m
<leader>wd	cfg/mapping.vim	/^nnoremap <leader>wd :bd<cr>$/;"	m
<leader>wo	cfg/mapping.vim	/^nnoremap <leader>wo :only!<cr>$/;"	m
<leader>wq	cfg/mapping.vim	/^nnoremap <leader>wq :wq!<cr>$/;"	m
<leader>ws	cfg/mapping.vim	/^nnoremap <leader>ws :w!<cr>$/;"	m
<leader>ww	cfg/packages/windowswap.vim	/^nnoremap <silent> <leader>ww :call WindowSwap#EasyWindowSwap()<cr>$/;"	m
<leader>ya	cfg/mapping.vim	/^nnoremap <leader>ya :let @* = expand("%:p")<cr>$/;"	m
<plug>(-fzf-/)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -type f -print -o -type l -print \\| sed 's:^..::'")$/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -prune -o -print \\| sed '1d;s:^..::'")$/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<space>	cfg/mapping.vim	/^nmap <space> <leader>$/;"	m
>	cfg/mapping.vim	/^ vnoremap > >gv$/;"	m
ACTION_KEYSTROKE_PATTERN	plugged/denite.nvim/rplugin/python3/denite/prompt/prompt.py	/^ACTION_KEYSTROKE_PATTERN = re.compile($/;"	v
ACTION_PATTERN	plugged/denite.nvim/rplugin/python3/denite/prompt/action.py	/^ACTION_PATTERN = re.compile($/;"	v
ACTION_PATTERN	plugged/denite.nvim/rplugin/python3/denite/prompt/prompt.py	/^from .action import ACTION_PATTERN$/;"	i
ADJACENCY_BONUS	plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^ADJACENCY_BONUS = 5$/;"	v
ALLSPHINXOPTS	plugged/denite.nvim/rplugin/python3/denite/prompt/docs/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
ALLSPHINXOPTS	plugged/denite.nvim/rplugin/python3/denite/prompt/docs/make.bat	/^	set ALLSPHINXOPTS=-D latex_paper_size=%PAPER% %ALLSPHINXOPTS%$/;"	v
ALLSPHINXOPTS	plugged/denite.nvim/rplugin/python3/denite/prompt/docs/make.bat	/^set ALLSPHINXOPTS=-d %BUILDDIR%\/doctrees %SPHINXOPTS% .$/;"	v
API_INFO	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server_api_info.py	/^API_INFO = {$/;"	v
AbortDispatch	plugged/vim-dispatch/plugin/dispatch.vim	/^command! -bang -bar -nargs=* AbortDispatch$/;"	c
Ack	plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file Ack           call ack#Ack('grep<bang>', <q-args>)$/;"	c
AckAdd	plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file AckAdd        call ack#Ack('grepadd<bang>', <q-args>)$/;"	c
AckFile	plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file AckFile       call ack#Ack('grep<bang> -g', <q-args>)$/;"	c
AckFromSearch	plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=file AckFromSearch call ack#AckFromSearch('grep<bang>', <q-args>)$/;"	c
AckHelp	plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=* -complete=help AckHelp       call ack#AckHelp('grep<bang>', <q-args>)$/;"	c
AckWindow	plugged/ack.vim/plugin/ack.vim	/^command! -bang -nargs=*                AckWindow     call ack#AckWindow('grep<bang>', <q-args>)$/;"	c
Action	plugged/denite.nvim/rplugin/python3/denite/prompt/action.py	/^class Action:$/;"	c
ActionAttr	plugged/defx.nvim/rplugin/python3/defx/action.py	/^class ActionAttr(IntFlag):$/;"	c
ActionTable	plugged/defx.nvim/rplugin/python3/defx/action.py	/^class ActionTable(typing.NamedTuple):$/;"	c
AdaptCursorOffsetIfNeeded	plugged/MatchTagAlways/python/mta_core.py	/^def AdaptCursorOffsetIfNeeded( sanitized_html, cursor_offset ):$/;"	f
AddBlockTag	plugged/html5.vim/indent/html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
AddExprCallback	plugged/neomake/autoload/neomake.vim	/^function! s:AddExprCallback(jobinfo, prev_list) abort$/;"	f
AddHighlighting	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^augroup AddHighlighting$/;"	a
AddHighlighting	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:AddHighlighting()$/;"	f
AddITags	plugged/html5.vim/indent/html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
AddLine	plugged/vim-easymotion/t/compare_movements_spec.vim	/^function! AddLine(str)$/;"	f
AddLine	plugged/vim-easymotion/t/easymotion_spec.vim	/^function! AddLine(str)$/;"	f
AddLine	plugged/vim-easymotion/t/operator_pending_spec.vim	/^function! AddLine(str)$/;"	f
AddLine	plugged/vim-easymotion/t/smartsign_spec.vim	/^function! AddLine(str)$/;"	f
AddToClasspath	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:AddToClasspath(classpath, path) abort$/;"	f
AdditionalColors	plugged/vim-coloresque/after/syntax/css/vim-coloresque.vim	/^function! s:AdditionalColors()$/;"	f
After	plugged/neomake/tests/include/init.vim	/^function! s:After()$/;"	f
AgHandler	cfg/packages/fzf.vim	/^    function! AgHandler(line)$/;"	f
AirlineExtensions	plugged/vim-airline/plugin/airline.vim	/^command! AirlineExtensions   call s:airline_extensions()$/;"	c
AirlineRefresh	plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineRefresh call s:airline_refresh()$/;"	c
AirlineTheme	plugged/vim-airline/plugin/airline.vim	/^command! -bar -nargs=? -complete=customlist,<sid>get_airline_themes AirlineTheme call <sid>airline_theme(<f-args>)$/;"	c
AirlineToggle	plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggle  call s:airline_toggle()$/;"	c
AirlineToggleWhitespace	plugged/vim-airline/plugin/airline.vim	/^command! -bar AirlineToggleWhitespace call airline#extensions#whitespace#toggle()$/;"	c
AirlineWebDevIcons	plugged/vim-devicons/plugin/webdevicons.vim	/^function! AirlineWebDevIcons(...)$/;"	f
Aliases	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Aliases() abort$/;"	f
Alien2	plugged/html5.vim/indent/html.vim	/^func! s:Alien2()$/;"	f
Alien3	plugged/html5.vim/indent/html.vim	/^func! s:Alien3()$/;"	f
Alien4	plugged/html5.vim/indent/html.vim	/^func! s:Alien4()$/;"	f
Alien5	plugged/html5.vim/indent/html.vim	/^func! s:Alien5()$/;"	f
Alien6	plugged/html5.vim/indent/html.vim	/^func! s:Alien6()$/;"	f
AlternatePair	plugged/vim-javascript/indent/javascript.vim	/^function s:AlternatePair()$/;"	f
App	plugged/vim-jsx-pretty/sample.js	/^class App extends Component {$/;"	C
ApplyMappings	plugged/ack.vim/autoload/ack.vim	/^function! s:ApplyMappings() "{{{$/;"	f
AssertEqualQf	plugged/neomake/tests/include/init.vim	/^command! -nargs=1 AssertEqualQf call s:AssertEqualQf(<args>)$/;"	c
AssertEqualQf	plugged/neomake/tests/include/init.vim	/^function! s:AssertEqualQf(actual, expected, ...) abort$/;"	f
AssertNeomakeMessage	plugged/neomake/tests/include/init.vim	/^command! -nargs=+ AssertNeomakeMessage call s:AssertNeomakeMessage(<args>)$/;"	c
AssertNeomakeMessage	plugged/neomake/tests/include/init.vim	/^function! s:AssertNeomakeMessage(msg, ...)$/;"	f
AssertNeomakeMessageAbsent	plugged/neomake/tests/include/init.vim	/^command! -nargs=+ AssertNeomakeMessageAbsent call s:AssertNeomakeMessageAbsent(<args>)$/;"	c
AssertNeomakeMessageAbsent	plugged/neomake/tests/include/init.vim	/^function! s:AssertNeomakeMessageAbsent(msg, ...)$/;"	f
AutoProjectRootCD	cfg/function.vim	/^function! <SID>AutoProjectRootCD()$/;"	f
BASE_DIR	plugged/denite.nvim/rplugin/python3/denite/prompt/docs/conf.py	/^BASE_DIR = os.path.dirname(os.path.dirname(__file__))$/;"	v
BMChangeDirectory	plugged/fzf-bookmark.vim/plugin/fzf-bookmark.vim	/^command BMChangeDirectory execute "call ListFavorites('s:ChangeDirectory')"$/;"	c
BMFiles	plugged/fzf-bookmark.vim/plugin/fzf-bookmark.vim	/^command BMFiles execute "call ListFavorites('s:OpenAllFiles')"$/;"	c
BMGitFiles	plugged/fzf-bookmark.vim/plugin/fzf-bookmark.vim	/^command BMGitFiles execute "call ListFavorites('s:OpenGitFiles')"$/;"	c
BOUNDARY_CHARS	plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^BOUNDARY_CHARS = string.punctuation + string.whitespace$/;"	v
BOnly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang BOnly$/;"	c
BUFFER_HIGHLIGHT_SYNTAX	plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^BUFFER_HIGHLIGHT_SYNTAX = [$/;"	v
BUFFER_TYPE	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^BUFFER_TYPE = type(vim.current.buffer)$/;"	v
BUFFER_TYPE_ID	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_protocol.py	/^BUFFER_TYPE_ID = neovim_rpc_server_api_info.API_INFO['types']['Buffer']['id']$/;"	v
BUILDDIR	plugged/denite.nvim/rplugin/python3/denite/prompt/docs/Makefile	/^BUILDDIR      = _build$/;"	m
BUILDDIR	plugged/denite.nvim/rplugin/python3/denite/prompt/docs/make.bat	/^set BUILDDIR=_build$/;"	v
BWCCreateDir	cfg/function.vim	/^augroup BWCCreateDir$/;"	a
Balanced	plugged/vim-javascript/indent/javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
Base	plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^class Base:$/;"	c
Base	plugged/defx.nvim/rplugin/python3/defx/base/source.py	/^class Base:$/;"	c
Base	plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^from defx.base.column import Base$/;"	i
Base	plugged/defx.nvim/rplugin/python3/defx/column/mark.py	/^from defx.base.column import Base$/;"	i
Base	plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^from defx.base.column import Base$/;"	i
Base	plugged/defx.nvim/rplugin/python3/defx/source/file.py	/^from defx.base.source import Base$/;"	i
Base	plugged/defx.nvim/rplugin/python3/denite/source/defx/history.py	/^from ..base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/base.py	/^class Base(object):$/;"	c
Base	plugged/denite.nvim/rplugin/python3/denite/filter/converter/abbr_word.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_abbr.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/converter/relative_word.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/converter_abbr_word.py	/^from .converter.abbr_word import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/converter_relative_abbr.py	/^from .converter.relative_abbr import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/converter_relative_word.py	/^from .converter.relative_word import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher/cpsm.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher/fuzzy.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher/hide_hidden_files.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher/ignore_globs.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher/project_files.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher/regexp.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher/substring.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher_cpsm.py	/^from .matcher.cpsm import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher_fuzzy.py	/^from .matcher.fuzzy import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher_hide_hidden_files.py	/^from .matcher.hide_hidden_files import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher_ignore_globs.py	/^from .matcher.ignore_globs import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher_project_files.py	/^from .matcher.project_files import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher_regexp.py	/^from .matcher.regexp import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/matcher_substring.py	/^from .matcher.substring import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/sorter/rank.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/sorter/reverse.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/sorter/word.py	/^from denite.filter.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/sorter_rank.py	/^from .sorter.rank import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/sorter_reverse.py	/^from .sorter.reverse import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/sorter_sublime.py	/^from .sorter.sublime import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/filter/sorter_word.py	/^from .sorter.word import Filter as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/kind/base.py	/^class Base(object):$/;"	c
Base	plugged/denite.nvim/rplugin/python3/denite/kind/command.py	/^from denite.kind.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/kind/directory.py	/^from denite.kind.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/kind/openable.py	/^from denite.kind.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/kind/word.py	/^from denite.kind.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/base.py	/^class Base(object):$/;"	c
Base	plugged/denite.nvim/rplugin/python3/denite/source/buffer.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/colorscheme.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/command.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/file/__init__.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/file/old.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/file/point.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/file/rec.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/file_old.py	/^from .file.old import Source as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/file_point.py	/^from .file.point import Source as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/file_rec.py	/^from .file.rec import Source as Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/filetype.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/grep.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/help.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/jump.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/line.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/mark.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/menu.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/output.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/register.py	/^from denite.source.base import Base$/;"	i
Base	plugged/denite.nvim/rplugin/python3/denite/source/tag.py	/^from denite.source.base import Base$/;"	i
Base	plugged/deoplete-ternjs/rplugin/python3/deoplete/sources/ternjs.py	/^from deoplete.source.base import Base$/;"	i
Base	plugged/neco-look/rplugin/python3/deoplete/sources/look.py	/^from .base import Base$/;"	i
Base	plugged/neoinclude.vim/rplugin/python3/deoplete/sources/file_include.py	/^from .base import Base$/;"	i
Base	plugged/neoyank.vim/rplugin/python3/denite/source/neoyank.py	/^from .base import Base$/;"	i
Base	plugged/tmux-complete.vim/rplugin/python3/deoplete/sources/tmuxcomplete.py	/^from .base import Base$/;"	i
Base	plugged/vim-devicons/rplugin/python3/denite/filter/devicons_denite_converter.py	/^from .base import Base$/;"	i
BiggerTripple	plugged/deoplete-ternjs/tests/test-es6.js	/^class BiggerTripple extends Tripple {$/;"	C
Blame	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Blame(bang, line1, line2, count, mods, args) abort$/;"	f
BlameCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
BlameJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix) abort$/;"	f
BlameSyntax	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameSyntax() abort$/;"	f
BlobTemp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
BlurStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
Bonly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang Bonly$/;"	c
Bookmark.AddBookmark	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.CompareBookmarksByName	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
Bookmark.GetNodeForName	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
Bookmark.GetSelected	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.SortBookmarksList	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
Bookmark.ToRoot	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
Bookmark.Write	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
Bookmark.delete	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.open	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
Bookmark.openInNewTab	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
Bookmark.validate	plugged/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
Browse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Browse(bang,line1,count,...) abort$/;"	f
BufName	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
BufOnly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang BufOnly$/;"	c
BufOnly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^function! BufOnly(buffer, bang)$/;"	f
Bufonly	plugged/BufOnly.vim/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang Bufonly$/;"	c
CAMEL_BONUS	plugged/denite.nvim/rplugin/python3/denite/filter/sorter/sublime.py	/^CAMEL_BONUS = 10$/;"	v
CDPATH	plugged/neomake/Makefile	/^CDPATH:=$/;"	m
CHANGE_HIGHLIGHT_SYNTAX	plugged/denite.nvim/rplugin/python3/denite/source/change.py	/^CHANGE_HIGHLIGHT_SYNTAX = [$/;"	v
CLOSING	plugged/MatchTagAlways/python/mta_core.py	/^  CLOSING = 2$/;"	v	class:TagType
COMMENT_REGEX	plugged/MatchTagAlways/python/mta_core.py	/^COMMENT_REGEX = re.compile( '<!--.*?-->', re.DOTALL )$/;"	v
CONFIG_FILE	plugged/html5.vim/Makefile	/^CONFIG_FILE=config.mk$/;"	m
COPY	plugged/defx.nvim/rplugin/python3/defx/clipboard.py	/^    COPY = auto()$/;"	v	class:ClipboardAction
COVERAGE_FILE	plugged/neomake/Makefile	/^COVERAGE_FILE:=.coverage_covimerage$/;"	m
COVERAGE_VADER_ARGS	plugged/neomake/Makefile	/^testcoverage: COVERAGE_VADER_ARGS:=tests\/main.vader $(wildcard tests\/isolated\/*.vader)$/;"	m
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -R$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -i %TAGS_FILE%.files$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CSSIndent	plugged/html5.vim/indent/html.vim	/^func! s:CSSIndent()$/;"	f
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CTRL_KEY	plugged/denite.nvim/rplugin/python3/denite/prompt/key.py	/^CTRL_KEY = b'\\x80\\xfc\\x04'$/;"	v
CTRL_SHIFT_KEY	plugged/denite.nvim/rplugin/python3/denite/prompt/key.py	/^CTRL_SHIFT_KEY = b'\\x80\\xfc\\x06'$/;"	v
CURL_OPT	plugged/html5.vim/Makefile	/^CURL_OPT=$/;"	m
CallNeomake	plugged/neomake/tests/include/init.vim	/^command! -nargs=* CallNeomake call neomake#Make(<args>)$/;"	c
CalledProcessError	plugged/denite.nvim/rplugin/python3/denite/source/outline.py	/^from subprocess import check_output, CalledProcessError$/;"	i
CanAccessCursorColumn	plugged/MatchTagAlways/python/mta_vim.py	/^def CanAccessCursorColumn( cursor_column ):$/;"	f
Cancell	plugged/vim-easymotion/autoload/EasyMotion/command_line.vim	/^function! s:Cancell() " {{{$/;"	f
Caret	plugged/denite.nvim/rplugin/python3/denite/prompt/caret.py	/^class Caret:$/;"	c
Caret	plugged/denite.nvim/rplugin/python3/denite/prompt/prompt.py	/^        from .caret import Caret$/;"	i
Cd	cfg/packages/fzf.vim	/^    command! -nargs=* -complete=dir Cd call fzf#run(fzf#wrap($/;"	c
ChainMap	plugged/denite.nvim/rplugin/python3/denite/denite.py	/^from collections import ChainMap$/;"	i
ChangeDirectory	cfg/packages/fzf.vim	/^    function! s:ChangeDirectory(path)$/;"	f
ChangeDirectory	plugged/fzf-bookmark.vim/plugin/fzf-bookmark.vim	/^function! s:ChangeDirectory(path)$/;"	f
CheckBlockTag	plugged/html5.vim/indent/html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
CheckCustomTag	plugged/html5.vim/indent/html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
CheckDefined	plugged/vim-airline/autoload/airline/highlighter.vim	/^function! s:CheckDefined(colors)$/;"	f
CheckStackMakerAsync	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! s:CheckStackMakerAsync(_job_id, data, _event) dict abort$/;"	f
CheckTag	plugged/html5.vim/indent/html.vim	/^func! s:CheckTag(itag)$/;"	f
Choose	plugged/matchit/plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ClangFormat	plugged/vim-clang-format/plugin/clang_format.vim	/^command! -range=% -nargs=0 ClangFormat call clang_format#replace(<line1>, <line2>)$/;"	c
ClangFormatAutoDisable	plugged/vim-clang-format/plugin/clang_format.vim	/^command! ClangFormatAutoDisable call clang_format#disable_auto_format()$/;"	c
ClangFormatAutoEnable	plugged/vim-clang-format/plugin/clang_format.vim	/^command! ClangFormatAutoEnable call clang_format#enable_auto_format()$/;"	c
ClangFormatAutoToggle	plugged/vim-clang-format/plugin/clang_format.vim	/^command! ClangFormatAutoToggle call clang_format#toggle_auto_format()$/;"	c
ClangFormatEchoFormattedCode	plugged/vim-clang-format/plugin/clang_format.vim	/^command! -range=% -nargs=0 ClangFormatEchoFormattedCode echo clang_format#format(<line1>, <line2>)$/;"	c
ClassSep	plugged/neomake/autoload/neomake/makers/ft/java.vim	/^function! s:ClassSep() abort$/;"	f
CleanJobinfo	plugged/neomake/autoload/neomake.vim	/^function! s:CleanJobinfo(jobinfo, ...) abort$/;"	f
CleanUp	plugged/matchit/plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
CleanUpSpaceAndBackticks	plugged/neomake/autoload/neomake/makers/ft/haskell.vim	/^function! s:CleanUpSpaceAndBackticks() abort$/;"	f
ClearMatches	plugged/vim-coloresque/after/syntax/css/vim-coloresque.vim	/^function! s:ClearMatches()$/;"	f
Clipboard	plugged/defx.nvim/rplugin/python3/defx/clipboard.py	/^class Clipboard():$/;"	c
Clipboard	plugged/defx.nvim/rplugin/python3/defx/rplugin.py	/^from defx.clipboard import Clipboard$/;"	i
Clipboard	plugged/defx.nvim/rplugin/python3/defx/view.py	/^from defx.clipboard import Clipboard$/;"	i
ClipboardAction	plugged/defx.nvim/rplugin/python3/defx/action.py	/^from defx.clipboard import ClipboardAction$/;"	i
ClipboardAction	plugged/defx.nvim/rplugin/python3/defx/clipboard.py	/^class ClipboardAction(Enum):$/;"	c
CmdlineComplete	plugged/CmdlineComplete/plugin/cmdline-complete.vim	/^function! s:CmdlineComplete(backward)$/;"	f
Column	plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^class Column(Base):$/;"	c
Column	plugged/defx.nvim/rplugin/python3/defx/column/mark.py	/^class Column(Base):$/;"	c
Column	plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^class Column(Base):$/;"	c
Column	plugged/defx.nvim/rplugin/python3/defx/view.py	/^from defx.base.column import Base as Column$/;"	i
Command	plugged/denite.nvim/rplugin/python3/denite/source/command_history.py	/^from denite.kind.command import Kind as Command$/;"	i
CommentBlock	plugged/tcomment_vim/autoload/tcomment.vim	/^function! s:CommentBlock(beg, end, cbeg, cend, comment_mode, comment_do, checkRx, cdef) abort$/;"	f
Commit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Commit(mods, args, ...) abort$/;"	f
CommitComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitComplete(A,L,P) abort$/;"	f
CompareAge	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompareAge(mine, theirs) abort$/;"	f
CompareMovements	plugged/vim-easymotion/t/compare_movements_spec.vim	/^function! CompareMovements(movement1, movement2, backward)$/;"	f
CompilerSet	plugged/vim-javascript/compiler/eslint.vim	/^  command! -nargs=* CompilerSet setlocal <args>$/;"	c
Condition	plugged/denite.nvim/rplugin/python3/denite/prompt/prompt.py	/^Condition = namedtuple('Condition', ['text', 'caret_locus'])$/;"	v
ConstructFromCommentsOption	plugged/tcomment_vim/autoload/tcomment/vimoptions.vim	/^function! s:ConstructFromCommentsOption(comment_mode) abort$/;"	f
ContainerProxy	plugged/denite.nvim/rplugin/python3/denite/rplugin.py	/^class ContainerProxy(Proxy):$/;"	c
ContainingCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
Context	plugged/defx.nvim/rplugin/python3/defx/action.py	/^from defx.context import Context$/;"	i
Context	plugged/defx.nvim/rplugin/python3/defx/base/column.py	/^from defx.context import Context$/;"	i
Context	plugged/defx.nvim/rplugin/python3/defx/base/source.py	/^from defx.context import Context$/;"	i
Context	plugged/defx.nvim/rplugin/python3/defx/column/filename.py	/^from defx.context import Context$/;"	i
Context	plugged/defx.nvim/rplugin/python3/defx/column/mark.py	/^from defx.context import Context$/;"	i
Context	plugged/defx.nvim/rplugin/python3/defx/column/type.py	/^from defx.context import Context$/;"	i
Context	plugged/defx.nvim/rplugin/python3/defx/context.py	/^class Context(typing.NamedTuple):$/;"	c
Context	plugged/defx.nvim/rplugin/python3/defx/defx.py	/^from defx.context import Context$/;"	i
Context	plugged/defx.nvim/rplugin/python3/defx/source/file.py	/^from defx.context import Context$/;"	i
Context	plugged/defx.nvim/rplugin/python3/defx/view.py	/^from defx.context import Context$/;"	i
Continues	plugged/vim-javascript/indent/javascript.vim	/^function s:Continues()$/;"	f
Copen	plugged/vim-dispatch/plugin/dispatch.vim	/^command! -bang -bar Copen call dispatch#copen(<bang>0)$/;"	c
Count	plugged/matchit/plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
CountITags	plugged/html5.vim/indent/html.vim	/^func! s:CountITags(text)$/;"	f
CountTagsAndState	plugged/html5.vim/indent/html.vim	/^func! s:CountTagsAndState(text)$/;"	f
CreateCoordKeyDict	plugged/vim-easymotion/autoload/EasyMotion.vim	/^function! s:CreateCoordKeyDict(groups, ...)$/;"	f
Creator.BufNamePrefix	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
Creator.CreateMirror	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
Creator.CreateTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
Creator.CreateWindowTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
Creator.New	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
Creator.ToggleTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
Creator._bindMappings	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
Creator._broadcastInitEvent	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
Creator._createNERDTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
Creator._createTreeWin	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
Creator._isBufHidden	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
Creator._nextBufferName	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
Creator._nextBufferNumber	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
Creator._pathForString	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
Creator._removeTreeBufForTab	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
Creator._setCommonBufOptions	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
Creator._setupStatusline	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
Creator._tabpagevar	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
Creator._uniq	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
Creator.createMirror	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
Creator.createTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
Creator.createWindowTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
Creator.toggleTabTree	plugged/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
CssFirstUnfinished	plugged/html5.vim/indent/html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
CssPrevNonComment	plugged/html5.vim/indent/html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
CssUnfinished	plugged/html5.vim/indent/html.vim	/^func! s:CssUnfinished(text)$/;"	f
CurrentLineAndColumn	plugged/MatchTagAlways/python/mta_vim.py	/^def CurrentLineAndColumn():$/;"	f
CursorHoldUpdate	plugged/nerdtree-git-plugin/nerdtree_plugin/git_status.vim	/^function! s:CursorHoldUpdate()$/;"	f
CursorHoldUpdate	plugged/vim-devicons/plugin/webdevicons.vim	/^function! s:CursorHoldUpdate()$/;"	f
CursorPos	plugged/vim-easymotion/t/compare_movements_spec.vim	/^function! CursorPos()$/;"	f
CursorPos	plugged/vim-easymotion/t/easymotion_spec.vim	/^function! CursorPos()$/;"	f
CursorPos	plugged/vim-easymotion/t/operator_pending_spec.vim	/^function! CursorPos()$/;"	f
CursorPos	plugged/vim-easymotion/t/smartsign_spec.vim	/^function! CursorPos()$/;"	f
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEFAULT_ACTION	plugged/denite.nvim/rplugin/python3/denite/prompt/action.py	/^DEFAULT_ACTION = Action.from_rules([$/;"	v
DEFAULT_ACTION	plugged/denite.nvim/rplugin/python3/denite/prompt/prompt.py	/^        from .action import DEFAULT_ACTION$/;"	i
DEFAULT_ACTIONS	plugged/defx.nvim/rplugin/python3/defx/action.py	/^DEFAULT_ACTIONS = {$/;"	v
DEFAULT_ACTION_KEYMAP	plugged/denite.nvim/rplugin/python3/denite/ui/action.py	/^DEFAULT_ACTION_KEYMAP = {$/;"	v
DEFAULT_ACTION_KEYMAP	plugged/denite.nvim/rplugin/python3/denite/ui/default.py	/^from .action import DEFAULT_ACTION_KEYMAP$/;"	i
DEFAULT_ACTION_RULES	plugged/denite.nvim/rplugin/python3/denite/ui/action.py	/^DEFAULT_ACTION_RULES = [$/;"	v
DEFAULT_ACTION_RULES	plugged/denite.nvim/rplugin/python3/denite/ui/prompt.py	/^from .action import DEFAULT_ACTION_RULES$/;"	i
DEFAULT_HARVEST_INTERVAL	plugged/denite.nvim/rplugin/python3/denite/prompt/prompt.py	/^DEFAULT_HARVEST_INTERVAL = 0.033$/;"	v
DEFAULT_KEYMAP_RULES	plugged/denite.nvim/rplugin/python3/denite/prompt/keymap.py	/^DEFAULT_KEYMAP_RULES = ($/;"	v
DEFAULT_KEYMAP_RULES	plugged/denite.nvim/rplugin/python3/denite/prompt/prompt.py	/^        from .keymap import DEFAULT_KEYMAP_RULES, Keymap$/;"	i
DEFAULT_SKIP_LIST	plugged/denite.nvim/rplugin/python3/denite/scantree.py	/^DEFAULT_SKIP_LIST = ['.git', '.hg']$/;"	v
DEPEND_DIR	plugged/html5.vim/Makefile	/^DEPEND_DIR=\/tmp\/vim-deps$/;"	m
DEP_PLUGINS	plugged/neomake/Makefile	/^DEP_PLUGINS=$(TESTS_VADER_DIR) $(TESTS_FUGITIVE_DIR)$/;"	m
DEVNULL	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    DEVNULL = open(os.devnull, 'wb')$/;"	v
DEVNULL	plugged/vim-hug-neovim-rpc/pythonx/neovim_rpc_server.py	/^    from subprocess import DEVNULL$/;"	i
DIGRAPH_PATTERN	plugged/denite.nvim/rplugin/python3/denite/prompt/digraph.py	/^DIGRAPH_PATTERN = re.compile(r'(\\S{2})\\s+(\\S)+\\s+\\d+')$/;"	v
DIRS	plugged/html5.vim/Makefile	/^DIRS=`ls -1F | grep \/ | sed -e 's\/\\\/\/\/'`$/;"	m
DOCKER	plugged/neomake/Makefile	/^DOCKER=docker run $(DOCKER_STREAMS) --rm \\$/;"	m
DOCKER_IMAGE	plugged/neomake/Makefile	/^DOCKER_IMAGE:=$(if $(NEOMAKE_DOCKER_IMAGE),$(NEOMAKE_DOCKER_IMAGE),$(DOCKER_REPO):$(DOCKER_TAG))$/;"	m
DOCKER_MAKE_TARGET	plugged/neomake/Makefile	/^_docker_test: DOCKER_MAKE_TARGET=$(DOCKER_MAKE_TEST_TARGET) \\$/;"	m
DOCKER_MAKE_TARGET	plugged/neomake/Makefile	/^docker_check: DOCKER_MAKE_TARGET=check_docker$/;"	m
DOCKER_MAKE_TEST_ARGS	plugged/neomake/Makefile	/^docker_testcoverage: DOCKER_MAKE_TEST_ARGS:=$(if $(filter command line,$(origin COVERAGE_VADER_ARGS)),COVERAGE_VADER_ARGS="$(COVERAGE_VADER_ARGS)",$(if $(filter command line,$(origin VADER_ARGS)),COVERAGE_VADER_ARGS="$(VADER_ARGS)",))$/;"	m
DOCKER_MAKE_TEST_TARGET	plugged/neomake/Makefile	/^docker_test: DOCKER_MAKE_TEST_TARGET:=test$/;"	m
DOCKER_MAKE_TEST_TARGET	plugged/neomake/Makefile	/^docker_test_interactive: DOCKER_MAKE_TEST_TARGET:=test_interactive$/;"	m
DOCKER_MAKE_TEST_TARGET	plugged/neomake/Makefile	/^docker_testcoverage: DOCKER_MAKE_TEST_TARGET:=testcoverage$/;"	m
DOCKER_REPO	plugged/neomake/Makefile	/^DOCKER_REPO:=neomake\/vims-for-tests$/;"	m
DOCKER_RUN	plugged/neomake/Makefile	/^docker_make: DOCKER_RUN=make $(DOCKER_MAKE_TARGET)$/;"	m
DOCKER_STREAMS	plugged/neomake/Makefile	/^DOCKER_STREAMS:=-ti$/;"	m
DOCKER_STREAMS	plugged/neomake/Makefile	/^docker_test: DOCKER_STREAMS:=-t$/;"	m
DOCKER_STREAMS	plugged/neomake/Makefile	/^docker_test_interactive: DOCKER_STREAMS:=-ti$/;"	m
DOCKER_STREAMS	plugged/neomake/Makefile	/^docker_testcoverage: DOCKER_STREAMS:=-t$/;"	m
DOCKER_TAG	plugged/neomake/Makefile	/^DOCKER_TAG:=32$/;"	m
DOCKER_VIM	plugged/neomake/Makefile	/^_docker_test: DOCKER_VIM:=vim81$/;"	m
DOCKER_VIMS	plugged/neomake/Makefile	/^DOCKER_VIMS:=vim73 vim74-trusty vim74-xenial vim80 vim81 \\$/;"	m
Default	plugged/denite.nvim/rplugin/python3/denite/__init__.py	/^    from denite.ui.default import Default$/;"	i
Default	plugged/denite